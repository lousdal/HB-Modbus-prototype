
Modbus_kommunikation_dag3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00002f8e  00003022  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004a4  0080012e  0080012e  00003050  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003080  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  000030c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b2d2  00000000  00000000  000034b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000232f  00000000  00000000  0000e78a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e68  00000000  00000000  00010ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be0  00000000  00000000  00013924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003271  00000000  00000000  00014504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d66  00000000  00000000  00017775  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  0001b4db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__dtors_end>
       4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
       8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
       c:	0c 94 96 14 	jmp	0x292c	; 0x292c <__vector_3>
      10:	0c 94 96 14 	jmp	0x292c	; 0x292c <__vector_3>
      14:	0c 94 96 14 	jmp	0x292c	; 0x292c <__vector_3>
      18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      28:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      34:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      40:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__vector_16>
      44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      48:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__vector_18>
      4c:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__vector_19>
      50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      54:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      58:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      5c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      60:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      64:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      68:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      6c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      70:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      74:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      78:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      7c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      80:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      84:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      88:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      8c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      90:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      94:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      98:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      9c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      a0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      a4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      a8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      ac:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      b0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	00 00       	nop
      b6:	00 08       	sbc	r0, r0
      b8:	00 02       	muls	r16, r16
      ba:	01 00       	.word	0x0001	; ????
      bc:	00 03       	mulsu	r16, r16
      be:	04 07       	cpc	r16, r20
	...

000000c8 <digital_pin_to_bit_mask_PGM>:
      c8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d8:	04 08 10 20                                         ... 

000000dc <digital_pin_to_port_PGM>:
      dc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ec:	03 03 03 03                                         ....

000000f0 <port_to_input_PGM>:
      f0:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000fa <port_to_output_PGM>:
      fa:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000104 <port_to_mode_PGM>:
     104:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000010e <__ctors_start>:
     10e:	cb 0d       	add	r28, r11
     110:	c4 11       	cpse	r28, r4

00000112 <__ctors_end>:
     112:	d8 0d       	add	r29, r8

00000114 <__dtors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d8 e0       	ldi	r29, 0x08	; 8
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	ee e8       	ldi	r30, 0x8E	; 142
     128:	ff e2       	ldi	r31, 0x2F	; 47
     12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
     12c:	05 90       	lpm	r0, Z+
     12e:	0d 92       	st	X+, r0
     130:	ae 32       	cpi	r26, 0x2E	; 46
     132:	b1 07       	cpc	r27, r17
     134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
     136:	25 e0       	ldi	r18, 0x05	; 5
     138:	ae e2       	ldi	r26, 0x2E	; 46
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
     13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
     140:	a2 3d       	cpi	r26, 0xD2	; 210
     142:	b2 07       	cpc	r27, r18
     144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>

00000146 <__do_global_ctors>:
     146:	10 e0       	ldi	r17, 0x00	; 0
     148:	c9 e8       	ldi	r28, 0x89	; 137
     14a:	d0 e0       	ldi	r29, 0x00	; 0
     14c:	04 c0       	rjmp	.+8      	; 0x156 <__do_global_ctors+0x10>
     14e:	21 97       	sbiw	r28, 0x01	; 1
     150:	fe 01       	movw	r30, r28
     152:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__tablejump2__>
     156:	c7 38       	cpi	r28, 0x87	; 135
     158:	d1 07       	cpc	r29, r17
     15a:	c9 f7       	brne	.-14     	; 0x14e <__do_global_ctors+0x8>
     15c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <main>
     160:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__do_global_dtors>

00000164 <__bad_interrupt>:
     164:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000168 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	00 d0       	rcall	.+0      	; 0x16e <_ZN14HardwareSerial5beginEm+0x6>
     16e:	00 d0       	rcall	.+0      	; 0x170 <_ZN14HardwareSerial5beginEm+0x8>
     170:	00 d0       	rcall	.+0      	; 0x172 <_ZN14HardwareSerial5beginEm+0xa>
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
     176:	9a 83       	std	Y+2, r25	; 0x02
     178:	89 83       	std	Y+1, r24	; 0x01
     17a:	4b 83       	std	Y+3, r20	; 0x03
     17c:	5c 83       	std	Y+4, r21	; 0x04
     17e:	6d 83       	std	Y+5, r22	; 0x05
     180:	7e 83       	std	Y+6, r23	; 0x06
     182:	8b 81       	ldd	r24, Y+3	; 0x03
     184:	9c 81       	ldd	r25, Y+4	; 0x04
     186:	ad 81       	ldd	r26, Y+5	; 0x05
     188:	be 81       	ldd	r27, Y+6	; 0x06
     18a:	e9 81       	ldd	r30, Y+1	; 0x01
     18c:	fa 81       	ldd	r31, Y+2	; 0x02
     18e:	26 e0       	ldi	r18, 0x06	; 6
     190:	ac 01       	movw	r20, r24
     192:	bd 01       	movw	r22, r26
     194:	cf 01       	movw	r24, r30
     196:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <_ZN14HardwareSerial5beginEmh>
     19a:	00 00       	nop
     19c:	26 96       	adiw	r28, 0x06	; 6
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	cd bf       	out	0x3d, r28	; 61
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	08 95       	ret

000001ae <_ZN14HardwareSerial5writeEi>:
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <_ZN14HardwareSerial5writeEi+0x6>
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <_ZN14HardwareSerial5writeEi+0x8>
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
     1ba:	9a 83       	std	Y+2, r25	; 0x02
     1bc:	89 83       	std	Y+1, r24	; 0x01
     1be:	7c 83       	std	Y+4, r23	; 0x04
     1c0:	6b 83       	std	Y+3, r22	; 0x03
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	fc 01       	movw	r30, r24
     1c8:	80 81       	ld	r24, Z
     1ca:	91 81       	ldd	r25, Z+1	; 0x01
     1cc:	fc 01       	movw	r30, r24
     1ce:	20 81       	ld	r18, Z
     1d0:	31 81       	ldd	r19, Z+1	; 0x01
     1d2:	4b 81       	ldd	r20, Y+3	; 0x03
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	9a 81       	ldd	r25, Y+2	; 0x02
     1d8:	64 2f       	mov	r22, r20
     1da:	f9 01       	movw	r30, r18
     1dc:	09 95       	icall
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <_ZN14HardwareSerialcvbEv>:
    using Print::write; // pull in write(str) and write(buf, size) from Print
    operator bool() { return true; }
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	00 d0       	rcall	.+0      	; 0x1f2 <_ZN14HardwareSerialcvbEv+0x6>
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
     1f6:	9a 83       	std	Y+2, r25	; 0x02
     1f8:	89 83       	std	Y+1, r24	; 0x01
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	08 95       	ret

00000206 <_Z15resetMBrxBufferv>:

SoftwareSerial softwareSerial = SoftwareSerial(rxPin, txPin); // Initializing the softwareSerial with RX, TX

// Modbus functions
void resetMBrxBuffer()
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
	memset(MBrxBuffer, 0x00, sizeof(MBrxBuffer));		// Resets the MBrxBuffer with 0x00 on all places in the array
     20e:	40 e0       	ldi	r20, 0x00	; 0
     210:	51 e0       	ldi	r21, 0x01	; 1
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	81 e3       	ldi	r24, 0x31	; 49
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <memset>
	MBrxWritePos = 0;									// Sets the MBrxWritePos to zero to start at the first position in the array
     21e:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <MBrxWritePos>
}
     222:	00 00       	nop
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	08 95       	ret

0000022a <_Z19resetSensorRxBufferv>:

void resetSensorRxBuffer()
{
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
	memset(SensorRxBuffer, 0x00, sizeof(SensorRxBuffer));	// Resets the SensorRxBuffer with 0x00 on all places in the array
     232:	40 e0       	ldi	r20, 0x00	; 0
     234:	52 e0       	ldi	r21, 0x02	; 2
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	82 e3       	ldi	r24, 0x32	; 50
     23c:	92 e0       	ldi	r25, 0x02	; 2
     23e:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <memset>
	SensorRxWritePos = 0;									// Sets the SensorRxWritePos to zero to start at the first position in the array
     242:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <SensorRxWritePos>
}
     246:	00 00       	nop
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <_Z10txToSensorjhj>:

// Function for sending HBLC settings to sensor
void txToSensor(unsigned int SensorID, byte SensorSetting, unsigned int SensorSetValue)
{
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
     256:	2d 97       	sbiw	r28, 0x0d	; 13
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
     262:	9a 87       	std	Y+10, r25	; 0x0a
     264:	89 87       	std	Y+9, r24	; 0x09
     266:	6b 87       	std	Y+11, r22	; 0x0b
     268:	5d 87       	std	Y+13, r21	; 0x0d
     26a:	4c 87       	std	Y+12, r20	; 0x0c
	Serial.flush();
     26c:	84 ee       	ldi	r24, 0xE4	; 228
     26e:	94 e0       	ldi	r25, 0x04	; 4
     270:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN14HardwareSerial5flushEv>
	pinMode(txPin, OUTPUT);
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	87 e0       	ldi	r24, 0x07	; 7
     278:	0e 94 4a 13 	call	0x2694	; 0x2694 <pinMode>
	//DDRD &=~ (1 << txPin);
	//DDRD |= (1 << txPin);	// sets txPin as output

	byte LowSensorID = SensorID % 256;	// use modulus 256 to get the 8 bit remainder that is the 8 LSB
     27c:	89 85       	ldd	r24, Y+9	; 0x09
     27e:	8d 83       	std	Y+5, r24	; 0x05
	byte HighSensorID = SensorID >> 8;	// throw the 8 least significant bits away, so only the 8 most significant bits are left.
     280:	89 85       	ldd	r24, Y+9	; 0x09
     282:	9a 85       	ldd	r25, Y+10	; 0x0a
     284:	89 2f       	mov	r24, r25
     286:	99 27       	eor	r25, r25
     288:	8e 83       	std	Y+6, r24	; 0x06
	byte LowSensorSetValue;
	byte HighSensorSetValue;
	
	PayloadLength = PayloadLength2;
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <PayloadLength+0x1>
     292:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PayloadLength>
	
	if((SensorSetting == ZeroCali) || (SensorSetting == SpanCali) || (SensorSetting == SetVal) || (SensorSetting == AlarmDelay) ||
     296:	8b 85       	ldd	r24, Y+11	; 0x0b
     298:	81 33       	cpi	r24, 0x31	; 49
     29a:	91 f0       	breq	.+36     	; 0x2c0 <_Z10txToSensorjhj+0x72>
     29c:	8b 85       	ldd	r24, Y+11	; 0x0b
     29e:	82 33       	cpi	r24, 0x32	; 50
     2a0:	79 f0       	breq	.+30     	; 0x2c0 <_Z10txToSensorjhj+0x72>
     2a2:	8b 85       	ldd	r24, Y+11	; 0x0b
     2a4:	88 23       	and	r24, r24
     2a6:	61 f0       	breq	.+24     	; 0x2c0 <_Z10txToSensorjhj+0x72>
     2a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     2aa:	84 30       	cpi	r24, 0x04	; 4
     2ac:	49 f0       	breq	.+18     	; 0x2c0 <_Z10txToSensorjhj+0x72>
     2ae:	8b 85       	ldd	r24, Y+11	; 0x0b
     2b0:	8d 33       	cpi	r24, 0x3D	; 61
     2b2:	31 f0       	breq	.+12     	; 0x2c0 <_Z10txToSensorjhj+0x72>
	(SensorSetting == OffsetLengthDef) || (SensorSetting == OffsetMinimumLengthDef) || (SensorSetting == MeasurementLength))
     2b4:	8b 85       	ldd	r24, Y+11	; 0x0b
     2b6:	81 34       	cpi	r24, 0x41	; 65
     2b8:	19 f0       	breq	.+6      	; 0x2c0 <_Z10txToSensorjhj+0x72>
     2ba:	8b 85       	ldd	r24, Y+11	; 0x0b
     2bc:	85 33       	cpi	r24, 0x35	; 53
     2be:	d1 f4       	brne	.+52     	; 0x2f4 <_Z10txToSensorjhj+0xa6>
	{
		twoByteSensorSetValueFlag = true;
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <twoByteSensorSetValueFlag>
		PayloadLength = PayloadLength3;
     2c6:	83 e0       	ldi	r24, 0x03	; 3
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <PayloadLength+0x1>
     2ce:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PayloadLength>
		
		if(SensorSetValue < 256)
     2d2:	8c 85       	ldd	r24, Y+12	; 0x0c
     2d4:	9d 85       	ldd	r25, Y+13	; 0x0d
     2d6:	8f 3f       	cpi	r24, 0xFF	; 255
     2d8:	91 05       	cpc	r25, r1
     2da:	09 f0       	breq	.+2      	; 0x2de <_Z10txToSensorjhj+0x90>
     2dc:	20 f4       	brcc	.+8      	; 0x2e6 <_Z10txToSensorjhj+0x98>
		{
			LowSensorSetValue = SensorSetValue % 256;	// use modulus 256 to get the 8 bit remainder that is the 8 LSB
     2de:	8c 85       	ldd	r24, Y+12	; 0x0c
     2e0:	89 83       	std	Y+1, r24	; 0x01
			HighSensorSetValue = (byte)0x00;
     2e2:	1a 82       	std	Y+2, r1	; 0x02
     2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <_Z10txToSensorjhj+0xa6>
		}
		else
		{
			LowSensorSetValue = SensorSetValue % 256;	// use modulus 256 to get the 8 bit remainder that is the 8 LSB
     2e6:	8c 85       	ldd	r24, Y+12	; 0x0c
     2e8:	89 83       	std	Y+1, r24	; 0x01
			HighSensorSetValue = SensorSetValue >> 8;	// throw the 8 least significant bits away, so only 8 the most significant bits are left.
     2ea:	8c 85       	ldd	r24, Y+12	; 0x0c
     2ec:	9d 85       	ldd	r25, Y+13	; 0x0d
     2ee:	89 2f       	mov	r24, r25
     2f0:	99 27       	eor	r25, r25
     2f2:	8a 83       	std	Y+2, r24	; 0x02
		}
	}
	if(SensorSetting == HBLC_settings)
     2f4:	8b 85       	ldd	r24, Y+11	; 0x0b
     2f6:	81 32       	cpi	r24, 0x21	; 33
     2f8:	31 f4       	brne	.+12     	; 0x306 <_Z10txToSensorjhj+0xb8>
	{
		PayloadLength = PayloadLength1;
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <PayloadLength+0x1>
     302:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PayloadLength>
	}
	
	int checksum = 0;
     306:	1c 82       	std	Y+4, r1	; 0x04
     308:	1b 82       	std	Y+3, r1	; 0x03
	checksum += (LowSensorID ^ 0xFFFF);
     30a:	2b 81       	ldd	r18, Y+3	; 0x03
     30c:	3c 81       	ldd	r19, Y+4	; 0x04
     30e:	8d 81       	ldd	r24, Y+5	; 0x05
     310:	88 2f       	mov	r24, r24
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	a9 01       	movw	r20, r18
     316:	48 1b       	sub	r20, r24
     318:	59 0b       	sbc	r21, r25
     31a:	ca 01       	movw	r24, r20
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	9c 83       	std	Y+4, r25	; 0x04
     320:	8b 83       	std	Y+3, r24	; 0x03
	checksum += (HighSensorID ^ 0xFFFF);
     322:	2b 81       	ldd	r18, Y+3	; 0x03
     324:	3c 81       	ldd	r19, Y+4	; 0x04
     326:	8e 81       	ldd	r24, Y+6	; 0x06
     328:	88 2f       	mov	r24, r24
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	a9 01       	movw	r20, r18
     32e:	48 1b       	sub	r20, r24
     330:	59 0b       	sbc	r21, r25
     332:	ca 01       	movw	r24, r20
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	9c 83       	std	Y+4, r25	; 0x04
     338:	8b 83       	std	Y+3, r24	; 0x03
	checksum += (PayloadLength ^ 0xFFFF);
     33a:	8b 81       	ldd	r24, Y+3	; 0x03
     33c:	9c 81       	ldd	r25, Y+4	; 0x04
     33e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <PayloadLength>
     342:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <PayloadLength+0x1>
     346:	82 1b       	sub	r24, r18
     348:	93 0b       	sbc	r25, r19
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	9c 83       	std	Y+4, r25	; 0x04
     34e:	8b 83       	std	Y+3, r24	; 0x03
	if(SensorSetting != HBLC_settings)
     350:	8b 85       	ldd	r24, Y+11	; 0x0b
     352:	81 32       	cpi	r24, 0x21	; 33
     354:	a9 f1       	breq	.+106    	; 0x3c0 <_Z10txToSensorjhj+0x172>
	{
		checksum += (SensorSetting ^ 0xFFFF);
     356:	2b 81       	ldd	r18, Y+3	; 0x03
     358:	3c 81       	ldd	r19, Y+4	; 0x04
     35a:	8b 85       	ldd	r24, Y+11	; 0x0b
     35c:	88 2f       	mov	r24, r24
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	a9 01       	movw	r20, r18
     362:	48 1b       	sub	r20, r24
     364:	59 0b       	sbc	r21, r25
     366:	ca 01       	movw	r24, r20
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	9c 83       	std	Y+4, r25	; 0x04
     36c:	8b 83       	std	Y+3, r24	; 0x03
		if(twoByteSensorSetValueFlag == true)
     36e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <twoByteSensorSetValueFlag>
     372:	88 23       	and	r24, r24
     374:	c9 f0       	breq	.+50     	; 0x3a8 <_Z10txToSensorjhj+0x15a>
		{
			checksum += (LowSensorSetValue ^ 0xFFFF);
     376:	2b 81       	ldd	r18, Y+3	; 0x03
     378:	3c 81       	ldd	r19, Y+4	; 0x04
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	88 2f       	mov	r24, r24
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	a9 01       	movw	r20, r18
     382:	48 1b       	sub	r20, r24
     384:	59 0b       	sbc	r21, r25
     386:	ca 01       	movw	r24, r20
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	9c 83       	std	Y+4, r25	; 0x04
     38c:	8b 83       	std	Y+3, r24	; 0x03
			checksum += (HighSensorSetValue ^ 0xFFFF);
     38e:	2b 81       	ldd	r18, Y+3	; 0x03
     390:	3c 81       	ldd	r19, Y+4	; 0x04
     392:	8a 81       	ldd	r24, Y+2	; 0x02
     394:	88 2f       	mov	r24, r24
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	a9 01       	movw	r20, r18
     39a:	48 1b       	sub	r20, r24
     39c:	59 0b       	sbc	r21, r25
     39e:	ca 01       	movw	r24, r20
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	9c 83       	std	Y+4, r25	; 0x04
     3a4:	8b 83       	std	Y+3, r24	; 0x03
     3a6:	18 c0       	rjmp	.+48     	; 0x3d8 <_Z10txToSensorjhj+0x18a>
		}
		else
		{
			checksum += (SensorSetValue ^ 0xFFFF);
     3a8:	2b 81       	ldd	r18, Y+3	; 0x03
     3aa:	3c 81       	ldd	r19, Y+4	; 0x04
     3ac:	8c 85       	ldd	r24, Y+12	; 0x0c
     3ae:	9d 85       	ldd	r25, Y+13	; 0x0d
     3b0:	a9 01       	movw	r20, r18
     3b2:	48 1b       	sub	r20, r24
     3b4:	59 0b       	sbc	r21, r25
     3b6:	ca 01       	movw	r24, r20
     3b8:	01 97       	sbiw	r24, 0x01	; 1
     3ba:	9c 83       	std	Y+4, r25	; 0x04
     3bc:	8b 83       	std	Y+3, r24	; 0x03
     3be:	0c c0       	rjmp	.+24     	; 0x3d8 <_Z10txToSensorjhj+0x18a>
		}
	}
	else
	{
		checksum += ((SensorSetting) ^ 0xFFFF);
     3c0:	2b 81       	ldd	r18, Y+3	; 0x03
     3c2:	3c 81       	ldd	r19, Y+4	; 0x04
     3c4:	8b 85       	ldd	r24, Y+11	; 0x0b
     3c6:	88 2f       	mov	r24, r24
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	a9 01       	movw	r20, r18
     3cc:	48 1b       	sub	r20, r24
     3ce:	59 0b       	sbc	r21, r25
     3d0:	ca 01       	movw	r24, r20
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	9c 83       	std	Y+4, r25	; 0x04
     3d6:	8b 83       	std	Y+3, r24	; 0x03
	}
	byte CRC1stByte = checksum % 256;				// throw the 8 least significant bits away, so only the 8 most significant bits are left.
     3d8:	8b 81       	ldd	r24, Y+3	; 0x03
     3da:	9c 81       	ldd	r25, Y+4	; 0x04
     3dc:	90 78       	andi	r25, 0x80	; 128
     3de:	99 23       	and	r25, r25
     3e0:	1c f4       	brge	.+6      	; 0x3e8 <_Z10txToSensorjhj+0x19a>
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	9f 6f       	ori	r25, 0xFF	; 255
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	8f 83       	std	Y+7, r24	; 0x07
	byte CRC2ndByte = checksum >> 8;				// use modulus 256 to get the 8 bit remainder that is the 8 LSB
     3ea:	8b 81       	ldd	r24, Y+3	; 0x03
     3ec:	9c 81       	ldd	r25, Y+4	; 0x04
     3ee:	89 2f       	mov	r24, r25
     3f0:	99 0f       	add	r25, r25
     3f2:	99 0b       	sbc	r25, r25
     3f4:	88 87       	std	Y+8, r24	; 0x08

	softwareSerial.write(0x02);						// Wake up byte followed by a delay of 50ms
     3f6:	62 e0       	ldi	r22, 0x02	; 2
     3f8:	85 ec       	ldi	r24, 0xC5	; 197
     3fa:	94 e0       	ldi	r25, 0x04	; 4
     3fc:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN14SoftwareSerial5writeEh>
	delay(50);
     400:	62 e3       	ldi	r22, 0x32	; 50
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 aa 12 	call	0x2554	; 0x2554 <delay>
	softwareSerial.write(STX);						// STX is the start signal instead of Set RS-232 into transmitting mode
     40c:	62 e0       	ldi	r22, 0x02	; 2
     40e:	85 ec       	ldi	r24, 0xC5	; 197
     410:	94 e0       	ldi	r25, 0x04	; 4
     412:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN14SoftwareSerial5writeEh>
	softwareSerial.write(LowSensorID);				// Low byte of SensorID
     416:	6d 81       	ldd	r22, Y+5	; 0x05
     418:	85 ec       	ldi	r24, 0xC5	; 197
     41a:	94 e0       	ldi	r25, 0x04	; 4
     41c:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN14SoftwareSerial5writeEh>
	softwareSerial.write(HighSensorID);				// High byte of SensorID
     420:	6e 81       	ldd	r22, Y+6	; 0x06
     422:	85 ec       	ldi	r24, 0xC5	; 197
     424:	94 e0       	ldi	r25, 0x04	; 4
     426:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN14SoftwareSerial5writeEh>
	
	if(SensorSetting != HBLC_settings)
     42a:	8b 85       	ldd	r24, Y+11	; 0x0b
     42c:	81 32       	cpi	r24, 0x21	; 33
     42e:	21 f1       	breq	.+72     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
	{
		softwareSerial.write(PayloadLength);			// Payload length - the number of bytes containing the payload
     430:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PayloadLength>
     434:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PayloadLength+0x1>
     438:	68 2f       	mov	r22, r24
     43a:	85 ec       	ldi	r24, 0xC5	; 197
     43c:	94 e0       	ldi	r25, 0x04	; 4
     43e:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN14SoftwareSerial5writeEh>
		softwareSerial.write(SensorSetting);			// Payload data - 1st payload is the SensorSetting
     442:	6b 85       	ldd	r22, Y+11	; 0x0b
     444:	85 ec       	ldi	r24, 0xC5	; 197
     446:	94 e0       	ldi	r25, 0x04	; 4
     448:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN14SoftwareSerial5writeEh>
		if(twoByteSensorSetValueFlag == true)
     44c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <twoByteSensorSetValueFlag>
     450:	88 23       	and	r24, r24
     452:	59 f0       	breq	.+22     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		{
			softwareSerial.write(LowSensorSetValue);		// Payload data - Low Byte of SensorSetValue
     454:	69 81       	ldd	r22, Y+1	; 0x01
     456:	85 ec       	ldi	r24, 0xC5	; 197
     458:	94 e0       	ldi	r25, 0x04	; 4
     45a:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN14SoftwareSerial5writeEh>
			softwareSerial.write(HighSensorSetValue);		// Payload data - High Byte of SensorSetValue
     45e:	6a 81       	ldd	r22, Y+2	; 0x02
     460:	85 ec       	ldi	r24, 0xC5	; 197
     462:	94 e0       	ldi	r25, 0x04	; 4
     464:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN14SoftwareSerial5writeEh>
     468:	15 c0       	rjmp	.+42     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
		}
		else
		{
			softwareSerial.write(SensorSetValue);
     46a:	8c 85       	ldd	r24, Y+12	; 0x0c
     46c:	68 2f       	mov	r22, r24
     46e:	85 ec       	ldi	r24, 0xC5	; 197
     470:	94 e0       	ldi	r25, 0x04	; 4
     472:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN14SoftwareSerial5writeEh>
     476:	0e c0       	rjmp	.+28     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
		}
	}
	else
	{
		softwareSerial.write(PayloadLength);
     478:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PayloadLength>
     47c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PayloadLength+0x1>
     480:	68 2f       	mov	r22, r24
     482:	85 ec       	ldi	r24, 0xC5	; 197
     484:	94 e0       	ldi	r25, 0x04	; 4
     486:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN14SoftwareSerial5writeEh>
		softwareSerial.write(SensorSetting);			// Payload data - 1st payload is the SensorSetting.
     48a:	6b 85       	ldd	r22, Y+11	; 0x0b
     48c:	85 ec       	ldi	r24, 0xC5	; 197
     48e:	94 e0       	ldi	r25, 0x04	; 4
     490:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN14SoftwareSerial5writeEh>
	}
	softwareSerial.write(CRC1stByte);				// Checksum (CRC) CRC-First Byte - LSB
     494:	6f 81       	ldd	r22, Y+7	; 0x07
     496:	85 ec       	ldi	r24, 0xC5	; 197
     498:	94 e0       	ldi	r25, 0x04	; 4
     49a:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN14SoftwareSerial5writeEh>
	softwareSerial.write(CRC2ndByte);				// Checksum (CRC) CRC-Second Byte - MSB
     49e:	68 85       	ldd	r22, Y+8	; 0x08
     4a0:	85 ec       	ldi	r24, 0xC5	; 197
     4a2:	94 e0       	ldi	r25, 0x04	; 4
     4a4:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN14SoftwareSerial5writeEh>
	softwareSerial.flush();							// To be sure that all that is written to serial is send
     4a8:	85 ec       	ldi	r24, 0xC5	; 197
     4aa:	94 e0       	ldi	r25, 0x04	; 4
     4ac:	0e 94 26 14 	call	0x284c	; 0x284c <_ZN14SoftwareSerial5flushEv>
	pinMode(rxPin, INPUT);
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	87 e0       	ldi	r24, 0x07	; 7
     4b4:	0e 94 4a 13 	call	0x2694	; 0x2694 <pinMode>
	//DDRD &=~ (1 << txPin);
	//DDRD |=  (0 << txPin);	// sets txPin as input
	resetSensorRxBuffer();
     4b8:	0e 94 15 01 	call	0x22a	; 0x22a <_Z19resetSensorRxBufferv>
}
     4bc:	00 00       	nop
     4be:	2d 96       	adiw	r28, 0x0d	; 13
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <_Z12approveMBCRCi>:

bool approveMBCRC(int CRCLowByte)			// function to check receivedCRC with a calculated CRC of what is received
{
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <_Z12approveMBCRCi+0x6>
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <_Z12approveMBCRCi+0x8>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <_Z12approveMBCRCi+0xa>
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	9e 83       	std	Y+6, r25	; 0x06
     4e0:	8d 83       	std	Y+5, r24	; 0x05
	int tempCalculatedCRC = ModRTU_CRC(MBrxBuffer, CRCLowByte);	// uses the function ModRTU_CRC to calculate the CRC based on first 6 bytes received
     4e2:	8d 81       	ldd	r24, Y+5	; 0x05
     4e4:	9e 81       	ldd	r25, Y+6	; 0x06
     4e6:	bc 01       	movw	r22, r24
     4e8:	81 e3       	ldi	r24, 0x31	; 49
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 17 03 	call	0x62e	; 0x62e <_Z10ModRTU_CRCPhi>
     4f0:	9a 83       	std	Y+2, r25	; 0x02
     4f2:	89 83       	std	Y+1, r24	; 0x01
	
	int receivedCRC = (MBrxBuffer[CRCLowByte] << 8) + MBrxBuffer[CRCLowByte + 1];		// creates a variable of the CRCLowByte and add with the a CRC high byte
     4f4:	8d 81       	ldd	r24, Y+5	; 0x05
     4f6:	9e 81       	ldd	r25, Y+6	; 0x06
     4f8:	8f 5c       	subi	r24, 0xCF	; 207
     4fa:	9e 4f       	sbci	r25, 0xFE	; 254
     4fc:	fc 01       	movw	r30, r24
     4fe:	80 81       	ld	r24, Z
     500:	88 2f       	mov	r24, r24
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	38 2f       	mov	r19, r24
     506:	22 27       	eor	r18, r18
     508:	8d 81       	ldd	r24, Y+5	; 0x05
     50a:	9e 81       	ldd	r25, Y+6	; 0x06
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	8f 5c       	subi	r24, 0xCF	; 207
     510:	9e 4f       	sbci	r25, 0xFE	; 254
     512:	fc 01       	movw	r30, r24
     514:	80 81       	ld	r24, Z
     516:	88 2f       	mov	r24, r24
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	82 0f       	add	r24, r18
     51c:	93 1f       	adc	r25, r19
     51e:	9c 83       	std	Y+4, r25	; 0x04
     520:	8b 83       	std	Y+3, r24	; 0x03
	
	if(tempCalculatedCRC == receivedCRC)		// if tempCalculatedCRC is equal to receivedCRC
     522:	29 81       	ldd	r18, Y+1	; 0x01
     524:	3a 81       	ldd	r19, Y+2	; 0x02
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	9c 81       	ldd	r25, Y+4	; 0x04
     52a:	28 17       	cp	r18, r24
     52c:	39 07       	cpc	r19, r25
     52e:	11 f4       	brne	.+4      	; 0x534 <_Z12approveMBCRCi+0x64>
	{
		return true;							// return true
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	01 c0       	rjmp	.+2      	; 0x536 <_Z12approveMBCRCi+0x66>
	}
	else
	{
		return false;							// return false
     534:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     536:	26 96       	adiw	r28, 0x06	; 6
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <_Z22approveHBLCsettingsCRCi>:

bool approveHBLCsettingsCRC(int CRCLowByte)
{
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	2c 97       	sbiw	r28, 0x0c	; 12
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	de bf       	out	0x3e, r29	; 62
     558:	0f be       	out	0x3f, r0	; 63
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	9c 87       	std	Y+12, r25	; 0x0c
     55e:	8b 87       	std	Y+11, r24	; 0x0b
	int receivedCRC = (SensorRxBuffer[CRCLowByte] << 8) + SensorRxBuffer[CRCLowByte+1];
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	88 0f       	add	r24, r24
     566:	99 1f       	adc	r25, r25
     568:	8e 5c       	subi	r24, 0xCE	; 206
     56a:	9d 4f       	sbci	r25, 0xFD	; 253
     56c:	fc 01       	movw	r30, r24
     56e:	80 81       	ld	r24, Z
     570:	91 81       	ldd	r25, Z+1	; 0x01
     572:	38 2f       	mov	r19, r24
     574:	22 27       	eor	r18, r18
     576:	8b 85       	ldd	r24, Y+11	; 0x0b
     578:	9c 85       	ldd	r25, Y+12	; 0x0c
     57a:	01 96       	adiw	r24, 0x01	; 1
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	8e 5c       	subi	r24, 0xCE	; 206
     582:	9d 4f       	sbci	r25, 0xFD	; 253
     584:	fc 01       	movw	r30, r24
     586:	80 81       	ld	r24, Z
     588:	91 81       	ldd	r25, Z+1	; 0x01
     58a:	82 0f       	add	r24, r18
     58c:	93 1f       	adc	r25, r19
     58e:	9e 83       	std	Y+6, r25	; 0x06
     590:	8d 83       	std	Y+5, r24	; 0x05
	int checksum = 0;
     592:	1a 82       	std	Y+2, r1	; 0x02
     594:	19 82       	std	Y+1, r1	; 0x01
	int calcCRC = 0;
     596:	18 86       	std	Y+8, r1	; 0x08
     598:	1f 82       	std	Y+7, r1	; 0x07
	
	for(int i=1; i <= 80; i++)
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	9c 83       	std	Y+4, r25	; 0x04
     5a0:	8b 83       	std	Y+3, r24	; 0x03
     5a2:	8b 81       	ldd	r24, Y+3	; 0x03
     5a4:	9c 81       	ldd	r25, Y+4	; 0x04
     5a6:	81 35       	cpi	r24, 0x51	; 81
     5a8:	91 05       	cpc	r25, r1
     5aa:	b4 f4       	brge	.+44     	; 0x5d8 <_Z22approveHBLCsettingsCRCi+0x90>
	{
		checksum += (SensorRxBuffer[i]^0xFFFF);
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	9a 81       	ldd	r25, Y+2	; 0x02
     5b0:	2b 81       	ldd	r18, Y+3	; 0x03
     5b2:	3c 81       	ldd	r19, Y+4	; 0x04
     5b4:	22 0f       	add	r18, r18
     5b6:	33 1f       	adc	r19, r19
     5b8:	2e 5c       	subi	r18, 0xCE	; 206
     5ba:	3d 4f       	sbci	r19, 0xFD	; 253
     5bc:	f9 01       	movw	r30, r18
     5be:	20 81       	ld	r18, Z
     5c0:	31 81       	ldd	r19, Z+1	; 0x01
     5c2:	82 1b       	sub	r24, r18
     5c4:	93 0b       	sbc	r25, r19
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	9a 83       	std	Y+2, r25	; 0x02
     5ca:	89 83       	std	Y+1, r24	; 0x01
{
	int receivedCRC = (SensorRxBuffer[CRCLowByte] << 8) + SensorRxBuffer[CRCLowByte+1];
	int checksum = 0;
	int calcCRC = 0;
	
	for(int i=1; i <= 80; i++)
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	9c 81       	ldd	r25, Y+4	; 0x04
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	9c 83       	std	Y+4, r25	; 0x04
     5d4:	8b 83       	std	Y+3, r24	; 0x03
     5d6:	e5 cf       	rjmp	.-54     	; 0x5a2 <_Z22approveHBLCsettingsCRCi+0x5a>
	{
		checksum += (SensorRxBuffer[i]^0xFFFF);
	}
	
	byte lowByteChecksum = checksum;
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	89 87       	std	Y+9, r24	; 0x09
	byte highByteChecksum = checksum >> 8;
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	9a 81       	ldd	r25, Y+2	; 0x02
     5e0:	89 2f       	mov	r24, r25
     5e2:	99 0f       	add	r25, r25
     5e4:	99 0b       	sbc	r25, r25
     5e6:	8a 87       	std	Y+10, r24	; 0x0a
	
	calcCRC = lowByteChecksum << 8;
     5e8:	89 85       	ldd	r24, Y+9	; 0x09
     5ea:	88 2f       	mov	r24, r24
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	98 2f       	mov	r25, r24
     5f0:	88 27       	eor	r24, r24
     5f2:	98 87       	std	Y+8, r25	; 0x08
     5f4:	8f 83       	std	Y+7, r24	; 0x07
	calcCRC += highByteChecksum;
     5f6:	8a 85       	ldd	r24, Y+10	; 0x0a
     5f8:	88 2f       	mov	r24, r24
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	2f 81       	ldd	r18, Y+7	; 0x07
     5fe:	38 85       	ldd	r19, Y+8	; 0x08
     600:	82 0f       	add	r24, r18
     602:	93 1f       	adc	r25, r19
     604:	98 87       	std	Y+8, r25	; 0x08
     606:	8f 83       	std	Y+7, r24	; 0x07
	
	if(receivedCRC == calcCRC)
     608:	2d 81       	ldd	r18, Y+5	; 0x05
     60a:	3e 81       	ldd	r19, Y+6	; 0x06
     60c:	8f 81       	ldd	r24, Y+7	; 0x07
     60e:	98 85       	ldd	r25, Y+8	; 0x08
     610:	28 17       	cp	r18, r24
     612:	39 07       	cpc	r19, r25
     614:	11 f4       	brne	.+4      	; 0x61a <_Z22approveHBLCsettingsCRCi+0xd2>
	{
		return true;
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	01 c0       	rjmp	.+2      	; 0x61c <_Z22approveHBLCsettingsCRCi+0xd4>
	}
	else
	{
		return false;
     61a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     61c:	2c 96       	adiw	r28, 0x0c	; 12
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <_Z10ModRTU_CRCPhi>:

// Compute the MODBUS RTU CRC
uint16_t ModRTU_CRC(unsigned char buf[], int len)
{
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	2c 97       	sbiw	r28, 0x0c	; 12
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
     642:	9a 87       	std	Y+10, r25	; 0x0a
     644:	89 87       	std	Y+9, r24	; 0x09
     646:	7c 87       	std	Y+12, r23	; 0x0c
     648:	6b 87       	std	Y+11, r22	; 0x0b
	uint16_t crc = 0xFFFF;
     64a:	8f ef       	ldi	r24, 0xFF	; 255
     64c:	9f ef       	ldi	r25, 0xFF	; 255
     64e:	9a 83       	std	Y+2, r25	; 0x02
     650:	89 83       	std	Y+1, r24	; 0x01
	
	for (int pos = 0; pos < len; pos++)
     652:	1c 82       	std	Y+4, r1	; 0x04
     654:	1b 82       	std	Y+3, r1	; 0x03
     656:	2b 81       	ldd	r18, Y+3	; 0x03
     658:	3c 81       	ldd	r19, Y+4	; 0x04
     65a:	8b 85       	ldd	r24, Y+11	; 0x0b
     65c:	9c 85       	ldd	r25, Y+12	; 0x0c
     65e:	28 17       	cp	r18, r24
     660:	39 07       	cpc	r19, r25
     662:	0c f0       	brlt	.+2      	; 0x666 <_Z10ModRTU_CRCPhi+0x38>
     664:	3f c0       	rjmp	.+126    	; 0x6e4 <_Z10ModRTU_CRCPhi+0xb6>
	{
		crc ^= (uint16_t)buf[pos];          // XOR byte into least sig. byte of crc
     666:	8b 81       	ldd	r24, Y+3	; 0x03
     668:	9c 81       	ldd	r25, Y+4	; 0x04
     66a:	29 85       	ldd	r18, Y+9	; 0x09
     66c:	3a 85       	ldd	r19, Y+10	; 0x0a
     66e:	82 0f       	add	r24, r18
     670:	93 1f       	adc	r25, r19
     672:	fc 01       	movw	r30, r24
     674:	80 81       	ld	r24, Z
     676:	88 2f       	mov	r24, r24
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	29 81       	ldd	r18, Y+1	; 0x01
     67c:	3a 81       	ldd	r19, Y+2	; 0x02
     67e:	82 27       	eor	r24, r18
     680:	93 27       	eor	r25, r19
     682:	9a 83       	std	Y+2, r25	; 0x02
     684:	89 83       	std	Y+1, r24	; 0x01
		
		for (int i = 8; i != 0; i--)        // Loop over each bit
     686:	88 e0       	ldi	r24, 0x08	; 8
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	9e 83       	std	Y+6, r25	; 0x06
     68c:	8d 83       	std	Y+5, r24	; 0x05
     68e:	8d 81       	ldd	r24, Y+5	; 0x05
     690:	9e 81       	ldd	r25, Y+6	; 0x06
     692:	89 2b       	or	r24, r25
     694:	09 f1       	breq	.+66     	; 0x6d8 <_Z10ModRTU_CRCPhi+0xaa>
		{
			if ((crc & 0x0001) != 0)		// If the LSB is set
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	9a 81       	ldd	r25, Y+2	; 0x02
     69a:	81 70       	andi	r24, 0x01	; 1
     69c:	99 27       	eor	r25, r25
     69e:	89 2b       	or	r24, r25
     6a0:	79 f0       	breq	.+30     	; 0x6c0 <_Z10ModRTU_CRCPhi+0x92>
			{
				crc >>= 1;                  // Shift right
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	9a 81       	ldd	r25, Y+2	; 0x02
     6a6:	96 95       	lsr	r25
     6a8:	87 95       	ror	r24
     6aa:	9a 83       	std	Y+2, r25	; 0x02
     6ac:	89 83       	std	Y+1, r24	; 0x01
				crc ^= 0xA001;				// and XOR with 0xA001
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	9a 81       	ldd	r25, Y+2	; 0x02
     6b2:	f1 e0       	ldi	r31, 0x01	; 1
     6b4:	8f 27       	eor	r24, r31
     6b6:	f0 ea       	ldi	r31, 0xA0	; 160
     6b8:	9f 27       	eor	r25, r31
     6ba:	9a 83       	std	Y+2, r25	; 0x02
     6bc:	89 83       	std	Y+1, r24	; 0x01
     6be:	06 c0       	rjmp	.+12     	; 0x6cc <_Z10ModRTU_CRCPhi+0x9e>
			}
			else                            // Else LSB is not set
				crc >>= 1;					// Just shift right
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	9a 81       	ldd	r25, Y+2	; 0x02
     6c4:	96 95       	lsr	r25
     6c6:	87 95       	ror	r24
     6c8:	9a 83       	std	Y+2, r25	; 0x02
     6ca:	89 83       	std	Y+1, r24	; 0x01
	
	for (int pos = 0; pos < len; pos++)
	{
		crc ^= (uint16_t)buf[pos];          // XOR byte into least sig. byte of crc
		
		for (int i = 8; i != 0; i--)        // Loop over each bit
     6cc:	8d 81       	ldd	r24, Y+5	; 0x05
     6ce:	9e 81       	ldd	r25, Y+6	; 0x06
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	9e 83       	std	Y+6, r25	; 0x06
     6d4:	8d 83       	std	Y+5, r24	; 0x05
     6d6:	db cf       	rjmp	.-74     	; 0x68e <_Z10ModRTU_CRCPhi+0x60>
// Compute the MODBUS RTU CRC
uint16_t ModRTU_CRC(unsigned char buf[], int len)
{
	uint16_t crc = 0xFFFF;
	
	for (int pos = 0; pos < len; pos++)
     6d8:	8b 81       	ldd	r24, Y+3	; 0x03
     6da:	9c 81       	ldd	r25, Y+4	; 0x04
     6dc:	01 96       	adiw	r24, 0x01	; 1
     6de:	9c 83       	std	Y+4, r25	; 0x04
     6e0:	8b 83       	std	Y+3, r24	; 0x03
     6e2:	b9 cf       	rjmp	.-142    	; 0x656 <_Z10ModRTU_CRCPhi+0x28>
			}
			else                            // Else LSB is not set
				crc >>= 1;					// Just shift right
		}
	}
	byte lowByteCRC = crc;					// Makes low byte of crc
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	8f 83       	std	Y+7, r24	; 0x07
	byte highByteCRC = crc >> 8;			// Makes high byte of crc
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	9a 81       	ldd	r25, Y+2	; 0x02
     6ec:	89 2f       	mov	r24, r25
     6ee:	99 27       	eor	r25, r25
     6f0:	88 87       	std	Y+8, r24	; 0x08

	// swaps around the low and high byte
	crc = lowByteCRC << 8;
     6f2:	8f 81       	ldd	r24, Y+7	; 0x07
     6f4:	88 2f       	mov	r24, r24
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	98 2f       	mov	r25, r24
     6fa:	88 27       	eor	r24, r24
     6fc:	9a 83       	std	Y+2, r25	; 0x02
     6fe:	89 83       	std	Y+1, r24	; 0x01
	crc += highByteCRC;
     700:	88 85       	ldd	r24, Y+8	; 0x08
     702:	88 2f       	mov	r24, r24
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	29 81       	ldd	r18, Y+1	; 0x01
     708:	3a 81       	ldd	r19, Y+2	; 0x02
     70a:	82 0f       	add	r24, r18
     70c:	93 1f       	adc	r25, r19
     70e:	9a 83       	std	Y+2, r25	; 0x02
     710:	89 83       	std	Y+1, r24	; 0x01
	
	return crc;
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	9a 81       	ldd	r25, Y+2	; 0x02
}
     716:	2c 96       	adiw	r28, 0x0c	; 12
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <_Z25txToModbusRequestResponsehi>:

// Sensor functions
//void txToModbusRequestResponse(int FunctionArrayPosition, byte ModbusFunction)
void txToModbusRequestResponse(byte ModbusFunction, int SensorRegisterNumber)
{
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	64 97       	sbiw	r28, 0x14	; 20
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	8a 8b       	std	Y+18, r24	; 0x12
     73e:	7c 8b       	std	Y+20, r23	; 0x14
     740:	6b 8b       	std	Y+19, r22	; 0x13
	softwareSerial.flush();
     742:	85 ec       	ldi	r24, 0xC5	; 197
     744:	94 e0       	ldi	r25, 0x04	; 4
     746:	0e 94 26 14 	call	0x284c	; 0x284c <_ZN14SoftwareSerial5flushEv>
	digitalWrite(DE, HIGH);
     74a:	61 e0       	ldi	r22, 0x01	; 1
     74c:	83 e0       	ldi	r24, 0x03	; 3
     74e:	0e 94 86 13 	call	0x270c	; 0x270c <digitalWrite>
	digitalWrite(RE, HIGH);
     752:	61 e0       	ldi	r22, 0x01	; 1
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	0e 94 86 13 	call	0x270c	; 0x270c <digitalWrite>
	
	if((ModbusFunction == ReadInputRegisters) || (ModbusFunction == ReadHoldingRegisters))
     75a:	8a 89       	ldd	r24, Y+18	; 0x12
     75c:	84 30       	cpi	r24, 0x04	; 4
     75e:	21 f0       	breq	.+8      	; 0x768 <_Z25txToModbusRequestResponsehi+0x40>
     760:	8a 89       	ldd	r24, Y+18	; 0x12
     762:	83 30       	cpi	r24, 0x03	; 3
     764:	09 f0       	breq	.+2      	; 0x768 <_Z25txToModbusRequestResponsehi+0x40>
     766:	58 c1       	rjmp	.+688    	; 0xa18 <__stack+0x119>
	{
		int originalSensorRegisterNumber = SensorRegisterNumber;
     768:	8b 89       	ldd	r24, Y+19	; 0x13
     76a:	9c 89       	ldd	r25, Y+20	; 0x14
     76c:	9a 83       	std	Y+2, r25	; 0x02
     76e:	89 83       	std	Y+1, r24	; 0x01
		int MODBUS_RESPONSE_BUFFER_SIZE = 5;
     770:	85 e0       	ldi	r24, 0x05	; 5
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	9c 83       	std	Y+4, r25	; 0x04
     776:	8b 83       	std	Y+3, r24	; 0x03
		int ModbusFunctionReceived = ModbusFunction;
     778:	8a 89       	ldd	r24, Y+18	; 0x12
     77a:	88 2f       	mov	r24, r24
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	9d 87       	std	Y+13, r25	; 0x0d
     780:	8c 87       	std	Y+12, r24	; 0x0c
		byte byteCount = 0x02;
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	8d 83       	std	Y+5, r24	; 0x05
		
		if(quantityOfRegisters > 0x01)	//quantityOfRegisters is what's on MBrxBuffer[5]
     786:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     78a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
     78e:	02 97       	sbiw	r24, 0x02	; 2
     790:	84 f0       	brlt	.+32     	; 0x7b2 <_Z25txToModbusRequestResponsehi+0x8a>
		{
			byteCount *= quantityOfRegisters;
     792:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     796:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
     79a:	98 2f       	mov	r25, r24
     79c:	8d 81       	ldd	r24, Y+5	; 0x05
     79e:	89 9f       	mul	r24, r25
     7a0:	80 2d       	mov	r24, r0
     7a2:	11 24       	eor	r1, r1
     7a4:	8d 83       	std	Y+5, r24	; 0x05
			MODBUS_RESPONSE_BUFFER_SIZE = 5 + byteCount;
     7a6:	8d 81       	ldd	r24, Y+5	; 0x05
     7a8:	88 2f       	mov	r24, r24
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	05 96       	adiw	r24, 0x05	; 5
     7ae:	9c 83       	std	Y+4, r25	; 0x04
     7b0:	8b 83       	std	Y+3, r24	; 0x03
		}
				
		unsigned char *ModbusResponseBuffer = new unsigned char(MODBUS_RESPONSE_BUFFER_SIZE);	// creates an dynamic buffer with the given MODBUS_RESPONSE_BUFFER_SIZE
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 01 12 	call	0x2402	; 0x2402 <_Znwj>
     7ba:	2b 81       	ldd	r18, Y+3	; 0x03
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
     7c0:	9f 87       	std	Y+15, r25	; 0x0f
     7c2:	8e 87       	std	Y+14, r24	; 0x0e
		
		ModbusResponseBuffer[0] = SlaveAddress;
     7c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <SlaveAddress>
     7c8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <SlaveAddress+0x1>
     7cc:	28 2f       	mov	r18, r24
     7ce:	8e 85       	ldd	r24, Y+14	; 0x0e
     7d0:	9f 85       	ldd	r25, Y+15	; 0x0f
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
		ModbusResponseBuffer[1] = ModbusFunctionReceived;
     7d6:	8e 85       	ldd	r24, Y+14	; 0x0e
     7d8:	9f 85       	ldd	r25, Y+15	; 0x0f
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	2c 85       	ldd	r18, Y+12	; 0x0c
     7de:	fc 01       	movw	r30, r24
     7e0:	20 83       	st	Z, r18
		ModbusResponseBuffer[2] = byteCount;
     7e2:	8e 85       	ldd	r24, Y+14	; 0x0e
     7e4:	9f 85       	ldd	r25, Y+15	; 0x0f
     7e6:	02 96       	adiw	r24, 0x02	; 2
     7e8:	2d 81       	ldd	r18, Y+5	; 0x05
     7ea:	fc 01       	movw	r30, r24
     7ec:	20 83       	st	Z, r18
		ModbusResponseBuffer[3] = SensorRegisterBuffer[SensorRegisterNumber] >> 8;
     7ee:	8e 85       	ldd	r24, Y+14	; 0x0e
     7f0:	9f 85       	ldd	r25, Y+15	; 0x0f
     7f2:	03 96       	adiw	r24, 0x03	; 3
     7f4:	2b 89       	ldd	r18, Y+19	; 0x13
     7f6:	3c 89       	ldd	r19, Y+20	; 0x14
     7f8:	22 0f       	add	r18, r18
     7fa:	33 1f       	adc	r19, r19
     7fc:	2d 5c       	subi	r18, 0xCD	; 205
     7fe:	3b 4f       	sbci	r19, 0xFB	; 251
     800:	f9 01       	movw	r30, r18
     802:	20 81       	ld	r18, Z
     804:	31 81       	ldd	r19, Z+1	; 0x01
     806:	23 2f       	mov	r18, r19
     808:	33 0f       	add	r19, r19
     80a:	33 0b       	sbc	r19, r19
     80c:	fc 01       	movw	r30, r24
     80e:	20 83       	st	Z, r18
		ModbusResponseBuffer[4] = SensorRegisterBuffer[SensorRegisterNumber];
     810:	8e 85       	ldd	r24, Y+14	; 0x0e
     812:	9f 85       	ldd	r25, Y+15	; 0x0f
     814:	04 96       	adiw	r24, 0x04	; 4
     816:	2b 89       	ldd	r18, Y+19	; 0x13
     818:	3c 89       	ldd	r19, Y+20	; 0x14
     81a:	22 0f       	add	r18, r18
     81c:	33 1f       	adc	r19, r19
     81e:	2d 5c       	subi	r18, 0xCD	; 205
     820:	3b 4f       	sbci	r19, 0xFB	; 251
     822:	f9 01       	movw	r30, r18
     824:	20 81       	ld	r18, Z
     826:	31 81       	ldd	r19, Z+1	; 0x01
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
		SensorRegisterNumber++;
     82c:	8b 89       	ldd	r24, Y+19	; 0x13
     82e:	9c 89       	ldd	r25, Y+20	; 0x14
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	9c 8b       	std	Y+20, r25	; 0x14
     834:	8b 8b       	std	Y+19, r24	; 0x13
		
		if(quantityOfRegisters > 0x01)	//quantityOfRegisters is what's on MBrxBuffer[5]
     836:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     83a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
     83e:	02 97       	sbiw	r24, 0x02	; 2
     840:	0c f4       	brge	.+2      	; 0x844 <_Z25txToModbusRequestResponsehi+0x11c>
     842:	47 c0       	rjmp	.+142    	; 0x8d2 <_Z25txToModbusRequestResponsehi+0x1aa>
		{
			for(int i = 5; i < (5 + byteCount - (byteCount / 2 + 1)); i++)
     844:	85 e0       	ldi	r24, 0x05	; 5
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	9f 83       	std	Y+7, r25	; 0x07
     84a:	8e 83       	std	Y+6, r24	; 0x06
     84c:	8d 81       	ldd	r24, Y+5	; 0x05
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	9c 01       	movw	r18, r24
     854:	2b 5f       	subi	r18, 0xFB	; 251
     856:	3f 4f       	sbci	r19, 0xFF	; 255
     858:	8d 81       	ldd	r24, Y+5	; 0x05
     85a:	86 95       	lsr	r24
     85c:	88 2f       	mov	r24, r24
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	28 1b       	sub	r18, r24
     864:	39 0b       	sbc	r19, r25
     866:	8e 81       	ldd	r24, Y+6	; 0x06
     868:	9f 81       	ldd	r25, Y+7	; 0x07
     86a:	82 17       	cp	r24, r18
     86c:	93 07       	cpc	r25, r19
     86e:	8c f5       	brge	.+98     	; 0x8d2 <_Z25txToModbusRequestResponsehi+0x1aa>
			{
				ModbusResponseBuffer[i] = SensorRegisterBuffer[SensorRegisterNumber] >> 8;
     870:	8e 81       	ldd	r24, Y+6	; 0x06
     872:	9f 81       	ldd	r25, Y+7	; 0x07
     874:	2e 85       	ldd	r18, Y+14	; 0x0e
     876:	3f 85       	ldd	r19, Y+15	; 0x0f
     878:	82 0f       	add	r24, r18
     87a:	93 1f       	adc	r25, r19
     87c:	2b 89       	ldd	r18, Y+19	; 0x13
     87e:	3c 89       	ldd	r19, Y+20	; 0x14
     880:	22 0f       	add	r18, r18
     882:	33 1f       	adc	r19, r19
     884:	2d 5c       	subi	r18, 0xCD	; 205
     886:	3b 4f       	sbci	r19, 0xFB	; 251
     888:	f9 01       	movw	r30, r18
     88a:	20 81       	ld	r18, Z
     88c:	31 81       	ldd	r19, Z+1	; 0x01
     88e:	23 2f       	mov	r18, r19
     890:	33 0f       	add	r19, r19
     892:	33 0b       	sbc	r19, r19
     894:	fc 01       	movw	r30, r24
     896:	20 83       	st	Z, r18
				ModbusResponseBuffer[i+1] = SensorRegisterBuffer[SensorRegisterNumber++];
     898:	8e 81       	ldd	r24, Y+6	; 0x06
     89a:	9f 81       	ldd	r25, Y+7	; 0x07
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	2e 85       	ldd	r18, Y+14	; 0x0e
     8a0:	3f 85       	ldd	r19, Y+15	; 0x0f
     8a2:	28 0f       	add	r18, r24
     8a4:	39 1f       	adc	r19, r25
     8a6:	8b 89       	ldd	r24, Y+19	; 0x13
     8a8:	9c 89       	ldd	r25, Y+20	; 0x14
     8aa:	ac 01       	movw	r20, r24
     8ac:	4f 5f       	subi	r20, 0xFF	; 255
     8ae:	5f 4f       	sbci	r21, 0xFF	; 255
     8b0:	5c 8b       	std	Y+20, r21	; 0x14
     8b2:	4b 8b       	std	Y+19, r20	; 0x13
     8b4:	88 0f       	add	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	8d 5c       	subi	r24, 0xCD	; 205
     8ba:	9b 4f       	sbci	r25, 0xFB	; 251
     8bc:	fc 01       	movw	r30, r24
     8be:	80 81       	ld	r24, Z
     8c0:	91 81       	ldd	r25, Z+1	; 0x01
     8c2:	f9 01       	movw	r30, r18
     8c4:	80 83       	st	Z, r24
		ModbusResponseBuffer[4] = SensorRegisterBuffer[SensorRegisterNumber];
		SensorRegisterNumber++;
		
		if(quantityOfRegisters > 0x01)	//quantityOfRegisters is what's on MBrxBuffer[5]
		{
			for(int i = 5; i < (5 + byteCount - (byteCount / 2 + 1)); i++)
     8c6:	8e 81       	ldd	r24, Y+6	; 0x06
     8c8:	9f 81       	ldd	r25, Y+7	; 0x07
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	9f 83       	std	Y+7, r25	; 0x07
     8ce:	8e 83       	std	Y+6, r24	; 0x06
     8d0:	bd cf       	rjmp	.-134    	; 0x84c <_Z25txToModbusRequestResponsehi+0x124>
				ModbusResponseBuffer[i] = SensorRegisterBuffer[SensorRegisterNumber] >> 8;
				ModbusResponseBuffer[i+1] = SensorRegisterBuffer[SensorRegisterNumber++];
			}
		}

		int calcCRC = ModRTU_CRC(ModbusResponseBuffer, MODBUS_RESPONSE_BUFFER_SIZE);
     8d2:	2b 81       	ldd	r18, Y+3	; 0x03
     8d4:	3c 81       	ldd	r19, Y+4	; 0x04
     8d6:	8e 85       	ldd	r24, Y+14	; 0x0e
     8d8:	9f 85       	ldd	r25, Y+15	; 0x0f
     8da:	b9 01       	movw	r22, r18
     8dc:	0e 94 17 03 	call	0x62e	; 0x62e <_Z10ModRTU_CRCPhi>
     8e0:	99 8b       	std	Y+17, r25	; 0x11
     8e2:	88 8b       	std	Y+16, r24	; 0x10
		
		Serial.write(SlaveAddress);
     8e4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <SlaveAddress>
     8e8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <SlaveAddress+0x1>
     8ec:	bc 01       	movw	r22, r24
     8ee:	84 ee       	ldi	r24, 0xE4	; 228
     8f0:	94 e0       	ldi	r25, 0x04	; 4
     8f2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN14HardwareSerial5writeEi>
		Serial.write(ModbusFunctionReceived);
     8f6:	8c 85       	ldd	r24, Y+12	; 0x0c
     8f8:	9d 85       	ldd	r25, Y+13	; 0x0d
     8fa:	bc 01       	movw	r22, r24
     8fc:	84 ee       	ldi	r24, 0xE4	; 228
     8fe:	94 e0       	ldi	r25, 0x04	; 4
     900:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN14HardwareSerial5writeEi>
		Serial.write(byteCount);
     904:	6d 81       	ldd	r22, Y+5	; 0x05
     906:	84 ee       	ldi	r24, 0xE4	; 228
     908:	94 e0       	ldi	r25, 0x04	; 4
     90a:	0e 94 8b 10 	call	0x2116	; 0x2116 <_ZN14HardwareSerial5writeEh>

		Serial.write(SensorRegisterBuffer[originalSensorRegisterNumber] >> 8);	// Data High
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	9a 81       	ldd	r25, Y+2	; 0x02
     912:	88 0f       	add	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	8d 5c       	subi	r24, 0xCD	; 205
     918:	9b 4f       	sbci	r25, 0xFB	; 251
     91a:	fc 01       	movw	r30, r24
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	89 2f       	mov	r24, r25
     922:	99 0f       	add	r25, r25
     924:	99 0b       	sbc	r25, r25
     926:	bc 01       	movw	r22, r24
     928:	84 ee       	ldi	r24, 0xE4	; 228
     92a:	94 e0       	ldi	r25, 0x04	; 4
     92c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN14HardwareSerial5writeEi>
		Serial.write(SensorRegisterBuffer[originalSensorRegisterNumber]);		// Data Low
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	8d 5c       	subi	r24, 0xCD	; 205
     93a:	9b 4f       	sbci	r25, 0xFB	; 251
     93c:	fc 01       	movw	r30, r24
     93e:	80 81       	ld	r24, Z
     940:	91 81       	ldd	r25, Z+1	; 0x01
     942:	bc 01       	movw	r22, r24
     944:	84 ee       	ldi	r24, 0xE4	; 228
     946:	94 e0       	ldi	r25, 0x04	; 4
     948:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN14HardwareSerial5writeEi>
		originalSensorRegisterNumber += 1;
     94c:	89 81       	ldd	r24, Y+1	; 0x01
     94e:	9a 81       	ldd	r25, Y+2	; 0x02
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	9a 83       	std	Y+2, r25	; 0x02
     954:	89 83       	std	Y+1, r24	; 0x01
		
		if(quantityOfRegisters > 0x01)	//quantityOfRegisters is what's on MBrxBuffer[5]
     956:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     95a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
     95e:	02 97       	sbiw	r24, 0x02	; 2
     960:	0c f4       	brge	.+2      	; 0x964 <__stack+0x65>
     962:	40 c0       	rjmp	.+128    	; 0x9e4 <__stack+0xe5>
		{
			for(int i = 5; i < (5 + byteCount - (byteCount / 2 + 1)); i++)				// for loop that runs for the quantityOfRegisters - 1
     964:	85 e0       	ldi	r24, 0x05	; 5
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	99 87       	std	Y+9, r25	; 0x09
     96a:	88 87       	std	Y+8, r24	; 0x08
     96c:	8d 81       	ldd	r24, Y+5	; 0x05
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	9c 01       	movw	r18, r24
     974:	2b 5f       	subi	r18, 0xFB	; 251
     976:	3f 4f       	sbci	r19, 0xFF	; 255
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	86 95       	lsr	r24
     97c:	88 2f       	mov	r24, r24
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	28 1b       	sub	r18, r24
     984:	39 0b       	sbc	r19, r25
     986:	88 85       	ldd	r24, Y+8	; 0x08
     988:	99 85       	ldd	r25, Y+9	; 0x09
     98a:	82 17       	cp	r24, r18
     98c:	93 07       	cpc	r25, r19
     98e:	54 f5       	brge	.+84     	; 0x9e4 <__stack+0xe5>
			{
				Serial.write(SensorRegisterBuffer[originalSensorRegisterNumber] >> 8);	// Data High
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	9a 81       	ldd	r25, Y+2	; 0x02
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	8d 5c       	subi	r24, 0xCD	; 205
     99a:	9b 4f       	sbci	r25, 0xFB	; 251
     99c:	fc 01       	movw	r30, r24
     99e:	80 81       	ld	r24, Z
     9a0:	91 81       	ldd	r25, Z+1	; 0x01
     9a2:	89 2f       	mov	r24, r25
     9a4:	99 0f       	add	r25, r25
     9a6:	99 0b       	sbc	r25, r25
     9a8:	bc 01       	movw	r22, r24
     9aa:	84 ee       	ldi	r24, 0xE4	; 228
     9ac:	94 e0       	ldi	r25, 0x04	; 4
     9ae:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN14HardwareSerial5writeEi>
				Serial.write(SensorRegisterBuffer[originalSensorRegisterNumber++]);		// Data Low
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	9a 81       	ldd	r25, Y+2	; 0x02
     9b6:	9c 01       	movw	r18, r24
     9b8:	2f 5f       	subi	r18, 0xFF	; 255
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	3a 83       	std	Y+2, r19	; 0x02
     9be:	29 83       	std	Y+1, r18	; 0x01
     9c0:	88 0f       	add	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	8d 5c       	subi	r24, 0xCD	; 205
     9c6:	9b 4f       	sbci	r25, 0xFB	; 251
     9c8:	fc 01       	movw	r30, r24
     9ca:	80 81       	ld	r24, Z
     9cc:	91 81       	ldd	r25, Z+1	; 0x01
     9ce:	bc 01       	movw	r22, r24
     9d0:	84 ee       	ldi	r24, 0xE4	; 228
     9d2:	94 e0       	ldi	r25, 0x04	; 4
     9d4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN14HardwareSerial5writeEi>
		Serial.write(SensorRegisterBuffer[originalSensorRegisterNumber]);		// Data Low
		originalSensorRegisterNumber += 1;
		
		if(quantityOfRegisters > 0x01)	//quantityOfRegisters is what's on MBrxBuffer[5]
		{
			for(int i = 5; i < (5 + byteCount - (byteCount / 2 + 1)); i++)				// for loop that runs for the quantityOfRegisters - 1
     9d8:	88 85       	ldd	r24, Y+8	; 0x08
     9da:	99 85       	ldd	r25, Y+9	; 0x09
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	99 87       	std	Y+9, r25	; 0x09
     9e0:	88 87       	std	Y+8, r24	; 0x08
     9e2:	c4 cf       	rjmp	.-120    	; 0x96c <__stack+0x6d>
				Serial.write(SensorRegisterBuffer[originalSensorRegisterNumber++]);		// Data Low
				i+1;
			}
		}
		
		Serial.write(calcCRC >> 8);
     9e4:	88 89       	ldd	r24, Y+16	; 0x10
     9e6:	99 89       	ldd	r25, Y+17	; 0x11
     9e8:	89 2f       	mov	r24, r25
     9ea:	99 0f       	add	r25, r25
     9ec:	99 0b       	sbc	r25, r25
     9ee:	bc 01       	movw	r22, r24
     9f0:	84 ee       	ldi	r24, 0xE4	; 228
     9f2:	94 e0       	ldi	r25, 0x04	; 4
     9f4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN14HardwareSerial5writeEi>
		Serial.write(calcCRC);
     9f8:	88 89       	ldd	r24, Y+16	; 0x10
     9fa:	99 89       	ldd	r25, Y+17	; 0x11
     9fc:	bc 01       	movw	r22, r24
     9fe:	84 ee       	ldi	r24, 0xE4	; 228
     a00:	94 e0       	ldi	r25, 0x04	; 4
     a02:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN14HardwareSerial5writeEi>
		
		delete [] ModbusResponseBuffer;
     a06:	8e 85       	ldd	r24, Y+14	; 0x0e
     a08:	9f 85       	ldd	r25, Y+15	; 0x0f
     a0a:	89 2b       	or	r24, r25
     a0c:	09 f1       	breq	.+66     	; 0xa50 <__stack+0x151>
     a0e:	8e 85       	ldd	r24, Y+14	; 0x0e
     a10:	9f 85       	ldd	r25, Y+15	; 0x0f
     a12:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZdaPv>
     a16:	1c c0       	rjmp	.+56     	; 0xa50 <__stack+0x151>
	}
	else if(ModbusFunction == WriteSingleRegister)
     a18:	8a 89       	ldd	r24, Y+18	; 0x12
     a1a:	86 30       	cpi	r24, 0x06	; 6
     a1c:	d1 f4       	brne	.+52     	; 0xa52 <__stack+0x153>
	{
		for(int i = SensorRegisterNumber; i < 8; i++)	// In this for loop SensorRegisterNumber is referring the to array position in the MBrxBuffer // Couldn't I just say that is should be 0??
     a1e:	8b 89       	ldd	r24, Y+19	; 0x13
     a20:	9c 89       	ldd	r25, Y+20	; 0x14
     a22:	9b 87       	std	Y+11, r25	; 0x0b
     a24:	8a 87       	std	Y+10, r24	; 0x0a
     a26:	8a 85       	ldd	r24, Y+10	; 0x0a
     a28:	9b 85       	ldd	r25, Y+11	; 0x0b
     a2a:	08 97       	sbiw	r24, 0x08	; 8
     a2c:	94 f4       	brge	.+36     	; 0xa52 <__stack+0x153>
		{
			Serial.write(MBrxBuffer[i]);				// Function (lenght is 8 bits). Indicates the function code; e.g. read coils/holding registers
     a2e:	8a 85       	ldd	r24, Y+10	; 0x0a
     a30:	9b 85       	ldd	r25, Y+11	; 0x0b
     a32:	8f 5c       	subi	r24, 0xCF	; 207
     a34:	9e 4f       	sbci	r25, 0xFE	; 254
     a36:	fc 01       	movw	r30, r24
     a38:	80 81       	ld	r24, Z
     a3a:	68 2f       	mov	r22, r24
     a3c:	84 ee       	ldi	r24, 0xE4	; 228
     a3e:	94 e0       	ldi	r25, 0x04	; 4
     a40:	0e 94 8b 10 	call	0x2116	; 0x2116 <_ZN14HardwareSerial5writeEh>
		
		delete [] ModbusResponseBuffer;
	}
	else if(ModbusFunction == WriteSingleRegister)
	{
		for(int i = SensorRegisterNumber; i < 8; i++)	// In this for loop SensorRegisterNumber is referring the to array position in the MBrxBuffer // Couldn't I just say that is should be 0??
     a44:	8a 85       	ldd	r24, Y+10	; 0x0a
     a46:	9b 85       	ldd	r25, Y+11	; 0x0b
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	9b 87       	std	Y+11, r25	; 0x0b
     a4c:	8a 87       	std	Y+10, r24	; 0x0a
     a4e:	eb cf       	rjmp	.-42     	; 0xa26 <__stack+0x127>
		}
		
		Serial.write(calcCRC >> 8);
		Serial.write(calcCRC);
		
		delete [] ModbusResponseBuffer;
     a50:	00 00       	nop
		{
			Serial.write(MBrxBuffer[i]);				// Function (lenght is 8 bits). Indicates the function code; e.g. read coils/holding registers
		}
	}
	
	Serial.flush();
     a52:	84 ee       	ldi	r24, 0xE4	; 228
     a54:	94 e0       	ldi	r25, 0x04	; 4
     a56:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN14HardwareSerial5flushEv>
	
	digitalWrite(DE, LOW);
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	0e 94 86 13 	call	0x270c	; 0x270c <digitalWrite>
	digitalWrite(RE, LOW);
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	0e 94 86 13 	call	0x270c	; 0x270c <digitalWrite>
	
	resetMBrxBuffer();
     a6a:	0e 94 03 01 	call	0x206	; 0x206 <_Z15resetMBrxBufferv>
	resetSensorRxBuffer();
     a6e:	0e 94 15 01 	call	0x22a	; 0x22a <_Z19resetSensorRxBufferv>
}
     a72:	00 00       	nop
     a74:	64 96       	adiw	r28, 0x14	; 20
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	08 95       	ret

00000a86 <_Z30txToModbusRequestErrorResponsehh>:

void txToModbusRequestErrorResponse(byte modbusExceptionResponse, byte modbusExceptionErrorCode)
{
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	28 97       	sbiw	r28, 0x08	; 8
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
     a9a:	8f 83       	std	Y+7, r24	; 0x07
     a9c:	68 87       	std	Y+8, r22	; 0x08
	digitalWrite(DE, HIGH);
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	83 e0       	ldi	r24, 0x03	; 3
     aa2:	0e 94 86 13 	call	0x270c	; 0x270c <digitalWrite>
	digitalWrite(RE, HIGH);
     aa6:	61 e0       	ldi	r22, 0x01	; 1
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	0e 94 86 13 	call	0x270c	; 0x270c <digitalWrite>
	
	int MODBUS_ERROR_RESPONSE_BUFFER_SIZE = 3;
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	9a 83       	std	Y+2, r25	; 0x02
     ab4:	89 83       	std	Y+1, r24	; 0x01
	unsigned char *ModbusErrorResponseBuffer = new unsigned char(MODBUS_ERROR_RESPONSE_BUFFER_SIZE);	// creates an dynamic buffer with the given size of
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 01 12 	call	0x2402	; 0x2402 <_Znwj>
     abe:	29 81       	ldd	r18, Y+1	; 0x01
     ac0:	fc 01       	movw	r30, r24
     ac2:	20 83       	st	Z, r18
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
	
	ModbusErrorResponseBuffer[0] = SlaveAddress;
     ac8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <SlaveAddress>
     acc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <SlaveAddress+0x1>
     ad0:	28 2f       	mov	r18, r24
     ad2:	8b 81       	ldd	r24, Y+3	; 0x03
     ad4:	9c 81       	ldd	r25, Y+4	; 0x04
     ad6:	fc 01       	movw	r30, r24
     ad8:	20 83       	st	Z, r18
	ModbusErrorResponseBuffer[1] = modbusExceptionResponse;
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	9c 81       	ldd	r25, Y+4	; 0x04
     ade:	01 96       	adiw	r24, 0x01	; 1
     ae0:	2f 81       	ldd	r18, Y+7	; 0x07
     ae2:	fc 01       	movw	r30, r24
     ae4:	20 83       	st	Z, r18
	ModbusErrorResponseBuffer[2] = modbusExceptionErrorCode;
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	9c 81       	ldd	r25, Y+4	; 0x04
     aea:	02 96       	adiw	r24, 0x02	; 2
     aec:	28 85       	ldd	r18, Y+8	; 0x08
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18

	int calcCRC = ModRTU_CRC(ModbusErrorResponseBuffer, MODBUS_ERROR_RESPONSE_BUFFER_SIZE);
     af2:	29 81       	ldd	r18, Y+1	; 0x01
     af4:	3a 81       	ldd	r19, Y+2	; 0x02
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	9c 81       	ldd	r25, Y+4	; 0x04
     afa:	b9 01       	movw	r22, r18
     afc:	0e 94 17 03 	call	0x62e	; 0x62e <_Z10ModRTU_CRCPhi>
     b00:	9e 83       	std	Y+6, r25	; 0x06
     b02:	8d 83       	std	Y+5, r24	; 0x05

	Serial.write(SlaveAddress);
     b04:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <SlaveAddress>
     b08:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <SlaveAddress+0x1>
     b0c:	bc 01       	movw	r22, r24
     b0e:	84 ee       	ldi	r24, 0xE4	; 228
     b10:	94 e0       	ldi	r25, 0x04	; 4
     b12:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN14HardwareSerial5writeEi>
	Serial.write(modbusExceptionResponse);
     b16:	6f 81       	ldd	r22, Y+7	; 0x07
     b18:	84 ee       	ldi	r24, 0xE4	; 228
     b1a:	94 e0       	ldi	r25, 0x04	; 4
     b1c:	0e 94 8b 10 	call	0x2116	; 0x2116 <_ZN14HardwareSerial5writeEh>
	Serial.write(modbusExceptionErrorCode);
     b20:	68 85       	ldd	r22, Y+8	; 0x08
     b22:	84 ee       	ldi	r24, 0xE4	; 228
     b24:	94 e0       	ldi	r25, 0x04	; 4
     b26:	0e 94 8b 10 	call	0x2116	; 0x2116 <_ZN14HardwareSerial5writeEh>
	Serial.write(calcCRC >> 8);			// CRC for error checking
     b2a:	8d 81       	ldd	r24, Y+5	; 0x05
     b2c:	9e 81       	ldd	r25, Y+6	; 0x06
     b2e:	89 2f       	mov	r24, r25
     b30:	99 0f       	add	r25, r25
     b32:	99 0b       	sbc	r25, r25
     b34:	bc 01       	movw	r22, r24
     b36:	84 ee       	ldi	r24, 0xE4	; 228
     b38:	94 e0       	ldi	r25, 0x04	; 4
     b3a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN14HardwareSerial5writeEi>
	Serial.write(calcCRC);				// CRC for error checking
     b3e:	8d 81       	ldd	r24, Y+5	; 0x05
     b40:	9e 81       	ldd	r25, Y+6	; 0x06
     b42:	bc 01       	movw	r22, r24
     b44:	84 ee       	ldi	r24, 0xE4	; 228
     b46:	94 e0       	ldi	r25, 0x04	; 4
     b48:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN14HardwareSerial5writeEi>
	
	Serial.flush();
     b4c:	84 ee       	ldi	r24, 0xE4	; 228
     b4e:	94 e0       	ldi	r25, 0x04	; 4
     b50:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN14HardwareSerial5flushEv>
	
	digitalWrite(DE, LOW);
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	83 e0       	ldi	r24, 0x03	; 3
     b58:	0e 94 86 13 	call	0x270c	; 0x270c <digitalWrite>
	digitalWrite(RE, LOW);
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	0e 94 86 13 	call	0x270c	; 0x270c <digitalWrite>
	
	resetMBrxBuffer();
     b64:	0e 94 03 01 	call	0x206	; 0x206 <_Z15resetMBrxBufferv>
}
     b68:	00 00       	nop
     b6a:	28 96       	adiw	r28, 0x08	; 8
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	08 95       	ret

00000b7c <_Z19requestHBLCsettingsv>:

void requestHBLCsettings()
{
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
	txToSensor(HBLC_ID, HBLC_settings, 0x01);
     b84:	41 e0       	ldi	r20, 0x01	; 1
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	61 e2       	ldi	r22, 0x21	; 33
     b8a:	80 e3       	ldi	r24, 0x30	; 48
     b8c:	90 e8       	ldi	r25, 0x80	; 128
     b8e:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
}
     b92:	00 00       	nop
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	08 95       	ret

00000b9a <setup>:
// 	alarm_overflow++;		// keep track of number of overflows. Increments every 100 ms.
// 	TCNT1 = 59375;
// }

void setup()
{
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
	pinMode(rxPin, INPUT);		// define pin modes for tx, rx
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	87 e0       	ldi	r24, 0x07	; 7
     ba6:	0e 94 4a 13 	call	0x2694	; 0x2694 <pinMode>
	//DDRD |= (0 << rxPin);			// sets PD7 as input
	
	//DDRC |= (1 << 5);				// sets PC5 as output
	//PORTC |= (0 << 5);			// sets PORT C5 LOW. Then the Heater isn't supplied and the resistors isn't getting hot.
	pinMode(heaterPin, OUTPUT);		// sets the heaterPin as an output 
     baa:	61 e0       	ldi	r22, 0x01	; 1
     bac:	83 e1       	ldi	r24, 0x13	; 19
     bae:	0e 94 4a 13 	call	0x2694	; 0x2694 <pinMode>
	digitalWrite(heaterPin, LOW);	// set LOW to avoid the heater being on, while developing the code. Should be enabled when code is done.
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	83 e1       	ldi	r24, 0x13	; 19
     bb6:	0e 94 86 13 	call	0x270c	; 0x270c <digitalWrite>
	
	pinMode(RE, OUTPUT);
     bba:	61 e0       	ldi	r22, 0x01	; 1
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	0e 94 4a 13 	call	0x2694	; 0x2694 <pinMode>
	pinMode(DE, OUTPUT);
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	0e 94 4a 13 	call	0x2694	; 0x2694 <pinMode>
	digitalWrite(RE, LOW);			// sets MAX486csa in receiving mode
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	0e 94 86 13 	call	0x270c	; 0x270c <digitalWrite>
	digitalWrite(DE, LOW);			// sets MAX486csa in receiving mode
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	0e 94 86 13 	call	0x270c	; 0x270c <digitalWrite>
	
	Serial.begin(9600);				// Open serial communications and wait for port to open
     bda:	40 e8       	ldi	r20, 0x80	; 128
     bdc:	55 e2       	ldi	r21, 0x25	; 37
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	84 ee       	ldi	r24, 0xE4	; 228
     be4:	94 e0       	ldi	r25, 0x04	; 4
     be6:	0e 94 b4 00 	call	0x168	; 0x168 <_ZN14HardwareSerial5beginEm>
	while (!Serial)
     bea:	84 ee       	ldi	r24, 0xE4	; 228
     bec:	94 e0       	ldi	r25, 0x04	; 4
     bee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN14HardwareSerialcvbEv>
     bf2:	98 2f       	mov	r25, r24
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	89 27       	eor	r24, r25
     bf8:	88 23       	and	r24, r24
     bfa:	09 f0       	breq	.+2      	; 0xbfe <setup+0x64>
     bfc:	f6 cf       	rjmp	.-20     	; 0xbea <setup+0x50>
	{
		;							// wait for serial port to connect. Needed for native USB port only
	}
	softwareSerial.begin(9600);		// Set data rate for the SoftwareSerial port
     bfe:	40 e8       	ldi	r20, 0x80	; 128
     c00:	55 e2       	ldi	r21, 0x25	; 37
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	85 ec       	ldi	r24, 0xC5	; 197
     c08:	94 e0       	ldi	r25, 0x04	; 4
     c0a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <_ZN14SoftwareSerial5beginEl>
	
	//timer1_init();					// initialize timer1 settings
}
     c0e:	00 00       	nop
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <loop>:

void loop()
{
     c16:	cf 92       	push	r12
     c18:	df 92       	push	r13
     c1a:	ef 92       	push	r14
     c1c:	ff 92       	push	r15
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	66 97       	sbiw	r28, 0x16	; 22
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
	currentTime = millis();								// Updates the variable currentTime frequently
     c36:	0e 94 79 12 	call	0x24f2	; 0x24f2 <millis>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <currentTime>
     c42:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <currentTime+0x1>
     c46:	a0 93 79 04 	sts	0x0479, r26	; 0x800479 <currentTime+0x2>
     c4a:	b0 93 7a 04 	sts	0x047A, r27	; 0x80047a <currentTime+0x3>
	
	if (currentTime - previousTime >= eventInterval)	// The constant eventInterval shows after how many milliseconds this if statement is true
     c4e:	20 91 77 04 	lds	r18, 0x0477	; 0x800477 <currentTime>
     c52:	30 91 78 04 	lds	r19, 0x0478	; 0x800478 <currentTime+0x1>
     c56:	40 91 79 04 	lds	r20, 0x0479	; 0x800479 <currentTime+0x2>
     c5a:	50 91 7a 04 	lds	r21, 0x047A	; 0x80047a <currentTime+0x3>
     c5e:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <previousTime>
     c62:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <previousTime+0x1>
     c66:	a0 91 7d 04 	lds	r26, 0x047D	; 0x80047d <previousTime+0x2>
     c6a:	b0 91 7e 04 	lds	r27, 0x047E	; 0x80047e <previousTime+0x3>
     c6e:	79 01       	movw	r14, r18
     c70:	8a 01       	movw	r16, r20
     c72:	e8 1a       	sub	r14, r24
     c74:	f9 0a       	sbc	r15, r25
     c76:	0a 0b       	sbc	r16, r26
     c78:	1b 0b       	sbc	r17, r27
     c7a:	d8 01       	movw	r26, r16
     c7c:	c7 01       	movw	r24, r14
     c7e:	88 3e       	cpi	r24, 0xE8	; 232
     c80:	93 40       	sbci	r25, 0x03	; 3
     c82:	a1 05       	cpc	r26, r1
     c84:	b1 05       	cpc	r27, r1
     c86:	90 f0       	brcs	.+36     	; 0xcac <loop+0x96>
	{
		resetSensorRxBuffer;
		requestHBLCsettings();
     c88:	0e 94 be 05 	call	0xb7c	; 0xb7c <_Z19requestHBLCsettingsv>
		previousTime = currentTime;						// Update the timing for the next time around
     c8c:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <currentTime>
     c90:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <currentTime+0x1>
     c94:	a0 91 79 04 	lds	r26, 0x0479	; 0x800479 <currentTime+0x2>
     c98:	b0 91 7a 04 	lds	r27, 0x047A	; 0x80047a <currentTime+0x3>
     c9c:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <previousTime>
     ca0:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <previousTime+0x1>
     ca4:	a0 93 7d 04 	sts	0x047D, r26	; 0x80047d <previousTime+0x2>
     ca8:	b0 93 7e 04 	sts	0x047E, r27	; 0x80047e <previousTime+0x3>
	}
	
	if (Serial.available())
     cac:	84 ee       	ldi	r24, 0xE4	; 228
     cae:	94 e0       	ldi	r25, 0x04	; 4
     cb0:	0e 94 1e 10 	call	0x203c	; 0x203c <_ZN14HardwareSerial9availableEv>
     cb4:	21 e0       	ldi	r18, 0x01	; 1
     cb6:	89 2b       	or	r24, r25
     cb8:	09 f4       	brne	.+2      	; 0xcbc <loop+0xa6>
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	22 23       	and	r18, r18
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <loop+0xac>
     cc0:	e4 c3       	rjmp	.+1992   	; 0x148a <loop+0x874>
	{
		if(MBrxWritePos < MB_RX_BUFFER_SIZE)
		{
			MBrxBuffer[MBrxWritePos++] = Serial.read();		// Read the serial buffer and put into MBrxBuffer and increment the MBrxWritePos
     cc2:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <MBrxWritePos>
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	98 0f       	add	r25, r24
     cca:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <MBrxWritePos>
     cce:	08 2f       	mov	r16, r24
     cd0:	10 e0       	ldi	r17, 0x00	; 0
     cd2:	84 ee       	ldi	r24, 0xE4	; 228
     cd4:	94 e0       	ldi	r25, 0x04	; 4
     cd6:	0e 94 38 10 	call	0x2070	; 0x2070 <_ZN14HardwareSerial4readEv>
     cda:	28 2f       	mov	r18, r24
     cdc:	c8 01       	movw	r24, r16
     cde:	8f 5c       	subi	r24, 0xCF	; 207
     ce0:	9e 4f       	sbci	r25, 0xFE	; 254
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 83       	st	Z, r18
		else
		{
			MBrxWritePos = 0;
		}
		
		if(MBrxBuffer[0] == 0x00 || MBrxBuffer[2] != 0x00)
     ce6:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <MBrxBuffer>
     cea:	88 23       	and	r24, r24
     cec:	21 f0       	breq	.+8      	; 0xcf6 <loop+0xe0>
     cee:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <MBrxBuffer+0x2>
     cf2:	88 23       	and	r24, r24
     cf4:	11 f0       	breq	.+4      	; 0xcfa <loop+0xe4>
		{
			resetMBrxBuffer();
     cf6:	0e 94 03 01 	call	0x206	; 0x206 <_Z15resetMBrxBufferv>
		}
		
		if(MBrxBuffer[0] == SlaveAddress && approveMBCRC(6) == true)
     cfa:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <MBrxBuffer>
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <SlaveAddress>
     d06:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <SlaveAddress+0x1>
     d0a:	28 17       	cp	r18, r24
     d0c:	39 07       	cpc	r19, r25
     d0e:	41 f4       	brne	.+16     	; 0xd20 <loop+0x10a>
     d10:	86 e0       	ldi	r24, 0x06	; 6
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12approveMBCRCi>
     d18:	88 23       	and	r24, r24
     d1a:	11 f0       	breq	.+4      	; 0xd20 <loop+0x10a>
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <loop+0x10c>
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	88 23       	and	r24, r24
     d24:	09 f4       	brne	.+2      	; 0xd28 <loop+0x112>
     d26:	b1 c3       	rjmp	.+1890   	; 0x148a <loop+0x874>
		{
			if(MBrxBuffer[1] == ReadCoilStatus);
     d28:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MBrxBuffer+0x1>
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	09 f4       	brne	.+2      	; 0xd32 <loop+0x11c>
     d30:	ac c3       	rjmp	.+1880   	; 0x148a <loop+0x874>
			else if(MBrxBuffer[1] == ReadInputStatus);
     d32:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MBrxBuffer+0x1>
     d36:	82 30       	cpi	r24, 0x02	; 2
     d38:	09 f4       	brne	.+2      	; 0xd3c <loop+0x126>
     d3a:	a7 c3       	rjmp	.+1870   	; 0x148a <loop+0x874>
			else if(MBrxBuffer[1] == ReadHoldingRegisters)
     d3c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MBrxBuffer+0x1>
     d40:	83 30       	cpi	r24, 0x03	; 3
     d42:	c1 f4       	brne	.+48     	; 0xd74 <loop+0x15e>
// 				if((MBrxBuffer[3] == HBLC_settings) && (MBrxBuffer[5] == 0x01))	// HBLC_setting (0x21 is 33)
// 				{
// 					txToSensor(HBLC_ID, HBLC_settings, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));
// 					resetMBrxBuffer();
// 				}
				if(MBrxBuffer[5] == 0x01)
     d44:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	79 f4       	brne	.+30     	; 0xd6a <loop+0x154>
				{
					int sensorRegisterNumber = MBrxBuffer[3];
     d4c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	9a 83       	std	Y+2, r25	; 0x02
     d56:	89 83       	std	Y+1, r24	; 0x01
					txToModbusRequestResponse(ReadHoldingRegisters, sensorRegisterNumber);
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	9a 81       	ldd	r25, Y+2	; 0x02
     d5c:	bc 01       	movw	r22, r24
     d5e:	83 e0       	ldi	r24, 0x03	; 3
     d60:	0e 94 94 03 	call	0x728	; 0x728 <_Z25txToModbusRequestResponsehi>
					resetMBrxBuffer();
     d64:	0e 94 03 01 	call	0x206	; 0x206 <_Z15resetMBrxBufferv>
     d68:	90 c3       	rjmp	.+1824   	; 0x148a <loop+0x874>
				}
				else
				{
					txToModbusRequestErrorResponse((ReadHoldingRegisters + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
     d6a:	63 e0       	ldi	r22, 0x03	; 3
     d6c:	83 e8       	ldi	r24, 0x83	; 131
     d6e:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
     d72:	8b c3       	rjmp	.+1814   	; 0x148a <loop+0x874>
				}
			}
			else if(MBrxBuffer[1] == ReadInputRegisters)
     d74:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MBrxBuffer+0x1>
     d78:	84 30       	cpi	r24, 0x04	; 4
     d7a:	61 f5       	brne	.+88     	; 0xdd4 <loop+0x1be>
			{
				if(MBrxBuffer[5] > 0x01)
     d7c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     d80:	82 30       	cpi	r24, 0x02	; 2
     d82:	a0 f0       	brcs	.+40     	; 0xdac <loop+0x196>
				{
					quantityOfRegisters = MBrxBuffer[5];
     d84:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     d88:	88 2f       	mov	r24, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
     d90:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
					int startingAddress = MBrxBuffer[3];
     d94:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	9c 83       	std	Y+4, r25	; 0x04
     d9e:	8b 83       	std	Y+3, r24	; 0x03
					txToModbusRequestResponse(ReadInputRegisters, startingAddress);
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	9c 81       	ldd	r25, Y+4	; 0x04
     da4:	bc 01       	movw	r22, r24
     da6:	84 e0       	ldi	r24, 0x04	; 4
     da8:	0e 94 94 03 	call	0x728	; 0x728 <_Z25txToModbusRequestResponsehi>
				}
				
				if(MBrxBuffer[5] == 0x01)
     dac:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	09 f0       	breq	.+2      	; 0xdb6 <loop+0x1a0>
     db4:	6a c3       	rjmp	.+1748   	; 0x148a <loop+0x874>
				{
					int sensorRegisterNumber = MBrxBuffer[3];
     db6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
     dba:	88 2f       	mov	r24, r24
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	9e 83       	std	Y+6, r25	; 0x06
     dc0:	8d 83       	std	Y+5, r24	; 0x05
					txToModbusRequestResponse(ReadInputRegisters, sensorRegisterNumber);
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	9e 81       	ldd	r25, Y+6	; 0x06
     dc6:	bc 01       	movw	r22, r24
     dc8:	84 e0       	ldi	r24, 0x04	; 4
     dca:	0e 94 94 03 	call	0x728	; 0x728 <_Z25txToModbusRequestResponsehi>
					resetMBrxBuffer();
     dce:	0e 94 03 01 	call	0x206	; 0x206 <_Z15resetMBrxBufferv>
     dd2:	5b c3       	rjmp	.+1718   	; 0x148a <loop+0x874>
				}
			}
			
			else if(MBrxBuffer[1] == WriteSingleCoil);
     dd4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MBrxBuffer+0x1>
     dd8:	85 30       	cpi	r24, 0x05	; 5
     dda:	09 f4       	brne	.+2      	; 0xdde <loop+0x1c8>
     ddc:	56 c3       	rjmp	.+1708   	; 0x148a <loop+0x874>
			else if(MBrxBuffer[1] == WriteSingleRegister)
     dde:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MBrxBuffer+0x1>
     de2:	86 30       	cpi	r24, 0x06	; 6
     de4:	09 f0       	breq	.+2      	; 0xde8 <loop+0x1d2>
     de6:	43 c3       	rjmp	.+1670   	; 0x146e <loop+0x858>
			{
				if(MBrxBuffer[3] == ZeroDataRN)
     de8:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
     dec:	83 30       	cpi	r24, 0x03	; 3
     dee:	99 f4       	brne	.+38     	; 0xe16 <loop+0x200>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[4] << 8) + MBrxBuffer[5] <= 65535)			// ZeroDataRN can be 0 - 65535 (0-6553.5 pF).
					{
						txToSensor(HBLC_ID, ZeroCali, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));			// Calls the txToSensor function with parameter HBLC_ID, ZeroDataRN and the SensorSetValue found on position 4 and 5 in the array
     df0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
     df4:	88 2f       	mov	r24, r24
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	38 2f       	mov	r19, r24
     dfa:	22 27       	eor	r18, r18
     dfc:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     e00:	88 2f       	mov	r24, r24
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	82 0f       	add	r24, r18
     e06:	93 1f       	adc	r25, r19
     e08:	ac 01       	movw	r20, r24
     e0a:	61 e3       	ldi	r22, 0x31	; 49
     e0c:	80 e3       	ldi	r24, 0x30	; 48
     e0e:	90 e8       	ldi	r25, 0x80	; 128
     e10:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
     e14:	3a c3       	rjmp	.+1652   	; 0x148a <loop+0x874>
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
					}
				}
				else if(MBrxBuffer[3] == SpanZeroDataRN)
     e16:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
     e1a:	84 30       	cpi	r24, 0x04	; 4
     e1c:	99 f4       	brne	.+38     	; 0xe44 <loop+0x22e>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[4] << 8) + MBrxBuffer[5] <= 65535)			// SpanZeroDataRN can be 0 - 65535 (0-6553.5 pF).
					{
						txToSensor(HBLC_ID, SpanCali, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));			// Calls the txToSensor function with parameter HBLC_ID, SpanZeroDataRN and the SensorSetValue found on position 4 and 5 in the array
     e1e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
     e22:	88 2f       	mov	r24, r24
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	38 2f       	mov	r19, r24
     e28:	22 27       	eor	r18, r18
     e2a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     e2e:	88 2f       	mov	r24, r24
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	82 0f       	add	r24, r18
     e34:	93 1f       	adc	r25, r19
     e36:	ac 01       	movw	r20, r24
     e38:	62 e3       	ldi	r22, 0x32	; 50
     e3a:	80 e3       	ldi	r24, 0x30	; 48
     e3c:	90 e8       	ldi	r25, 0x80	; 128
     e3e:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
     e42:	23 c3       	rjmp	.+1606   	; 0x148a <loop+0x874>
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
					}
				}
				else if(MBrxBuffer[3] == ControlLevelRN)
     e44:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
     e48:	85 30       	cpi	r24, 0x05	; 5
     e4a:	e1 f4       	brne	.+56     	; 0xe84 <loop+0x26e>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 1))										// ControlLevel can be 0 == Level or 1 == Control
     e4c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     e50:	82 30       	cpi	r24, 0x02	; 2
     e52:	98 f4       	brcc	.+38     	; 0xe7a <loop+0x264>
					{
						txToSensor(HBLC_ID, ControlLevel, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));		// Calls the txToSensor function with parameter HBLC_ID, ControlLevel and the SensorSetValue found on position 4 and 5 in the array
     e54:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	38 2f       	mov	r19, r24
     e5e:	22 27       	eor	r18, r18
     e60:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	82 0f       	add	r24, r18
     e6a:	93 1f       	adc	r25, r19
     e6c:	ac 01       	movw	r20, r24
     e6e:	6b e0       	ldi	r22, 0x0B	; 11
     e70:	80 e3       	ldi	r24, 0x30	; 48
     e72:	90 e8       	ldi	r25, 0x80	; 128
     e74:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
     e78:	08 c3       	rjmp	.+1552   	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
     e7a:	63 e0       	ldi	r22, 0x03	; 3
     e7c:	86 e8       	ldi	r24, 0x86	; 134
     e7e:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
     e82:	03 c3       	rjmp	.+1542   	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == SetValRN)
     e84:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
     e88:	86 30       	cpi	r24, 0x06	; 6
     e8a:	e1 f4       	brne	.+56     	; 0xec4 <loop+0x2ae>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 100))									// SetVal (set point level in %) can be 0 - 100 %
     e8c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     e90:	85 36       	cpi	r24, 0x65	; 101
     e92:	98 f4       	brcc	.+38     	; 0xeba <loop+0x2a4>
					{
						txToSensor(HBLC_ID, SetVal, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));			// Calls the txToSensor function with parameter HBLC_ID, SetVal and the SensorSetValue found on position 4 and 5 in the array
     e94:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
     e98:	88 2f       	mov	r24, r24
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	38 2f       	mov	r19, r24
     e9e:	22 27       	eor	r18, r18
     ea0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	82 0f       	add	r24, r18
     eaa:	93 1f       	adc	r25, r19
     eac:	ac 01       	movw	r20, r24
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	80 e3       	ldi	r24, 0x30	; 48
     eb2:	90 e8       	ldi	r25, 0x80	; 128
     eb4:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
     eb8:	e8 c2       	rjmp	.+1488   	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
     eba:	63 e0       	ldi	r22, 0x03	; 3
     ebc:	86 e8       	ldi	r24, 0x86	; 134
     ebe:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
     ec2:	e3 c2       	rjmp	.+1478   	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == PBandRN)
     ec4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
     ec8:	87 30       	cpi	r24, 0x07	; 7
     eca:	e1 f4       	brne	.+56     	; 0xf04 <loop+0x2ee>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 100))									// PBand can be 0 - 100 %
     ecc:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     ed0:	85 36       	cpi	r24, 0x65	; 101
     ed2:	98 f4       	brcc	.+38     	; 0xefa <loop+0x2e4>
					{
						txToSensor(HBLC_ID, PBand, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));			// Calls the txToSensor function with parameter HBLC_ID, PBand and the SensorSetValue found on position 4 and 5 in the array
     ed4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	38 2f       	mov	r19, r24
     ede:	22 27       	eor	r18, r18
     ee0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	82 0f       	add	r24, r18
     eea:	93 1f       	adc	r25, r19
     eec:	ac 01       	movw	r20, r24
     eee:	61 e0       	ldi	r22, 0x01	; 1
     ef0:	80 e3       	ldi	r24, 0x30	; 48
     ef2:	90 e8       	ldi	r25, 0x80	; 128
     ef4:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
     ef8:	c8 c2       	rjmp	.+1424   	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
     efa:	63 e0       	ldi	r22, 0x03	; 3
     efc:	86 e8       	ldi	r24, 0x86	; 134
     efe:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
     f02:	c3 c2       	rjmp	.+1414   	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == FilterFunctionRN)
     f04:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	e1 f4       	brne	.+56     	; 0xf44 <loop+0x32e>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 200))									// FilterFunction can be 0 - 200 sec
     f0c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     f10:	89 3c       	cpi	r24, 0xC9	; 201
     f12:	98 f4       	brcc	.+38     	; 0xf3a <loop+0x324>
					{
						txToSensor(HBLC_ID, FilterFunction, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));	// Calls the txToSensor function with parameter HBLC_ID, FilterFunction and the SensorSetValue found on position 4 and 5 in the array
     f14:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	38 2f       	mov	r19, r24
     f1e:	22 27       	eor	r18, r18
     f20:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	82 0f       	add	r24, r18
     f2a:	93 1f       	adc	r25, r19
     f2c:	ac 01       	movw	r20, r24
     f2e:	65 e0       	ldi	r22, 0x05	; 5
     f30:	80 e3       	ldi	r24, 0x30	; 48
     f32:	90 e8       	ldi	r25, 0x80	; 128
     f34:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
     f38:	a8 c2       	rjmp	.+1360   	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
     f3a:	63 e0       	ldi	r22, 0x03	; 3
     f3c:	86 e8       	ldi	r24, 0x86	; 134
     f3e:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
     f42:	a3 c2       	rjmp	.+1350   	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == RunInRN)
     f44:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
     f48:	89 30       	cpi	r24, 0x09	; 9
     f4a:	e1 f4       	brne	.+56     	; 0xf84 <loop+0x36e>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 1))										// ControlLevel can be 0 == Level or 1 == Control
     f4c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	98 f4       	brcc	.+38     	; 0xf7a <loop+0x364>
					{
						txToSensor(HBLC_ID, RunIn, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));			// Calls the txToSensor function with parameter HBLC_ID, RunIn and the SensorSetValue found on position 4 and 5 in the array
     f54:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	38 2f       	mov	r19, r24
     f5e:	22 27       	eor	r18, r18
     f60:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	82 0f       	add	r24, r18
     f6a:	93 1f       	adc	r25, r19
     f6c:	ac 01       	movw	r20, r24
     f6e:	6a e0       	ldi	r22, 0x0A	; 10
     f70:	80 e3       	ldi	r24, 0x30	; 48
     f72:	90 e8       	ldi	r25, 0x80	; 128
     f74:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
     f78:	88 c2       	rjmp	.+1296   	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
     f7a:	63 e0       	ldi	r22, 0x03	; 3
     f7c:	86 e8       	ldi	r24, 0x86	; 134
     f7e:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
     f82:	83 c2       	rjmp	.+1286   	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == CalFunctionRN)
     f84:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
     f88:	8a 30       	cpi	r24, 0x0A	; 10
     f8a:	e1 f4       	brne	.+56     	; 0xfc4 <loop+0x3ae>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 1))										// ControlLevel can be 0 == Level or 1 == Control
     f8c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     f90:	82 30       	cpi	r24, 0x02	; 2
     f92:	98 f4       	brcc	.+38     	; 0xfba <loop+0x3a4>
					{
						txToSensor(HBLC_ID, CalFunction, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));		// Calls the txToSensor function with parameter HBLC_ID, CalFunction and the SensorSetValue found on position 4 and 5 in the array
     f94:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
     f98:	88 2f       	mov	r24, r24
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	38 2f       	mov	r19, r24
     f9e:	22 27       	eor	r18, r18
     fa0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     fa4:	88 2f       	mov	r24, r24
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	82 0f       	add	r24, r18
     faa:	93 1f       	adc	r25, r19
     fac:	ac 01       	movw	r20, r24
     fae:	66 e0       	ldi	r22, 0x06	; 6
     fb0:	80 e3       	ldi	r24, 0x30	; 48
     fb2:	90 e8       	ldi	r25, 0x80	; 128
     fb4:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
     fb8:	68 c2       	rjmp	.+1232   	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
     fba:	63 e0       	ldi	r22, 0x03	; 3
     fbc:	86 e8       	ldi	r24, 0x86	; 134
     fbe:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
     fc2:	63 c2       	rjmp	.+1222   	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == AlarmSettingRN)
     fc4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
     fc8:	8b 30       	cpi	r24, 0x0B	; 11
     fca:	e1 f4       	brne	.+56     	; 0x1004 <loop+0x3ee>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 100))									// AlarmSettingRN can be 0 - 100 %
     fcc:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     fd0:	85 36       	cpi	r24, 0x65	; 101
     fd2:	98 f4       	brcc	.+38     	; 0xffa <loop+0x3e4>
					{
						txToSensor(HBLC_ID, AlarmSet, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));			// Calls the txToSensor function with parameter HBLC_ID, AlarmSet and the SensorSetValue found on position 4
     fd4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	38 2f       	mov	r19, r24
     fde:	22 27       	eor	r18, r18
     fe0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	82 0f       	add	r24, r18
     fea:	93 1f       	adc	r25, r19
     fec:	ac 01       	movw	r20, r24
     fee:	62 e0       	ldi	r22, 0x02	; 2
     ff0:	80 e3       	ldi	r24, 0x30	; 48
     ff2:	90 e8       	ldi	r25, 0x80	; 128
     ff4:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
     ff8:	48 c2       	rjmp	.+1168   	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
     ffa:	63 e0       	ldi	r22, 0x03	; 3
     ffc:	86 e8       	ldi	r24, 0x86	; 134
     ffe:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    1002:	43 c2       	rjmp	.+1158   	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == AlarmDelayRN)
    1004:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    1008:	8c 30       	cpi	r24, 0x0C	; 12
    100a:	39 f5       	brne	.+78     	; 0x105a <loop+0x444>
				{
					if((MBrxBuffer[5] >= 0x00) && (((MBrxBuffer[4] << 8) + MBrxBuffer[5]) <= 600))			// Alarm Delay can be 0 - 600 seconds.
    100c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	38 2f       	mov	r19, r24
    1016:	22 27       	eor	r18, r18
    1018:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	82 0f       	add	r24, r18
    1022:	93 1f       	adc	r25, r19
    1024:	89 35       	cpi	r24, 0x59	; 89
    1026:	92 40       	sbci	r25, 0x02	; 2
    1028:	9c f4       	brge	.+38     	; 0x1050 <loop+0x43a>
					{
						txToSensor(HBLC_ID, AlarmDelay, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));		// Calls the txToSensor function with parameter HBLC_ID, AlarmDelay and the SensorSetValue found on position 4 and 5 in the array
    102a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	38 2f       	mov	r19, r24
    1034:	22 27       	eor	r18, r18
    1036:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	82 0f       	add	r24, r18
    1040:	93 1f       	adc	r25, r19
    1042:	ac 01       	movw	r20, r24
    1044:	64 e0       	ldi	r22, 0x04	; 4
    1046:	80 e3       	ldi	r24, 0x30	; 48
    1048:	90 e8       	ldi	r25, 0x80	; 128
    104a:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    104e:	1d c2       	rjmp	.+1082   	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
    1050:	63 e0       	ldi	r22, 0x03	; 3
    1052:	86 e8       	ldi	r24, 0x86	; 134
    1054:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    1058:	18 c2       	rjmp	.+1072   	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == OffsetLengthRN)
    105a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    105e:	8d 30       	cpi	r24, 0x0D	; 13
    1060:	99 f4       	brne	.+38     	; 0x1088 <loop+0x472>
				{
					if((MBrxBuffer[5] >= 0x00) && (((MBrxBuffer[4] << 8) + MBrxBuffer[5]) <= 65535))		// Offset Length (max level) can be 0 - 65535 mm?
					{
						txToSensor(HBLC_ID, OffsetLengthDef, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));	// Calls the txToSensor function with parameter HBLC_ID, OffsetLengthDef and the SensorSetValue found on position 4 and 5 in the array
    1062:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	38 2f       	mov	r19, r24
    106c:	22 27       	eor	r18, r18
    106e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	82 0f       	add	r24, r18
    1078:	93 1f       	adc	r25, r19
    107a:	ac 01       	movw	r20, r24
    107c:	6d e3       	ldi	r22, 0x3D	; 61
    107e:	80 e3       	ldi	r24, 0x30	; 48
    1080:	90 e8       	ldi	r25, 0x80	; 128
    1082:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    1086:	01 c2       	rjmp	.+1026   	; 0x148a <loop+0x874>
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
					}
				}
				else if(MBrxBuffer[3] == OffsetMinimumLengthRN)
    1088:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    108c:	8e 30       	cpi	r24, 0x0E	; 14
    108e:	99 f4       	brne	.+38     	; 0x10b6 <loop+0x4a0>
				{
					if((MBrxBuffer[5] >= 0x00) && (((MBrxBuffer[4] << 8) + MBrxBuffer[5]) <= 65535))				// Offset Minimum Length (level) can be 0 - 65535 mm?
					{
						txToSensor(HBLC_ID, OffsetMinimumLengthDef, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));	// Calls the txToSensor function with parameter HBLC_ID, OffsetMinimumLengthDef and the SensorSetValue found on position 4 and 5 in the array
    1090:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	38 2f       	mov	r19, r24
    109a:	22 27       	eor	r18, r18
    109c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	82 0f       	add	r24, r18
    10a6:	93 1f       	adc	r25, r19
    10a8:	ac 01       	movw	r20, r24
    10aa:	61 e4       	ldi	r22, 0x41	; 65
    10ac:	80 e3       	ldi	r24, 0x30	; 48
    10ae:	90 e8       	ldi	r25, 0x80	; 128
    10b0:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    10b4:	ea c1       	rjmp	.+980    	; 0x148a <loop+0x874>
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);			// IsWrong = 0x80, IllegalDataValue = 0x03
					}
				}
				else if(MBrxBuffer[3] == MeasurementLengthRN)
    10b6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    10ba:	81 31       	cpi	r24, 0x11	; 17
    10bc:	99 f4       	brne	.+38     	; 0x10e4 <loop+0x4ce>
				{
					if((MBrxBuffer[5] >= 0x00) && (((MBrxBuffer[4] << 8) + MBrxBuffer[5]) <= 65535))				// Measurement Length (same as Sensor Length) (mm or inch? how to differentiate?) can be 0 - 65535 mm?
					{
						txToSensor(HBLC_ID, MeasurementLength, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));		// Calls the txToSensor function with parameter HBLC_ID, MeasurementLength and the SensorSetValue found on position 4 and 5 in the array
    10be:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	38 2f       	mov	r19, r24
    10c8:	22 27       	eor	r18, r18
    10ca:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    10ce:	88 2f       	mov	r24, r24
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	82 0f       	add	r24, r18
    10d4:	93 1f       	adc	r25, r19
    10d6:	ac 01       	movw	r20, r24
    10d8:	65 e3       	ldi	r22, 0x35	; 53
    10da:	80 e3       	ldi	r24, 0x30	; 48
    10dc:	90 e8       	ldi	r25, 0x80	; 128
    10de:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    10e2:	d3 c1       	rjmp	.+934    	; 0x148a <loop+0x874>
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);			// IsWrong = 0x80, IllegalDataValue = 0x03
					}
				}
				else if(MBrxBuffer[3] == WorkingTemperatureRN)
    10e4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    10e8:	83 31       	cpi	r24, 0x13	; 19
    10ea:	e1 f4       	brne	.+56     	; 0x1124 <loop+0x50e>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 14))											// WorkingTemperature can be 0 - 14
    10ec:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    10f0:	8f 30       	cpi	r24, 0x0F	; 15
    10f2:	98 f4       	brcc	.+38     	; 0x111a <loop+0x504>
					{
						txToSensor(HBLC_ID, WorkingTemperatureDef, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));	// Calls the txToSensor function with parameter HBLC_ID, WorkingTemperatureDef and the SensorSetValue found on position 4
    10f4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	38 2f       	mov	r19, r24
    10fe:	22 27       	eor	r18, r18
    1100:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	82 0f       	add	r24, r18
    110a:	93 1f       	adc	r25, r19
    110c:	ac 01       	movw	r20, r24
    110e:	62 e4       	ldi	r22, 0x42	; 66
    1110:	80 e3       	ldi	r24, 0x30	; 48
    1112:	90 e8       	ldi	r25, 0x80	; 128
    1114:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    1118:	b8 c1       	rjmp	.+880    	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);			// IsWrong = 0x80, IllegalDataValue = 0x03
    111a:	63 e0       	ldi	r22, 0x03	; 3
    111c:	86 e8       	ldi	r24, 0x86	; 134
    111e:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    1122:	b3 c1       	rjmp	.+870    	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == HiLoAlarmRN)
    1124:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    1128:	84 31       	cpi	r24, 0x14	; 20
    112a:	e1 f4       	brne	.+56     	; 0x1164 <loop+0x54e>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 1))										// Hi Lo Alarm can be 0 == Low or 1 == High
    112c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1130:	82 30       	cpi	r24, 0x02	; 2
    1132:	98 f4       	brcc	.+38     	; 0x115a <loop+0x544>
					{
						txToSensor(HBLC_ID, HiLoAlarm, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));		// Calls the txToSensor function with parameter HBLC_ID, HiLoAlarm and the SensorSetValue found on position 4 and 5 in the array
    1134:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	38 2f       	mov	r19, r24
    113e:	22 27       	eor	r18, r18
    1140:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1144:	88 2f       	mov	r24, r24
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	82 0f       	add	r24, r18
    114a:	93 1f       	adc	r25, r19
    114c:	ac 01       	movw	r20, r24
    114e:	6c e0       	ldi	r22, 0x0C	; 12
    1150:	80 e3       	ldi	r24, 0x30	; 48
    1152:	90 e8       	ldi	r25, 0x80	; 128
    1154:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    1158:	98 c1       	rjmp	.+816    	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
    115a:	63 e0       	ldi	r22, 0x03	; 3
    115c:	86 e8       	ldi	r24, 0x86	; 134
    115e:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    1162:	93 c1       	rjmp	.+806    	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == AlarmHystereseRN)
    1164:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    1168:	85 31       	cpi	r24, 0x15	; 21
    116a:	e1 f4       	brne	.+56     	; 0x11a4 <loop+0x58e>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 100))									// Alarm Hysterese can be 0 - 100 %
    116c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1170:	85 36       	cpi	r24, 0x65	; 101
    1172:	98 f4       	brcc	.+38     	; 0x119a <loop+0x584>
					{
						txToSensor(HBLC_ID, AlarmHysterese, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));	// Calls the txToSensor function with parameter HBLC_ID, AlarmHysterese and the SensorSetValue found on position 4
    1174:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	38 2f       	mov	r19, r24
    117e:	22 27       	eor	r18, r18
    1180:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	82 0f       	add	r24, r18
    118a:	93 1f       	adc	r25, r19
    118c:	ac 01       	movw	r20, r24
    118e:	63 e0       	ldi	r22, 0x03	; 3
    1190:	80 e3       	ldi	r24, 0x30	; 48
    1192:	90 e8       	ldi	r25, 0x80	; 128
    1194:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    1198:	78 c1       	rjmp	.+752    	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
    119a:	63 e0       	ldi	r22, 0x03	; 3
    119c:	86 e8       	ldi	r24, 0x86	; 134
    119e:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    11a2:	73 c1       	rjmp	.+742    	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == NONCAlarmRN)
    11a4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    11a8:	86 31       	cpi	r24, 0x16	; 22
    11aa:	e1 f4       	brne	.+56     	; 0x11e4 <loop+0x5ce>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 1))										// NO NC Alarm can be 0 == NC or 1 == NO
    11ac:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    11b0:	82 30       	cpi	r24, 0x02	; 2
    11b2:	98 f4       	brcc	.+38     	; 0x11da <loop+0x5c4>
					{
						txToSensor(HBLC_ID, NONCAlarm, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));		// Calls the txToSensor function with parameter HBLC_ID, NONCAlarm and the SensorSetValue found on position 4 and 5 in the array
    11b4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	38 2f       	mov	r19, r24
    11be:	22 27       	eor	r18, r18
    11c0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	82 0f       	add	r24, r18
    11ca:	93 1f       	adc	r25, r19
    11cc:	ac 01       	movw	r20, r24
    11ce:	67 e0       	ldi	r22, 0x07	; 7
    11d0:	80 e3       	ldi	r24, 0x30	; 48
    11d2:	90 e8       	ldi	r25, 0x80	; 128
    11d4:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    11d8:	58 c1       	rjmp	.+688    	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
    11da:	63 e0       	ldi	r22, 0x03	; 3
    11dc:	86 e8       	ldi	r24, 0x86	; 134
    11de:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    11e2:	53 c1       	rjmp	.+678    	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == LPHPModeRN)
    11e4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    11e8:	87 31       	cpi	r24, 0x17	; 23
    11ea:	e1 f4       	brne	.+56     	; 0x1224 <loop+0x60e>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 1))										// LP HP Mode can be 0 == LP or 1 == HP
    11ec:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    11f0:	82 30       	cpi	r24, 0x02	; 2
    11f2:	98 f4       	brcc	.+38     	; 0x121a <loop+0x604>
					{
						txToSensor(HBLC_ID, LPHPMode, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));			// Calls the txToSensor function with parameter HBLC_ID, LPHPMode and the SensorSetValue found on position 4 and 5 in the array
    11f4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    11f8:	88 2f       	mov	r24, r24
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	38 2f       	mov	r19, r24
    11fe:	22 27       	eor	r18, r18
    1200:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	82 0f       	add	r24, r18
    120a:	93 1f       	adc	r25, r19
    120c:	ac 01       	movw	r20, r24
    120e:	6d e0       	ldi	r22, 0x0D	; 13
    1210:	80 e3       	ldi	r24, 0x30	; 48
    1212:	90 e8       	ldi	r25, 0x80	; 128
    1214:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    1218:	38 c1       	rjmp	.+624    	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
    121a:	63 e0       	ldi	r22, 0x03	; 3
    121c:	86 e8       	ldi	r24, 0x86	; 134
    121e:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    1222:	33 c1       	rjmp	.+614    	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == SetAnalogOrDigitalOutputRN)
    1224:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    1228:	88 31       	cpi	r24, 0x18	; 24
    122a:	e1 f4       	brne	.+56     	; 0x1264 <loop+0x64e>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 1))													// Set Analog Or Digital Output can be 0 == Analog or 1 == Digital
    122c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1230:	82 30       	cpi	r24, 0x02	; 2
    1232:	98 f4       	brcc	.+38     	; 0x125a <loop+0x644>
					{
						txToSensor(HBLC_ID, SetAnalogOrDigitalOutputDef, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));	// Calls the txToSensor function with parameter HBLC_ID, SetAnalogOrDigitalOutputDef and the SensorSetValue found on position 4 and 5 in the array
    1234:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    1238:	88 2f       	mov	r24, r24
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	38 2f       	mov	r19, r24
    123e:	22 27       	eor	r18, r18
    1240:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	82 0f       	add	r24, r18
    124a:	93 1f       	adc	r25, r19
    124c:	ac 01       	movw	r20, r24
    124e:	64 e4       	ldi	r22, 0x44	; 68
    1250:	80 e3       	ldi	r24, 0x30	; 48
    1252:	90 e8       	ldi	r25, 0x80	; 128
    1254:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    1258:	18 c1       	rjmp	.+560    	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);				// IsWrong = 0x80, IllegalDataValue = 0x03
    125a:	63 e0       	ldi	r22, 0x03	; 3
    125c:	86 e8       	ldi	r24, 0x86	; 134
    125e:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    1262:	13 c1       	rjmp	.+550    	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == AnalogDigitalAlarmSettingRN)
    1264:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    1268:	89 31       	cpi	r24, 0x19	; 25
    126a:	e1 f4       	brne	.+56     	; 0x12a4 <loop+0x68e>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 100))												// Analog Digital Alarm Setting can be 0 - 100 %
    126c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1270:	85 36       	cpi	r24, 0x65	; 101
    1272:	98 f4       	brcc	.+38     	; 0x129a <loop+0x684>
					{
						txToSensor(HBLC_ID, AnalogDigitalAlarmSettingDef, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));	// Calls the txToSensor function with parameter HBLC_ID, AnalogDigitalAlarmSettingDef and the SensorSetValue found on position 4
    1274:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	38 2f       	mov	r19, r24
    127e:	22 27       	eor	r18, r18
    1280:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1284:	88 2f       	mov	r24, r24
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	82 0f       	add	r24, r18
    128a:	93 1f       	adc	r25, r19
    128c:	ac 01       	movw	r20, r24
    128e:	6f e3       	ldi	r22, 0x3F	; 63
    1290:	80 e3       	ldi	r24, 0x30	; 48
    1292:	90 e8       	ldi	r25, 0x80	; 128
    1294:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    1298:	f8 c0       	rjmp	.+496    	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);				// IsWrong = 0x80, IllegalDataValue = 0x03
    129a:	63 e0       	ldi	r22, 0x03	; 3
    129c:	86 e8       	ldi	r24, 0x86	; 134
    129e:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    12a2:	f3 c0       	rjmp	.+486    	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == AnalogDigitalHystSettingRN)
    12a4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    12a8:	8a 31       	cpi	r24, 0x1A	; 26
    12aa:	e1 f4       	brne	.+56     	; 0x12e4 <loop+0x6ce>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 100))												// Analog Digital Hyst Setting can be 0 - 100 %
    12ac:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    12b0:	85 36       	cpi	r24, 0x65	; 101
    12b2:	98 f4       	brcc	.+38     	; 0x12da <loop+0x6c4>
					{
						txToSensor(HBLC_ID, AnalogDigitalHystSettingDef, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));	// Calls the txToSensor function with parameter HBLC_ID, AnalogDigitalHystSettingDef and the SensorSetValue found on position 4
    12b4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	38 2f       	mov	r19, r24
    12be:	22 27       	eor	r18, r18
    12c0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    12c4:	88 2f       	mov	r24, r24
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	82 0f       	add	r24, r18
    12ca:	93 1f       	adc	r25, r19
    12cc:	ac 01       	movw	r20, r24
    12ce:	67 e4       	ldi	r22, 0x47	; 71
    12d0:	80 e3       	ldi	r24, 0x30	; 48
    12d2:	90 e8       	ldi	r25, 0x80	; 128
    12d4:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    12d8:	d8 c0       	rjmp	.+432    	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);				// IsWrong = 0x80, IllegalDataValue = 0x03
    12da:	63 e0       	ldi	r22, 0x03	; 3
    12dc:	86 e8       	ldi	r24, 0x86	; 134
    12de:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    12e2:	d3 c0       	rjmp	.+422    	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == LEDShiftRN)
    12e4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    12e8:	8b 31       	cpi	r24, 0x1B	; 27
    12ea:	e1 f4       	brne	.+56     	; 0x1324 <loop+0x70e>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 1))										// Set LED Shift can be 0 == Alarm LED or 1 == Control LED
    12ec:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    12f0:	82 30       	cpi	r24, 0x02	; 2
    12f2:	98 f4       	brcc	.+38     	; 0x131a <loop+0x704>
					{
						txToSensor(HBLC_ID, LEDShift, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));			// Calls the txToSensor function with parameter HBLC_ID, LEDShift and the SensorSetValue found on position 4 and 5 in the array
    12f4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	38 2f       	mov	r19, r24
    12fe:	22 27       	eor	r18, r18
    1300:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	82 0f       	add	r24, r18
    130a:	93 1f       	adc	r25, r19
    130c:	ac 01       	movw	r20, r24
    130e:	62 e1       	ldi	r22, 0x12	; 18
    1310:	80 e3       	ldi	r24, 0x30	; 48
    1312:	90 e8       	ldi	r25, 0x80	; 128
    1314:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    1318:	b8 c0       	rjmp	.+368    	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
    131a:	63 e0       	ldi	r22, 0x03	; 3
    131c:	86 e8       	ldi	r24, 0x86	; 134
    131e:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    1322:	b3 c0       	rjmp	.+358    	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == RampeFunctionRN)
    1324:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    1328:	8c 31       	cpi	r24, 0x1C	; 28
    132a:	e1 f4       	brne	.+56     	; 0x1364 <loop+0x74e>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 100))									// Rampe Function can be 0 - 100 %
    132c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1330:	85 36       	cpi	r24, 0x65	; 101
    1332:	98 f4       	brcc	.+38     	; 0x135a <loop+0x744>
					{
						txToSensor(HBLC_ID, RampeFunction, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));	// Calls the txToSensor function with parameter HBLC_ID, RampeFunction and the SensorSetValue found on position 4
    1334:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    1338:	88 2f       	mov	r24, r24
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	38 2f       	mov	r19, r24
    133e:	22 27       	eor	r18, r18
    1340:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1344:	88 2f       	mov	r24, r24
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	82 0f       	add	r24, r18
    134a:	93 1f       	adc	r25, r19
    134c:	ac 01       	movw	r20, r24
    134e:	66 e3       	ldi	r22, 0x36	; 54
    1350:	80 e3       	ldi	r24, 0x30	; 48
    1352:	90 e8       	ldi	r25, 0x80	; 128
    1354:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    1358:	98 c0       	rjmp	.+304    	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
    135a:	63 e0       	ldi	r22, 0x03	; 3
    135c:	86 e8       	ldi	r24, 0x86	; 134
    135e:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    1362:	93 c0       	rjmp	.+294    	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == ValveFilterRN)
    1364:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    1368:	8d 31       	cpi	r24, 0x1D	; 29
    136a:	e1 f4       	brne	.+56     	; 0x13a4 <loop+0x78e>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 100))									// Valve Filter (valve speed open % in sec) can be 0 - 100 %
    136c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1370:	85 36       	cpi	r24, 0x65	; 101
    1372:	98 f4       	brcc	.+38     	; 0x139a <loop+0x784>
					{
						txToSensor(HBLC_ID, ValveFilter, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));		// Calls the txToSensor function with parameter HBLC_ID, ValveFilter and the SensorSetValue found on position 4
    1374:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    1378:	88 2f       	mov	r24, r24
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	38 2f       	mov	r19, r24
    137e:	22 27       	eor	r18, r18
    1380:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1384:	88 2f       	mov	r24, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	82 0f       	add	r24, r18
    138a:	93 1f       	adc	r25, r19
    138c:	ac 01       	movw	r20, r24
    138e:	68 e3       	ldi	r22, 0x38	; 56
    1390:	80 e3       	ldi	r24, 0x30	; 48
    1392:	90 e8       	ldi	r25, 0x80	; 128
    1394:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    1398:	78 c0       	rjmp	.+240    	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
    139a:	63 e0       	ldi	r22, 0x03	; 3
    139c:	86 e8       	ldi	r24, 0x86	; 134
    139e:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    13a2:	73 c0       	rjmp	.+230    	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == ValveCloseFilterRN)
    13a4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    13a8:	8e 31       	cpi	r24, 0x1E	; 30
    13aa:	e1 f4       	brne	.+56     	; 0x13e4 <loop+0x7ce>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 100))										// Valve Close Filter (valve speed close % in sec) can be 0 - 100 %
    13ac:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    13b0:	85 36       	cpi	r24, 0x65	; 101
    13b2:	98 f4       	brcc	.+38     	; 0x13da <loop+0x7c4>
					{
						txToSensor(HBLC_ID, ValveCloseFilterDef, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));	// Calls the txToSensor function with parameter HBLC_ID, ValveCloseFilterDef and the SensorSetValue found on position 4
    13b4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	38 2f       	mov	r19, r24
    13be:	22 27       	eor	r18, r18
    13c0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	82 0f       	add	r24, r18
    13ca:	93 1f       	adc	r25, r19
    13cc:	ac 01       	movw	r20, r24
    13ce:	6b e3       	ldi	r22, 0x3B	; 59
    13d0:	80 e3       	ldi	r24, 0x30	; 48
    13d2:	90 e8       	ldi	r25, 0x80	; 128
    13d4:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    13d8:	58 c0       	rjmp	.+176    	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);		// IsWrong = 0x80, IllegalDataValue = 0x03
    13da:	63 e0       	ldi	r22, 0x03	; 3
    13dc:	86 e8       	ldi	r24, 0x86	; 134
    13de:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    13e2:	53 c0       	rjmp	.+166    	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == MinValveOpenRN)
    13e4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    13e8:	8f 31       	cpi	r24, 0x1F	; 31
    13ea:	e1 f4       	brne	.+56     	; 0x1424 <loop+0x80e>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 100))									// Min Valve Open can be 0 - 100 %
    13ec:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    13f0:	85 36       	cpi	r24, 0x65	; 101
    13f2:	98 f4       	brcc	.+38     	; 0x141a <loop+0x804>
					{
						txToSensor(HBLC_ID, MinValveOpenDef, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));	// Calls the txToSensor function with parameter HBLC_ID, MinValveOpenDef and the SensorSetValue found on position 4
    13f4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	38 2f       	mov	r19, r24
    13fe:	22 27       	eor	r18, r18
    1400:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	82 0f       	add	r24, r18
    140a:	93 1f       	adc	r25, r19
    140c:	ac 01       	movw	r20, r24
    140e:	6e e3       	ldi	r22, 0x3E	; 62
    1410:	80 e3       	ldi	r24, 0x30	; 48
    1412:	90 e8       	ldi	r25, 0x80	; 128
    1414:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    1418:	38 c0       	rjmp	.+112    	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
    141a:	63 e0       	ldi	r22, 0x03	; 3
    141c:	86 e8       	ldi	r24, 0x86	; 134
    141e:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    1422:	33 c0       	rjmp	.+102    	; 0x148a <loop+0x874>
					}
				}
				else if(MBrxBuffer[3] == MaxValveOpenRN)
    1424:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MBrxBuffer+0x3>
    1428:	80 32       	cpi	r24, 0x20	; 32
    142a:	e1 f4       	brne	.+56     	; 0x1464 <loop+0x84e>
				{
					if((MBrxBuffer[5] >= 0x00) && (MBrxBuffer[5] <= 100))									// Max Valve Open can be 0 - 100 %
    142c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1430:	85 36       	cpi	r24, 0x65	; 101
    1432:	98 f4       	brcc	.+38     	; 0x145a <loop+0x844>
					{
						txToSensor(HBLC_ID, MaxValveOpenDef, (int)((MBrxBuffer[4] << 8) + MBrxBuffer[5]));	// Calls the txToSensor function with parameter HBLC_ID, MaxValveOpenDef and the SensorSetValue found on position 4
    1434:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MBrxBuffer+0x4>
    1438:	88 2f       	mov	r24, r24
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	38 2f       	mov	r19, r24
    143e:	22 27       	eor	r18, r18
    1440:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MBrxBuffer+0x5>
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	ac 01       	movw	r20, r24
    144e:	60 e4       	ldi	r22, 0x40	; 64
    1450:	80 e3       	ldi	r24, 0x30	; 48
    1452:	90 e8       	ldi	r25, 0x80	; 128
    1454:	0e 94 27 01 	call	0x24e	; 0x24e <_Z10txToSensorjhj>
    1458:	18 c0       	rjmp	.+48     	; 0x148a <loop+0x874>
					}
					else
					{
						txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataValue);	// IsWrong = 0x80, IllegalDataValue = 0x03
    145a:	63 e0       	ldi	r22, 0x03	; 3
    145c:	86 e8       	ldi	r24, 0x86	; 134
    145e:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    1462:	13 c0       	rjmp	.+38     	; 0x148a <loop+0x874>
					}
				}
				else
				{
					txToModbusRequestErrorResponse((WriteSingleRegister + IsWrong), IllegalDataAddress);	// IsWrong = 0x80, IllegalDataAddress = 0x02
    1464:	62 e0       	ldi	r22, 0x02	; 2
    1466:	86 e8       	ldi	r24, 0x86	; 134
    1468:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
    146c:	0e c0       	rjmp	.+28     	; 0x148a <loop+0x874>
				}
			}
			else if(MBrxBuffer[1] == WriteMultipleCoils);
    146e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MBrxBuffer+0x1>
    1472:	85 31       	cpi	r24, 0x15	; 21
    1474:	51 f0       	breq	.+20     	; 0x148a <loop+0x874>
			else if(MBrxBuffer[1] == WriteMultipleRegisters);
    1476:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MBrxBuffer+0x1>
    147a:	86 31       	cpi	r24, 0x16	; 22
    147c:	31 f0       	breq	.+12     	; 0x148a <loop+0x874>
			else
			{
				txToModbusRequestErrorResponse((MBrxBuffer[1] + IsWrong), IllegalFunction);					// IsWrong = 0x80, IllegalFunction = 0x01
    147e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MBrxBuffer+0x1>
    1482:	80 58       	subi	r24, 0x80	; 128
    1484:	61 e0       	ldi	r22, 0x01	; 1
    1486:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z30txToModbusRequestErrorResponsehh>
			}
		}
	}

	if (softwareSerial.available())
    148a:	85 ec       	ldi	r24, 0xC5	; 197
    148c:	94 e0       	ldi	r25, 0x04	; 4
    148e:	0e 94 3f 14 	call	0x287e	; 0x287e <_ZN14SoftwareSerial9availableEv>
    1492:	21 e0       	ldi	r18, 0x01	; 1
    1494:	89 2b       	or	r24, r25
    1496:	09 f4       	brne	.+2      	; 0x149a <loop+0x884>
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	22 23       	and	r18, r18
    149c:	09 f4       	brne	.+2      	; 0x14a0 <loop+0x88a>
    149e:	3e c3       	rjmp	.+1660   	; 0x1b1c <loop+0xf06>
	{
		if(SensorRxWritePos < S_RX_BUFFER_SIZE)
		{
			SensorRxBuffer[SensorRxWritePos++] = softwareSerial.read();		// Read the softwareSerial and put into the SensorRxBuffer and increment the SensorRxWritePos
    14a0:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <SensorRxWritePos>
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	98 0f       	add	r25, r24
    14a8:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <SensorRxWritePos>
    14ac:	08 2f       	mov	r16, r24
    14ae:	10 e0       	ldi	r17, 0x00	; 0
    14b0:	85 ec       	ldi	r24, 0xC5	; 197
    14b2:	94 e0       	ldi	r25, 0x04	; 4
    14b4:	0e 94 b5 13 	call	0x276a	; 0x276a <_ZN14SoftwareSerial4readEv>
    14b8:	9c 01       	movw	r18, r24
    14ba:	c8 01       	movw	r24, r16
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	8e 5c       	subi	r24, 0xCE	; 206
    14c2:	9d 4f       	sbci	r25, 0xFD	; 253
    14c4:	fc 01       	movw	r30, r24
    14c6:	31 83       	std	Z+1, r19	; 0x01
    14c8:	20 83       	st	Z, r18
			if(SensorRxBuffer[0] == 0x00)									// Sometimes the SensorRxBuffer starts with 0x00 instead of 0x02 (STX from sensor). This if statement is to avoid that.
    14ca:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <SensorRxBuffer>
    14ce:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <SensorRxBuffer+0x1>
    14d2:	89 2b       	or	r24, r25
    14d4:	29 f4       	brne	.+10     	; 0x14e0 <loop+0x8ca>
			{
				SensorRxWritePos--;
    14d6:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <SensorRxWritePos>
    14da:	81 50       	subi	r24, 0x01	; 1
    14dc:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <SensorRxWritePos>
		else
		{
			SensorRxWritePos = 0;
		}
		
		if((SensorRxBuffer[4] == 0x23) && (SensorRxBuffer[5] == 0x01) && (SensorRxBuffer[7] == 0xFF)) // 0x23 means that the sensor received the information. 0x01 means that the value is set correct. Array position 7 is the last digit of the CRC and will always be 0xFF if the new setting is set.
    14e0:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <SensorRxBuffer+0x8>
    14e4:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <SensorRxBuffer+0x9>
    14e8:	83 97       	sbiw	r24, 0x23	; 35
    14ea:	b1 f4       	brne	.+44     	; 0x1518 <loop+0x902>
    14ec:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <SensorRxBuffer+0xa>
    14f0:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <SensorRxBuffer+0xb>
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	81 f4       	brne	.+32     	; 0x1518 <loop+0x902>
    14f8:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <SensorRxBuffer+0xe>
    14fc:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <SensorRxBuffer+0xf>
    1500:	8f 3f       	cpi	r24, 0xFF	; 255
    1502:	91 05       	cpc	r25, r1
    1504:	49 f4       	brne	.+18     	; 0x1518 <loop+0x902>
		{
			txToModbusRequestResponse(WriteSingleRegister, 0);		// Respond with Slave Address, Function code, Register Address High & Low and Register Value High & Low. Parameter 1 represents the position of the function code in the array.
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	86 e0       	ldi	r24, 0x06	; 6
    150c:	0e 94 94 03 	call	0x728	; 0x728 <_Z25txToModbusRequestResponsehi>
			SensorRxBuffer[4] = 0x00;								// Set SensorRxBuffer[4] = 0x00 so that it will not go into this if statement again. Then the HBCL_settings will be in the SensorRxBuffer.
    1510:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <SensorRxBuffer+0x9>
    1514:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <SensorRxBuffer+0x8>
		}
		
		if(approveHBLCsettingsCRC(81) == true)	// calls the approveHBLCsettingsCRC that checks if the received CRC is equal to the calculatedCRC
    1518:	81 e5       	ldi	r24, 0x51	; 81
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 a4 02 	call	0x548	; 0x548 <_Z22approveHBLCsettingsCRCi>
    1520:	88 23       	and	r24, r24
    1522:	09 f4       	brne	.+2      	; 0x1526 <loop+0x910>
    1524:	fb c2       	rjmp	.+1526   	; 0x1b1c <loop+0xf06>
		{
			// Diagnostic
			zero_data = (SensorRxBuffer[ZeroDataAP] + (SensorRxBuffer[ZeroDataAP+1] << 8));
    1526:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <SensorRxBuffer+0x40>
    152a:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <SensorRxBuffer+0x41>
    152e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <SensorRxBuffer+0x42>
    1532:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <SensorRxBuffer+0x43>
    1536:	98 2f       	mov	r25, r24
    1538:	88 27       	eor	r24, r24
    153a:	82 0f       	add	r24, r18
    153c:	93 1f       	adc	r25, r19
    153e:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <zero_data+0x1>
    1542:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <zero_data>
			span_zero_data = (SensorRxBuffer[SpanZeroDataAP] + (SensorRxBuffer[SpanZeroDataAP+1] << 8));
    1546:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <SensorRxBuffer+0x44>
    154a:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <SensorRxBuffer+0x45>
    154e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <SensorRxBuffer+0x46>
    1552:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <SensorRxBuffer+0x47>
    1556:	98 2f       	mov	r25, r24
    1558:	88 27       	eor	r24, r24
    155a:	82 0f       	add	r24, r18
    155c:	93 1f       	adc	r25, r19
    155e:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <span_zero_data+0x1>
    1562:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <span_zero_data>
			
			actual_measurement_pF = (SensorRxBuffer[pFmdlScaleForToolAP] + (SensorRxBuffer[pFmdlScaleForToolAP+1] << 8));
    1566:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <SensorRxBuffer+0x48>
    156a:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <SensorRxBuffer+0x49>
    156e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <SensorRxBuffer+0x4a>
    1572:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <SensorRxBuffer+0x4b>
    1576:	98 2f       	mov	r25, r24
    1578:	88 27       	eor	r24, r24
    157a:	82 0f       	add	r24, r18
    157c:	93 1f       	adc	r25, r19
    157e:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <actual_measurement_pF+0x1>
    1582:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <actual_measurement_pF>
			float zero_data_float = zero_data;
    1586:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <zero_data>
    158a:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <zero_data+0x1>
    158e:	cc 01       	movw	r24, r24
    1590:	a0 e0       	ldi	r26, 0x00	; 0
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	bc 01       	movw	r22, r24
    1596:	cd 01       	movw	r24, r26
    1598:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__floatunsisf>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	8f 83       	std	Y+7, r24	; 0x07
    15a2:	98 87       	std	Y+8, r25	; 0x08
    15a4:	a9 87       	std	Y+9, r26	; 0x09
    15a6:	ba 87       	std	Y+10, r27	; 0x0a
			float span_zero_data_float = span_zero_data;
    15a8:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <span_zero_data>
    15ac:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <span_zero_data+0x1>
    15b0:	cc 01       	movw	r24, r24
    15b2:	a0 e0       	ldi	r26, 0x00	; 0
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	bc 01       	movw	r22, r24
    15b8:	cd 01       	movw	r24, r26
    15ba:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__floatunsisf>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	8b 87       	std	Y+11, r24	; 0x0b
    15c4:	9c 87       	std	Y+12, r25	; 0x0c
    15c6:	ad 87       	std	Y+13, r26	; 0x0d
    15c8:	be 87       	std	Y+14, r27	; 0x0e
			float actual_mesurement_pF_float = actual_measurement_pF;
    15ca:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <actual_measurement_pF>
    15ce:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <actual_measurement_pF+0x1>
    15d2:	cc 01       	movw	r24, r24
    15d4:	a0 e0       	ldi	r26, 0x00	; 0
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__floatunsisf>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	8f 87       	std	Y+15, r24	; 0x0f
    15e6:	98 8b       	std	Y+16, r25	; 0x10
    15e8:	a9 8b       	std	Y+17, r26	; 0x11
    15ea:	ba 8b       	std	Y+18, r27	; 0x12
			float ActualLevelPctFloat = ((actual_mesurement_pF_float - zero_data_float) / (span_zero_data_float + zero_data_float - zero_data_float)) * 100; // multiply with 100 if you want an integer and with 1000 if you want one number after the digit
    15ec:	2f 81       	ldd	r18, Y+7	; 0x07
    15ee:	38 85       	ldd	r19, Y+8	; 0x08
    15f0:	49 85       	ldd	r20, Y+9	; 0x09
    15f2:	5a 85       	ldd	r21, Y+10	; 0x0a
    15f4:	6f 85       	ldd	r22, Y+15	; 0x0f
    15f6:	78 89       	ldd	r23, Y+16	; 0x10
    15f8:	89 89       	ldd	r24, Y+17	; 0x11
    15fa:	9a 89       	ldd	r25, Y+18	; 0x12
    15fc:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__subsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	6c 01       	movw	r12, r24
    1606:	7d 01       	movw	r14, r26
    1608:	2f 81       	ldd	r18, Y+7	; 0x07
    160a:	38 85       	ldd	r19, Y+8	; 0x08
    160c:	49 85       	ldd	r20, Y+9	; 0x09
    160e:	5a 85       	ldd	r21, Y+10	; 0x0a
    1610:	6b 85       	ldd	r22, Y+11	; 0x0b
    1612:	7c 85       	ldd	r23, Y+12	; 0x0c
    1614:	8d 85       	ldd	r24, Y+13	; 0x0d
    1616:	9e 85       	ldd	r25, Y+14	; 0x0e
    1618:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__addsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	2f 81       	ldd	r18, Y+7	; 0x07
    1622:	38 85       	ldd	r19, Y+8	; 0x08
    1624:	49 85       	ldd	r20, Y+9	; 0x09
    1626:	5a 85       	ldd	r21, Y+10	; 0x0a
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__subsf3>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	9c 01       	movw	r18, r24
    1636:	ad 01       	movw	r20, r26
    1638:	c7 01       	movw	r24, r14
    163a:	b6 01       	movw	r22, r12
    163c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__divsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	48 ec       	ldi	r20, 0xC8	; 200
    164a:	52 e4       	ldi	r21, 0x42	; 66
    164c:	bc 01       	movw	r22, r24
    164e:	cd 01       	movw	r24, r26
    1650:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	8b 8b       	std	Y+19, r24	; 0x13
    165a:	9c 8b       	std	Y+20, r25	; 0x14
    165c:	ad 8b       	std	Y+21, r26	; 0x15
    165e:	be 8b       	std	Y+22, r27	; 0x16
			actual_level_pct_int = round(ActualLevelPctFloat);
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	a9 01       	movw	r20, r18
    1666:	6b 89       	ldd	r22, Y+19	; 0x13
    1668:	7c 89       	ldd	r23, Y+20	; 0x14
    166a:	8d 89       	ldd	r24, Y+21	; 0x15
    166c:	9e 89       	ldd	r25, Y+22	; 0x16
    166e:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__gesf2>
    1672:	88 23       	and	r24, r24
    1674:	9c f0       	brlt	.+38     	; 0x169c <loop+0xa86>
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	5f e3       	ldi	r21, 0x3F	; 63
    167e:	6b 89       	ldd	r22, Y+19	; 0x13
    1680:	7c 89       	ldd	r23, Y+20	; 0x14
    1682:	8d 89       	ldd	r24, Y+21	; 0x15
    1684:	9e 89       	ldd	r25, Y+22	; 0x16
    1686:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__addsf3>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	bc 01       	movw	r22, r24
    1690:	cd 01       	movw	r24, r26
    1692:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <__fixsfsi>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	12 c0       	rjmp	.+36     	; 0x16c0 <loop+0xaaa>
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	5f e3       	ldi	r21, 0x3F	; 63
    16a4:	6b 89       	ldd	r22, Y+19	; 0x13
    16a6:	7c 89       	ldd	r23, Y+20	; 0x14
    16a8:	8d 89       	ldd	r24, Y+21	; 0x15
    16aa:	9e 89       	ldd	r25, Y+22	; 0x16
    16ac:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__subsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <__fixsfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <actual_level_pct_int+0x1>
    16c4:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <actual_level_pct_int>
			valveOpeningDegree = SensorRxBuffer[ValveOpeningDegreeAP];
    16c8:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <SensorRxBuffer+0x74>
    16cc:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <SensorRxBuffer+0x75>
    16d0:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <valveOpeningDegree+0x1>
    16d4:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <valveOpeningDegree>
			
			// Advanced settings
			hi_lo_alarm = SensorRxBuffer[HiLoAlarmAP];
    16d8:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <SensorRxBuffer+0x24>
    16dc:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <SensorRxBuffer+0x25>
    16e0:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <hi_lo_alarm+0x1>
    16e4:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <hi_lo_alarm>
			Alarm_hysterese = SensorRxBuffer[AlarmHystereseAP];
    16e8:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <SensorRxBuffer+0x10>
    16ec:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <SensorRxBuffer+0x11>
    16f0:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <Alarm_hysterese+0x1>
    16f4:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <Alarm_hysterese>
			NO_NC_alarm = SensorRxBuffer[NONCAlarmAP];
    16f8:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <SensorRxBuffer+0x1a>
    16fc:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <SensorRxBuffer+0x1b>
    1700:	90 93 8e 04 	sts	0x048E, r25	; 0x80048e <NO_NC_alarm+0x1>
    1704:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <NO_NC_alarm>
			LP_HP_mode = SensorRxBuffer[LPHPModeAP];
    1708:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <SensorRxBuffer+0x26>
    170c:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <SensorRxBuffer+0x27>
    1710:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <LP_HP_mode+0x1>
    1714:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <LP_HP_mode>
			SetAnalogOrDigitalOutput = SensorRxBuffer[SetAnalogOrDigitalOutputAP];
    1718:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <SensorRxBuffer+0x72>
    171c:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <SensorRxBuffer+0x73>
    1720:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <SetAnalogOrDigitalOutput+0x1>
    1724:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <SetAnalogOrDigitalOutput>
			AnalogDigitalAlarmSetting = SensorRxBuffer[AnalogDigitalAlarmSettingAP];
    1728:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <SensorRxBuffer+0x66>
    172c:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <SensorRxBuffer+0x67>
    1730:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <AnalogDigitalAlarmSetting+0x1>
    1734:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <AnalogDigitalAlarmSetting>
			AnalogDigitalHystSetting = SensorRxBuffer[AnalogDigitalHystSettingAP];
    1738:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <SensorRxBuffer+0x78>
    173c:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <SensorRxBuffer+0x79>
    1740:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <AnalogDigitalHystSetting+0x1>
    1744:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <AnalogDigitalHystSetting>
			led_shift = SensorRxBuffer[LEDShiftAP];
    1748:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <SensorRxBuffer+0x32>
    174c:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <SensorRxBuffer+0x33>
    1750:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <led_shift+0x1>
    1754:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <led_shift>
			Rampe_function = SensorRxBuffer[RampeFunctionAP];
    1758:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <SensorRxBuffer+0x52>
    175c:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <SensorRxBuffer+0x53>
    1760:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <Rampe_function+0x1>
    1764:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <Rampe_function>
			Valve_filter = SensorRxBuffer[ValveFilterAP];
    1768:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <SensorRxBuffer+0x56>
    176c:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <SensorRxBuffer+0x57>
    1770:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <Valve_filter+0x1>
    1774:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <Valve_filter>
			ValveCloseFilter = SensorRxBuffer[ValveCloseFilterAP];
    1778:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <SensorRxBuffer+0x5c>
    177c:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <SensorRxBuffer+0x5d>
    1780:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <ValveCloseFilter+0x1>
    1784:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <ValveCloseFilter>
			MinValveOpen = SensorRxBuffer[MinValveOpenAP];
    1788:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <SensorRxBuffer+0x64>
    178c:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <SensorRxBuffer+0x65>
    1790:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <MinValveOpen+0x1>
    1794:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <MinValveOpen>
			MaxValveOpen = SensorRxBuffer[MaxValveOpenAP];
    1798:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <SensorRxBuffer+0x68>
    179c:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <SensorRxBuffer+0x69>
    17a0:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <MaxValveOpen+0x1>
    17a4:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <MaxValveOpen>
			SensorID = (SensorRxBuffer[SensorIDAP] + (SensorRxBuffer[SensorIDAP+1] << 8));
    17a8:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <SensorRxBuffer+0x2>
    17ac:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <SensorRxBuffer+0x3>
    17b0:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <SensorRxBuffer+0x4>
    17b4:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <SensorRxBuffer+0x5>
    17b8:	98 2f       	mov	r25, r24
    17ba:	88 27       	eor	r24, r24
    17bc:	82 0f       	add	r24, r18
    17be:	93 1f       	adc	r25, r19
    17c0:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <SensorID+0x1>
    17c4:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <SensorID>
			
			// Basic settings
			Control_level = SensorRxBuffer[ControLevelAP];
    17c8:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <SensorRxBuffer+0x22>
    17cc:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <SensorRxBuffer+0x23>
    17d0:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <Control_level+0x1>
    17d4:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <Control_level>
			Set_val = SensorRxBuffer[SetValAP];
    17d8:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <SensorRxBuffer+0xa>
    17dc:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <SensorRxBuffer+0xb>
    17e0:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <Set_val+0x1>
    17e4:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <Set_val>
			P_band = SensorRxBuffer[PBandAP];
    17e8:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <SensorRxBuffer+0xc>
    17ec:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <SensorRxBuffer+0xd>
    17f0:	90 93 aa 04 	sts	0x04AA, r25	; 0x8004aa <P_band+0x1>
    17f4:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <P_band>
			Filter_function = SensorRxBuffer[FilterFunctionAP];
    17f8:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <SensorRxBuffer+0x16>
    17fc:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <SensorRxBuffer+0x17>
    1800:	90 93 ac 04 	sts	0x04AC, r25	; 0x8004ac <Filter_function+0x1>
    1804:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <Filter_function>
			Run_in = SensorRxBuffer[RunInAP];
    1808:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <SensorRxBuffer+0x20>
    180c:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <SensorRxBuffer+0x21>
    1810:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <Run_in+0x1>
    1814:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <Run_in>
			Cal_function = SensorRxBuffer[CalFunctionAP];
    1818:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <SensorRxBuffer+0x18>
    181c:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <SensorRxBuffer+0x19>
    1820:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <Cal_function+0x1>
    1824:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <Cal_function>
			Alarm_setting = SensorRxBuffer[AlarmSettingAP];
    1828:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <SensorRxBuffer+0xe>
    182c:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <SensorRxBuffer+0xf>
    1830:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <Alarm_setting+0x1>
    1834:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <Alarm_setting>
			Alarm_delay = (SensorRxBuffer[AlarmDelayAP] + (SensorRxBuffer[AlarmDelayAP+1] << 8));
    1838:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <SensorRxBuffer+0x12>
    183c:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <SensorRxBuffer+0x13>
    1840:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <SensorRxBuffer+0x14>
    1844:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <SensorRxBuffer+0x15>
    1848:	98 2f       	mov	r25, r24
    184a:	88 27       	eor	r24, r24
    184c:	82 0f       	add	r24, r18
    184e:	93 1f       	adc	r25, r19
    1850:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <Alarm_delay+0x1>
    1854:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <Alarm_delay>
			OffsetLength = (SensorRxBuffer[OffsetLengthAP] + (SensorRxBuffer[OffsetLengthAP+1] << 8));
    1858:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <SensorRxBuffer+0x60>
    185c:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <SensorRxBuffer+0x61>
    1860:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <SensorRxBuffer+0x62>
    1864:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <SensorRxBuffer+0x63>
    1868:	98 2f       	mov	r25, r24
    186a:	88 27       	eor	r24, r24
    186c:	82 0f       	add	r24, r18
    186e:	93 1f       	adc	r25, r19
    1870:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <OffsetLength+0x1>
    1874:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <OffsetLength>
			OffsetMinimumLength = (SensorRxBuffer[OffsetMinimumLengthAP] + (SensorRxBuffer[OffsetMinimumLengthAP+1] << 8));
    1878:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <SensorRxBuffer+0x6a>
    187c:	30 91 9d 02 	lds	r19, 0x029D	; 0x80029d <SensorRxBuffer+0x6b>
    1880:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <SensorRxBuffer+0x6c>
    1884:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <SensorRxBuffer+0x6d>
    1888:	98 2f       	mov	r25, r24
    188a:	88 27       	eor	r24, r24
    188c:	82 0f       	add	r24, r18
    188e:	93 1f       	adc	r25, r19
    1890:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <OffsetMinimumLength+0x1>
    1894:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <OffsetMinimumLength>
			SensorType = SensorRxBuffer[SensorTypeAP];
    1898:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <SensorRxBuffer+0x7e>
    189c:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <SensorRxBuffer+0x7f>
    18a0:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <SensorType+0x1>
    18a4:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <SensorType>
			Refrigerant = SensorRxBuffer[RefrigerantAP];
    18a8:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <SensorRxBuffer+0x4c>
    18ac:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <SensorRxBuffer+0x4d>
    18b0:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <Refrigerant+0x1>
    18b4:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <Refrigerant>
			Measurement_length = (SensorRxBuffer[MeasurementLengthAP] + (SensorRxBuffer[MeasurementLengthAP+1] << 8));
    18b8:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <SensorRxBuffer+0x4e>
    18bc:	30 91 81 02 	lds	r19, 0x0281	; 0x800281 <SensorRxBuffer+0x4f>
    18c0:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <SensorRxBuffer+0x50>
    18c4:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <SensorRxBuffer+0x51>
    18c8:	98 2f       	mov	r25, r24
    18ca:	88 27       	eor	r24, r24
    18cc:	82 0f       	add	r24, r18
    18ce:	93 1f       	adc	r25, r19
    18d0:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Measurement_length+0x1>
    18d4:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Measurement_length>
			StandPipe = SensorRxBuffer[StandPipeAP];
    18d8:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <SensorRxBuffer+0x5e>
    18dc:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <SensorRxBuffer+0x5f>
    18e0:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <StandPipe+0x1>
    18e4:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <StandPipe>
			WorkingTemperature = SensorRxBuffer[WorkingTemperatureAP];
    18e8:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <SensorRxBuffer+0x6e>
    18ec:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <SensorRxBuffer+0x6f>
    18f0:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <WorkingTemperature+0x1>
    18f4:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <WorkingTemperature>
// 				alarm_overflow = 0;
// 				AboveBelowAlarmSetting = 0x00;					// 0x00 == false
// 			}
			
			// Inserting variables into SensorRegisterBuffer array
			SensorRegisterBuffer[0] = actual_level_pct_int;
    18f8:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <actual_level_pct_int>
    18fc:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <actual_level_pct_int+0x1>
    1900:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <SensorRegisterBuffer+0x1>
    1904:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <SensorRegisterBuffer>
			SensorRegisterBuffer[1] = AboveBelowAlarmSetting;
    1908:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <AboveBelowAlarmSetting>
    190c:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <AboveBelowAlarmSetting+0x1>
    1910:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <SensorRegisterBuffer+0x3>
    1914:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <SensorRegisterBuffer+0x2>
			SensorRegisterBuffer[2] = valveOpeningDegree;
    1918:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <valveOpeningDegree>
    191c:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <valveOpeningDegree+0x1>
    1920:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <SensorRegisterBuffer+0x5>
    1924:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <SensorRegisterBuffer+0x4>
			SensorRegisterBuffer[3] = zero_data;
    1928:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <zero_data>
    192c:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <zero_data+0x1>
    1930:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <SensorRegisterBuffer+0x7>
    1934:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <SensorRegisterBuffer+0x6>
			SensorRegisterBuffer[4] = span_zero_data;
    1938:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <span_zero_data>
    193c:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <span_zero_data+0x1>
    1940:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <SensorRegisterBuffer+0x9>
    1944:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <SensorRegisterBuffer+0x8>
			SensorRegisterBuffer[5] = Control_level;
    1948:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <Control_level>
    194c:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <Control_level+0x1>
    1950:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <SensorRegisterBuffer+0xb>
    1954:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <SensorRegisterBuffer+0xa>
			SensorRegisterBuffer[6] = Set_val;
    1958:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <Set_val>
    195c:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <Set_val+0x1>
    1960:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <SensorRegisterBuffer+0xd>
    1964:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <SensorRegisterBuffer+0xc>
			SensorRegisterBuffer[7] = P_band;
    1968:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <P_band>
    196c:	90 91 aa 04 	lds	r25, 0x04AA	; 0x8004aa <P_band+0x1>
    1970:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <SensorRegisterBuffer+0xf>
    1974:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <SensorRegisterBuffer+0xe>
			SensorRegisterBuffer[8] = Filter_function;
    1978:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <Filter_function>
    197c:	90 91 ac 04 	lds	r25, 0x04AC	; 0x8004ac <Filter_function+0x1>
    1980:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <SensorRegisterBuffer+0x11>
    1984:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <SensorRegisterBuffer+0x10>
			SensorRegisterBuffer[9] = Run_in;
    1988:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <Run_in>
    198c:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <Run_in+0x1>
    1990:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <SensorRegisterBuffer+0x13>
    1994:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <SensorRegisterBuffer+0x12>
			SensorRegisterBuffer[10] = Cal_function;
    1998:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <Cal_function>
    199c:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <Cal_function+0x1>
    19a0:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <SensorRegisterBuffer+0x15>
    19a4:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <SensorRegisterBuffer+0x14>
			SensorRegisterBuffer[11] = Alarm_setting;
    19a8:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <Alarm_setting>
    19ac:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <Alarm_setting+0x1>
    19b0:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <SensorRegisterBuffer+0x17>
    19b4:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <SensorRegisterBuffer+0x16>
			SensorRegisterBuffer[12] = Alarm_delay;
    19b8:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <Alarm_delay>
    19bc:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <Alarm_delay+0x1>
    19c0:	90 93 4c 04 	sts	0x044C, r25	; 0x80044c <SensorRegisterBuffer+0x19>
    19c4:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <SensorRegisterBuffer+0x18>
			SensorRegisterBuffer[13] = OffsetLength;
    19c8:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <OffsetLength>
    19cc:	90 91 b8 04 	lds	r25, 0x04B8	; 0x8004b8 <OffsetLength+0x1>
    19d0:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <SensorRegisterBuffer+0x1b>
    19d4:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <SensorRegisterBuffer+0x1a>
			SensorRegisterBuffer[14] = OffsetMinimumLength;
    19d8:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <OffsetMinimumLength>
    19dc:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <OffsetMinimumLength+0x1>
    19e0:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <SensorRegisterBuffer+0x1d>
    19e4:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <SensorRegisterBuffer+0x1c>
			SensorRegisterBuffer[15] = SensorType;
    19e8:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <SensorType>
    19ec:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <SensorType+0x1>
    19f0:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <SensorRegisterBuffer+0x1f>
    19f4:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <SensorRegisterBuffer+0x1e>
			SensorRegisterBuffer[16] = Refrigerant;
    19f8:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <Refrigerant>
    19fc:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <Refrigerant+0x1>
    1a00:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <SensorRegisterBuffer+0x21>
    1a04:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <SensorRegisterBuffer+0x20>
			SensorRegisterBuffer[17] = Measurement_length;
    1a08:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Measurement_length>
    1a0c:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Measurement_length+0x1>
    1a10:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <SensorRegisterBuffer+0x23>
    1a14:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <SensorRegisterBuffer+0x22>
			SensorRegisterBuffer[18] = StandPipe;
    1a18:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <StandPipe>
    1a1c:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <StandPipe+0x1>
    1a20:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <SensorRegisterBuffer+0x25>
    1a24:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <SensorRegisterBuffer+0x24>
			SensorRegisterBuffer[19] = WorkingTemperature;
    1a28:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <WorkingTemperature>
    1a2c:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <WorkingTemperature+0x1>
    1a30:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <SensorRegisterBuffer+0x27>
    1a34:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <SensorRegisterBuffer+0x26>
			SensorRegisterBuffer[20] = hi_lo_alarm;
    1a38:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <hi_lo_alarm>
    1a3c:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <hi_lo_alarm+0x1>
    1a40:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <SensorRegisterBuffer+0x29>
    1a44:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <SensorRegisterBuffer+0x28>
			SensorRegisterBuffer[21] = Alarm_hysterese;
    1a48:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <Alarm_hysterese>
    1a4c:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <Alarm_hysterese+0x1>
    1a50:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <SensorRegisterBuffer+0x2b>
    1a54:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <SensorRegisterBuffer+0x2a>
			SensorRegisterBuffer[22] = NO_NC_alarm;
    1a58:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <NO_NC_alarm>
    1a5c:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <NO_NC_alarm+0x1>
    1a60:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <SensorRegisterBuffer+0x2d>
    1a64:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <SensorRegisterBuffer+0x2c>
			SensorRegisterBuffer[23] = LP_HP_mode;
    1a68:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <LP_HP_mode>
    1a6c:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <LP_HP_mode+0x1>
    1a70:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <SensorRegisterBuffer+0x2f>
    1a74:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <SensorRegisterBuffer+0x2e>
			SensorRegisterBuffer[24] = SetAnalogOrDigitalOutput;
    1a78:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <SetAnalogOrDigitalOutput>
    1a7c:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <SetAnalogOrDigitalOutput+0x1>
    1a80:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <SensorRegisterBuffer+0x31>
    1a84:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <SensorRegisterBuffer+0x30>
			SensorRegisterBuffer[25] = AnalogDigitalAlarmSetting;
    1a88:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <AnalogDigitalAlarmSetting>
    1a8c:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <AnalogDigitalAlarmSetting+0x1>
    1a90:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <SensorRegisterBuffer+0x33>
    1a94:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <SensorRegisterBuffer+0x32>
			SensorRegisterBuffer[26] = AnalogDigitalHystSetting;
    1a98:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <AnalogDigitalHystSetting>
    1a9c:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <AnalogDigitalHystSetting+0x1>
    1aa0:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <SensorRegisterBuffer+0x35>
    1aa4:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <SensorRegisterBuffer+0x34>
			SensorRegisterBuffer[27] = led_shift;
    1aa8:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <led_shift>
    1aac:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <led_shift+0x1>
    1ab0:	90 93 6a 04 	sts	0x046A, r25	; 0x80046a <SensorRegisterBuffer+0x37>
    1ab4:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <SensorRegisterBuffer+0x36>
			SensorRegisterBuffer[28] = Rampe_function;
    1ab8:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <Rampe_function>
    1abc:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <Rampe_function+0x1>
    1ac0:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <SensorRegisterBuffer+0x39>
    1ac4:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <SensorRegisterBuffer+0x38>
			SensorRegisterBuffer[29] = Valve_filter;
    1ac8:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <Valve_filter>
    1acc:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <Valve_filter+0x1>
    1ad0:	90 93 6e 04 	sts	0x046E, r25	; 0x80046e <SensorRegisterBuffer+0x3b>
    1ad4:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <SensorRegisterBuffer+0x3a>
			SensorRegisterBuffer[30] = ValveCloseFilter;
    1ad8:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <ValveCloseFilter>
    1adc:	90 91 9e 04 	lds	r25, 0x049E	; 0x80049e <ValveCloseFilter+0x1>
    1ae0:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <SensorRegisterBuffer+0x3d>
    1ae4:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <SensorRegisterBuffer+0x3c>
			SensorRegisterBuffer[31] = MinValveOpen;
    1ae8:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <MinValveOpen>
    1aec:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <MinValveOpen+0x1>
    1af0:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <SensorRegisterBuffer+0x3f>
    1af4:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <SensorRegisterBuffer+0x3e>
			SensorRegisterBuffer[32] = MaxValveOpen;
    1af8:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <MaxValveOpen>
    1afc:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <MaxValveOpen+0x1>
    1b00:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <SensorRegisterBuffer+0x41>
    1b04:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <SensorRegisterBuffer+0x40>
			SensorRegisterBuffer[33] = SensorID;
    1b08:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <SensorID>
    1b0c:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <SensorID+0x1>
    1b10:	90 93 76 04 	sts	0x0476, r25	; 0x800476 <SensorRegisterBuffer+0x43>
    1b14:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <SensorRegisterBuffer+0x42>
			
			resetSensorRxBuffer();
    1b18:	0e 94 15 01 	call	0x22a	; 0x22a <_Z19resetSensorRxBufferv>
		}
	}
    1b1c:	00 00       	nop
    1b1e:	66 96       	adiw	r28, 0x16	; 22
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	ff 90       	pop	r15
    1b34:	ef 90       	pop	r14
    1b36:	df 90       	pop	r13
    1b38:	cf 90       	pop	r12
    1b3a:	08 95       	ret

00001b3c <_Z41__static_initialization_and_destruction_0ii>:
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <_Z41__static_initialization_and_destruction_0ii+0x6>
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <_Z41__static_initialization_and_destruction_0ii+0x8>
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	9a 83       	std	Y+2, r25	; 0x02
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	7c 83       	std	Y+4, r23	; 0x04
    1b4e:	6b 83       	std	Y+3, r22	; 0x03
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	9a 81       	ldd	r25, Y+2	; 0x02
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	59 f4       	brne	.+22     	; 0x1b6e <_Z41__static_initialization_and_destruction_0ii+0x32>
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	39 f4       	brne	.+14     	; 0x1b6e <_Z41__static_initialization_and_destruction_0ii+0x32>
unsigned int StandPipe;					// [47]			[18]	DN25 1" == 0, DN32 1¼" == 1, DN40 1½" == 2, DN50 2" == 3, DN65 2½" == 4, DN80 3" == 5, DN100 4" == 6
unsigned int WorkingTemperature;		// [55]			[19]	-60 - -40° == 0,  -40 - -30° == 1, -30 - -20° == 2, -20 - -10° == 3, -10 - 0° == 4, 0-10° == 5, 10-20° == 6, 20-30° == 6, 30-40° == 7, 40-50° == 8, 50-60° == 9, 60-70° == 10, 70-80° == 11, 80-90° == 12, 90-100° == 13

// ================================================================================

SoftwareSerial softwareSerial = SoftwareSerial(rxPin, txPin); // Initializing the softwareSerial with RX, TX
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	47 e0       	ldi	r20, 0x07	; 7
    1b64:	67 e0       	ldi	r22, 0x07	; 7
    1b66:	85 ec       	ldi	r24, 0xC5	; 197
    1b68:	94 e0       	ldi	r25, 0x04	; 4
    1b6a:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <_ZN14SoftwareSerialC1Ehhb>
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	89 2b       	or	r24, r25
    1b74:	41 f4       	brne	.+16     	; 0x1b86 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7a:	01 96       	adiw	r24, 0x01	; 1
    1b7c:	21 f4       	brne	.+8      	; 0x1b86 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    1b7e:	85 ec       	ldi	r24, 0xC5	; 197
    1b80:	94 e0       	ldi	r25, 0x04	; 4
    1b82:	0e 94 10 15 	call	0x2a20	; 0x2a20 <_ZN14SoftwareSerialD1Ev>
			SensorRegisterBuffer[33] = SensorID;
			
			resetSensorRxBuffer();
		}
	}
    1b86:	00 00       	nop
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	08 95       	ret

00001b96 <_GLOBAL__sub_I_SlaveAddress>:
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	6f ef       	ldi	r22, 0xFF	; 255
    1ba0:	7f ef       	ldi	r23, 0xFF	; 255
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <_Z41__static_initialization_and_destruction_0ii>
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	08 95       	ret

00001bb0 <_GLOBAL__sub_D_SlaveAddress>:
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    1bb8:	6f ef       	ldi	r22, 0xFF	; 255
    1bba:	7f ef       	ldi	r23, 0xFF	; 255
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <_Z41__static_initialization_and_destruction_0ii>
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	08 95       	ret

00001bca <__subsf3>:
    1bca:	50 58       	subi	r21, 0x80	; 128

00001bcc <__addsf3>:
    1bcc:	bb 27       	eor	r27, r27
    1bce:	aa 27       	eor	r26, r26
    1bd0:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__addsf3x>
    1bd4:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__fp_round>
    1bd8:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__fp_pscA>
    1bdc:	38 f0       	brcs	.+14     	; 0x1bec <__addsf3+0x20>
    1bde:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__fp_pscB>
    1be2:	20 f0       	brcs	.+8      	; 0x1bec <__addsf3+0x20>
    1be4:	39 f4       	brne	.+14     	; 0x1bf4 <__addsf3+0x28>
    1be6:	9f 3f       	cpi	r25, 0xFF	; 255
    1be8:	19 f4       	brne	.+6      	; 0x1bf0 <__addsf3+0x24>
    1bea:	26 f4       	brtc	.+8      	; 0x1bf4 <__addsf3+0x28>
    1bec:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <__fp_nan>
    1bf0:	0e f4       	brtc	.+2      	; 0x1bf4 <__addsf3+0x28>
    1bf2:	e0 95       	com	r30
    1bf4:	e7 fb       	bst	r30, 7
    1bf6:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__fp_inf>

00001bfa <__addsf3x>:
    1bfa:	e9 2f       	mov	r30, r25
    1bfc:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__fp_split3>
    1c00:	58 f3       	brcs	.-42     	; 0x1bd8 <__addsf3+0xc>
    1c02:	ba 17       	cp	r27, r26
    1c04:	62 07       	cpc	r22, r18
    1c06:	73 07       	cpc	r23, r19
    1c08:	84 07       	cpc	r24, r20
    1c0a:	95 07       	cpc	r25, r21
    1c0c:	20 f0       	brcs	.+8      	; 0x1c16 <__addsf3x+0x1c>
    1c0e:	79 f4       	brne	.+30     	; 0x1c2e <__addsf3x+0x34>
    1c10:	a6 f5       	brtc	.+104    	; 0x1c7a <__addsf3x+0x80>
    1c12:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__fp_zero>
    1c16:	0e f4       	brtc	.+2      	; 0x1c1a <__addsf3x+0x20>
    1c18:	e0 95       	com	r30
    1c1a:	0b 2e       	mov	r0, r27
    1c1c:	ba 2f       	mov	r27, r26
    1c1e:	a0 2d       	mov	r26, r0
    1c20:	0b 01       	movw	r0, r22
    1c22:	b9 01       	movw	r22, r18
    1c24:	90 01       	movw	r18, r0
    1c26:	0c 01       	movw	r0, r24
    1c28:	ca 01       	movw	r24, r20
    1c2a:	a0 01       	movw	r20, r0
    1c2c:	11 24       	eor	r1, r1
    1c2e:	ff 27       	eor	r31, r31
    1c30:	59 1b       	sub	r21, r25
    1c32:	99 f0       	breq	.+38     	; 0x1c5a <__addsf3x+0x60>
    1c34:	59 3f       	cpi	r21, 0xF9	; 249
    1c36:	50 f4       	brcc	.+20     	; 0x1c4c <__addsf3x+0x52>
    1c38:	50 3e       	cpi	r21, 0xE0	; 224
    1c3a:	68 f1       	brcs	.+90     	; 0x1c96 <__addsf3x+0x9c>
    1c3c:	1a 16       	cp	r1, r26
    1c3e:	f0 40       	sbci	r31, 0x00	; 0
    1c40:	a2 2f       	mov	r26, r18
    1c42:	23 2f       	mov	r18, r19
    1c44:	34 2f       	mov	r19, r20
    1c46:	44 27       	eor	r20, r20
    1c48:	58 5f       	subi	r21, 0xF8	; 248
    1c4a:	f3 cf       	rjmp	.-26     	; 0x1c32 <__addsf3x+0x38>
    1c4c:	46 95       	lsr	r20
    1c4e:	37 95       	ror	r19
    1c50:	27 95       	ror	r18
    1c52:	a7 95       	ror	r26
    1c54:	f0 40       	sbci	r31, 0x00	; 0
    1c56:	53 95       	inc	r21
    1c58:	c9 f7       	brne	.-14     	; 0x1c4c <__addsf3x+0x52>
    1c5a:	7e f4       	brtc	.+30     	; 0x1c7a <__addsf3x+0x80>
    1c5c:	1f 16       	cp	r1, r31
    1c5e:	ba 0b       	sbc	r27, r26
    1c60:	62 0b       	sbc	r22, r18
    1c62:	73 0b       	sbc	r23, r19
    1c64:	84 0b       	sbc	r24, r20
    1c66:	ba f0       	brmi	.+46     	; 0x1c96 <__addsf3x+0x9c>
    1c68:	91 50       	subi	r25, 0x01	; 1
    1c6a:	a1 f0       	breq	.+40     	; 0x1c94 <__addsf3x+0x9a>
    1c6c:	ff 0f       	add	r31, r31
    1c6e:	bb 1f       	adc	r27, r27
    1c70:	66 1f       	adc	r22, r22
    1c72:	77 1f       	adc	r23, r23
    1c74:	88 1f       	adc	r24, r24
    1c76:	c2 f7       	brpl	.-16     	; 0x1c68 <__addsf3x+0x6e>
    1c78:	0e c0       	rjmp	.+28     	; 0x1c96 <__addsf3x+0x9c>
    1c7a:	ba 0f       	add	r27, r26
    1c7c:	62 1f       	adc	r22, r18
    1c7e:	73 1f       	adc	r23, r19
    1c80:	84 1f       	adc	r24, r20
    1c82:	48 f4       	brcc	.+18     	; 0x1c96 <__addsf3x+0x9c>
    1c84:	87 95       	ror	r24
    1c86:	77 95       	ror	r23
    1c88:	67 95       	ror	r22
    1c8a:	b7 95       	ror	r27
    1c8c:	f7 95       	ror	r31
    1c8e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c90:	08 f0       	brcs	.+2      	; 0x1c94 <__addsf3x+0x9a>
    1c92:	b0 cf       	rjmp	.-160    	; 0x1bf4 <__addsf3+0x28>
    1c94:	93 95       	inc	r25
    1c96:	88 0f       	add	r24, r24
    1c98:	08 f0       	brcs	.+2      	; 0x1c9c <__addsf3x+0xa2>
    1c9a:	99 27       	eor	r25, r25
    1c9c:	ee 0f       	add	r30, r30
    1c9e:	97 95       	ror	r25
    1ca0:	87 95       	ror	r24
    1ca2:	08 95       	ret

00001ca4 <__divsf3>:
    1ca4:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__divsf3x>
    1ca8:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__fp_round>
    1cac:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__fp_pscB>
    1cb0:	58 f0       	brcs	.+22     	; 0x1cc8 <__divsf3+0x24>
    1cb2:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__fp_pscA>
    1cb6:	40 f0       	brcs	.+16     	; 0x1cc8 <__divsf3+0x24>
    1cb8:	29 f4       	brne	.+10     	; 0x1cc4 <__divsf3+0x20>
    1cba:	5f 3f       	cpi	r21, 0xFF	; 255
    1cbc:	29 f0       	breq	.+10     	; 0x1cc8 <__divsf3+0x24>
    1cbe:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__fp_inf>
    1cc2:	51 11       	cpse	r21, r1
    1cc4:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__fp_szero>
    1cc8:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <__fp_nan>

00001ccc <__divsf3x>:
    1ccc:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__fp_split3>
    1cd0:	68 f3       	brcs	.-38     	; 0x1cac <__divsf3+0x8>

00001cd2 <__divsf3_pse>:
    1cd2:	99 23       	and	r25, r25
    1cd4:	b1 f3       	breq	.-20     	; 0x1cc2 <__divsf3+0x1e>
    1cd6:	55 23       	and	r21, r21
    1cd8:	91 f3       	breq	.-28     	; 0x1cbe <__divsf3+0x1a>
    1cda:	95 1b       	sub	r25, r21
    1cdc:	55 0b       	sbc	r21, r21
    1cde:	bb 27       	eor	r27, r27
    1ce0:	aa 27       	eor	r26, r26
    1ce2:	62 17       	cp	r22, r18
    1ce4:	73 07       	cpc	r23, r19
    1ce6:	84 07       	cpc	r24, r20
    1ce8:	38 f0       	brcs	.+14     	; 0x1cf8 <__divsf3_pse+0x26>
    1cea:	9f 5f       	subi	r25, 0xFF	; 255
    1cec:	5f 4f       	sbci	r21, 0xFF	; 255
    1cee:	22 0f       	add	r18, r18
    1cf0:	33 1f       	adc	r19, r19
    1cf2:	44 1f       	adc	r20, r20
    1cf4:	aa 1f       	adc	r26, r26
    1cf6:	a9 f3       	breq	.-22     	; 0x1ce2 <__divsf3_pse+0x10>
    1cf8:	35 d0       	rcall	.+106    	; 0x1d64 <__divsf3_pse+0x92>
    1cfa:	0e 2e       	mov	r0, r30
    1cfc:	3a f0       	brmi	.+14     	; 0x1d0c <__divsf3_pse+0x3a>
    1cfe:	e0 e8       	ldi	r30, 0x80	; 128
    1d00:	32 d0       	rcall	.+100    	; 0x1d66 <__divsf3_pse+0x94>
    1d02:	91 50       	subi	r25, 0x01	; 1
    1d04:	50 40       	sbci	r21, 0x00	; 0
    1d06:	e6 95       	lsr	r30
    1d08:	00 1c       	adc	r0, r0
    1d0a:	ca f7       	brpl	.-14     	; 0x1cfe <__divsf3_pse+0x2c>
    1d0c:	2b d0       	rcall	.+86     	; 0x1d64 <__divsf3_pse+0x92>
    1d0e:	fe 2f       	mov	r31, r30
    1d10:	29 d0       	rcall	.+82     	; 0x1d64 <__divsf3_pse+0x92>
    1d12:	66 0f       	add	r22, r22
    1d14:	77 1f       	adc	r23, r23
    1d16:	88 1f       	adc	r24, r24
    1d18:	bb 1f       	adc	r27, r27
    1d1a:	26 17       	cp	r18, r22
    1d1c:	37 07       	cpc	r19, r23
    1d1e:	48 07       	cpc	r20, r24
    1d20:	ab 07       	cpc	r26, r27
    1d22:	b0 e8       	ldi	r27, 0x80	; 128
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <__divsf3_pse+0x56>
    1d26:	bb 0b       	sbc	r27, r27
    1d28:	80 2d       	mov	r24, r0
    1d2a:	bf 01       	movw	r22, r30
    1d2c:	ff 27       	eor	r31, r31
    1d2e:	93 58       	subi	r25, 0x83	; 131
    1d30:	5f 4f       	sbci	r21, 0xFF	; 255
    1d32:	3a f0       	brmi	.+14     	; 0x1d42 <__divsf3_pse+0x70>
    1d34:	9e 3f       	cpi	r25, 0xFE	; 254
    1d36:	51 05       	cpc	r21, r1
    1d38:	78 f0       	brcs	.+30     	; 0x1d58 <__divsf3_pse+0x86>
    1d3a:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__fp_inf>
    1d3e:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__fp_szero>
    1d42:	5f 3f       	cpi	r21, 0xFF	; 255
    1d44:	e4 f3       	brlt	.-8      	; 0x1d3e <__divsf3_pse+0x6c>
    1d46:	98 3e       	cpi	r25, 0xE8	; 232
    1d48:	d4 f3       	brlt	.-12     	; 0x1d3e <__divsf3_pse+0x6c>
    1d4a:	86 95       	lsr	r24
    1d4c:	77 95       	ror	r23
    1d4e:	67 95       	ror	r22
    1d50:	b7 95       	ror	r27
    1d52:	f7 95       	ror	r31
    1d54:	9f 5f       	subi	r25, 0xFF	; 255
    1d56:	c9 f7       	brne	.-14     	; 0x1d4a <__divsf3_pse+0x78>
    1d58:	88 0f       	add	r24, r24
    1d5a:	91 1d       	adc	r25, r1
    1d5c:	96 95       	lsr	r25
    1d5e:	87 95       	ror	r24
    1d60:	97 f9       	bld	r25, 7
    1d62:	08 95       	ret
    1d64:	e1 e0       	ldi	r30, 0x01	; 1
    1d66:	66 0f       	add	r22, r22
    1d68:	77 1f       	adc	r23, r23
    1d6a:	88 1f       	adc	r24, r24
    1d6c:	bb 1f       	adc	r27, r27
    1d6e:	62 17       	cp	r22, r18
    1d70:	73 07       	cpc	r23, r19
    1d72:	84 07       	cpc	r24, r20
    1d74:	ba 07       	cpc	r27, r26
    1d76:	20 f0       	brcs	.+8      	; 0x1d80 <__divsf3_pse+0xae>
    1d78:	62 1b       	sub	r22, r18
    1d7a:	73 0b       	sbc	r23, r19
    1d7c:	84 0b       	sbc	r24, r20
    1d7e:	ba 0b       	sbc	r27, r26
    1d80:	ee 1f       	adc	r30, r30
    1d82:	88 f7       	brcc	.-30     	; 0x1d66 <__divsf3_pse+0x94>
    1d84:	e0 95       	com	r30
    1d86:	08 95       	ret

00001d88 <__fixsfsi>:
    1d88:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__fixunssfsi>
    1d8c:	68 94       	set
    1d8e:	b1 11       	cpse	r27, r1
    1d90:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__fp_szero>
    1d94:	08 95       	ret

00001d96 <__fixunssfsi>:
    1d96:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__fp_splitA>
    1d9a:	88 f0       	brcs	.+34     	; 0x1dbe <__fixunssfsi+0x28>
    1d9c:	9f 57       	subi	r25, 0x7F	; 127
    1d9e:	98 f0       	brcs	.+38     	; 0x1dc6 <__fixunssfsi+0x30>
    1da0:	b9 2f       	mov	r27, r25
    1da2:	99 27       	eor	r25, r25
    1da4:	b7 51       	subi	r27, 0x17	; 23
    1da6:	b0 f0       	brcs	.+44     	; 0x1dd4 <__fixunssfsi+0x3e>
    1da8:	e1 f0       	breq	.+56     	; 0x1de2 <__fixunssfsi+0x4c>
    1daa:	66 0f       	add	r22, r22
    1dac:	77 1f       	adc	r23, r23
    1dae:	88 1f       	adc	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	1a f0       	brmi	.+6      	; 0x1dba <__fixunssfsi+0x24>
    1db4:	ba 95       	dec	r27
    1db6:	c9 f7       	brne	.-14     	; 0x1daa <__fixunssfsi+0x14>
    1db8:	14 c0       	rjmp	.+40     	; 0x1de2 <__fixunssfsi+0x4c>
    1dba:	b1 30       	cpi	r27, 0x01	; 1
    1dbc:	91 f0       	breq	.+36     	; 0x1de2 <__fixunssfsi+0x4c>
    1dbe:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__fp_zero>
    1dc2:	b1 e0       	ldi	r27, 0x01	; 1
    1dc4:	08 95       	ret
    1dc6:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__fp_zero>
    1dca:	67 2f       	mov	r22, r23
    1dcc:	78 2f       	mov	r23, r24
    1dce:	88 27       	eor	r24, r24
    1dd0:	b8 5f       	subi	r27, 0xF8	; 248
    1dd2:	39 f0       	breq	.+14     	; 0x1de2 <__fixunssfsi+0x4c>
    1dd4:	b9 3f       	cpi	r27, 0xF9	; 249
    1dd6:	cc f3       	brlt	.-14     	; 0x1dca <__fixunssfsi+0x34>
    1dd8:	86 95       	lsr	r24
    1dda:	77 95       	ror	r23
    1ddc:	67 95       	ror	r22
    1dde:	b3 95       	inc	r27
    1de0:	d9 f7       	brne	.-10     	; 0x1dd8 <__fixunssfsi+0x42>
    1de2:	3e f4       	brtc	.+14     	; 0x1df2 <__fixunssfsi+0x5c>
    1de4:	90 95       	com	r25
    1de6:	80 95       	com	r24
    1de8:	70 95       	com	r23
    1dea:	61 95       	neg	r22
    1dec:	7f 4f       	sbci	r23, 0xFF	; 255
    1dee:	8f 4f       	sbci	r24, 0xFF	; 255
    1df0:	9f 4f       	sbci	r25, 0xFF	; 255
    1df2:	08 95       	ret

00001df4 <__floatunsisf>:
    1df4:	e8 94       	clt
    1df6:	09 c0       	rjmp	.+18     	; 0x1e0a <__floatsisf+0x12>

00001df8 <__floatsisf>:
    1df8:	97 fb       	bst	r25, 7
    1dfa:	3e f4       	brtc	.+14     	; 0x1e0a <__floatsisf+0x12>
    1dfc:	90 95       	com	r25
    1dfe:	80 95       	com	r24
    1e00:	70 95       	com	r23
    1e02:	61 95       	neg	r22
    1e04:	7f 4f       	sbci	r23, 0xFF	; 255
    1e06:	8f 4f       	sbci	r24, 0xFF	; 255
    1e08:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0a:	99 23       	and	r25, r25
    1e0c:	a9 f0       	breq	.+42     	; 0x1e38 <__floatsisf+0x40>
    1e0e:	f9 2f       	mov	r31, r25
    1e10:	96 e9       	ldi	r25, 0x96	; 150
    1e12:	bb 27       	eor	r27, r27
    1e14:	93 95       	inc	r25
    1e16:	f6 95       	lsr	r31
    1e18:	87 95       	ror	r24
    1e1a:	77 95       	ror	r23
    1e1c:	67 95       	ror	r22
    1e1e:	b7 95       	ror	r27
    1e20:	f1 11       	cpse	r31, r1
    1e22:	f8 cf       	rjmp	.-16     	; 0x1e14 <__floatsisf+0x1c>
    1e24:	fa f4       	brpl	.+62     	; 0x1e64 <__floatsisf+0x6c>
    1e26:	bb 0f       	add	r27, r27
    1e28:	11 f4       	brne	.+4      	; 0x1e2e <__floatsisf+0x36>
    1e2a:	60 ff       	sbrs	r22, 0
    1e2c:	1b c0       	rjmp	.+54     	; 0x1e64 <__floatsisf+0x6c>
    1e2e:	6f 5f       	subi	r22, 0xFF	; 255
    1e30:	7f 4f       	sbci	r23, 0xFF	; 255
    1e32:	8f 4f       	sbci	r24, 0xFF	; 255
    1e34:	9f 4f       	sbci	r25, 0xFF	; 255
    1e36:	16 c0       	rjmp	.+44     	; 0x1e64 <__floatsisf+0x6c>
    1e38:	88 23       	and	r24, r24
    1e3a:	11 f0       	breq	.+4      	; 0x1e40 <__floatsisf+0x48>
    1e3c:	96 e9       	ldi	r25, 0x96	; 150
    1e3e:	11 c0       	rjmp	.+34     	; 0x1e62 <__floatsisf+0x6a>
    1e40:	77 23       	and	r23, r23
    1e42:	21 f0       	breq	.+8      	; 0x1e4c <__floatsisf+0x54>
    1e44:	9e e8       	ldi	r25, 0x8E	; 142
    1e46:	87 2f       	mov	r24, r23
    1e48:	76 2f       	mov	r23, r22
    1e4a:	05 c0       	rjmp	.+10     	; 0x1e56 <__floatsisf+0x5e>
    1e4c:	66 23       	and	r22, r22
    1e4e:	71 f0       	breq	.+28     	; 0x1e6c <__floatsisf+0x74>
    1e50:	96 e8       	ldi	r25, 0x86	; 134
    1e52:	86 2f       	mov	r24, r22
    1e54:	70 e0       	ldi	r23, 0x00	; 0
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	2a f0       	brmi	.+10     	; 0x1e64 <__floatsisf+0x6c>
    1e5a:	9a 95       	dec	r25
    1e5c:	66 0f       	add	r22, r22
    1e5e:	77 1f       	adc	r23, r23
    1e60:	88 1f       	adc	r24, r24
    1e62:	da f7       	brpl	.-10     	; 0x1e5a <__floatsisf+0x62>
    1e64:	88 0f       	add	r24, r24
    1e66:	96 95       	lsr	r25
    1e68:	87 95       	ror	r24
    1e6a:	97 f9       	bld	r25, 7
    1e6c:	08 95       	ret

00001e6e <__fp_inf>:
    1e6e:	97 f9       	bld	r25, 7
    1e70:	9f 67       	ori	r25, 0x7F	; 127
    1e72:	80 e8       	ldi	r24, 0x80	; 128
    1e74:	70 e0       	ldi	r23, 0x00	; 0
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	08 95       	ret

00001e7a <__fp_nan>:
    1e7a:	9f ef       	ldi	r25, 0xFF	; 255
    1e7c:	80 ec       	ldi	r24, 0xC0	; 192
    1e7e:	08 95       	ret

00001e80 <__fp_pscA>:
    1e80:	00 24       	eor	r0, r0
    1e82:	0a 94       	dec	r0
    1e84:	16 16       	cp	r1, r22
    1e86:	17 06       	cpc	r1, r23
    1e88:	18 06       	cpc	r1, r24
    1e8a:	09 06       	cpc	r0, r25
    1e8c:	08 95       	ret

00001e8e <__fp_pscB>:
    1e8e:	00 24       	eor	r0, r0
    1e90:	0a 94       	dec	r0
    1e92:	12 16       	cp	r1, r18
    1e94:	13 06       	cpc	r1, r19
    1e96:	14 06       	cpc	r1, r20
    1e98:	05 06       	cpc	r0, r21
    1e9a:	08 95       	ret

00001e9c <__fp_round>:
    1e9c:	09 2e       	mov	r0, r25
    1e9e:	03 94       	inc	r0
    1ea0:	00 0c       	add	r0, r0
    1ea2:	11 f4       	brne	.+4      	; 0x1ea8 <__fp_round+0xc>
    1ea4:	88 23       	and	r24, r24
    1ea6:	52 f0       	brmi	.+20     	; 0x1ebc <__fp_round+0x20>
    1ea8:	bb 0f       	add	r27, r27
    1eaa:	40 f4       	brcc	.+16     	; 0x1ebc <__fp_round+0x20>
    1eac:	bf 2b       	or	r27, r31
    1eae:	11 f4       	brne	.+4      	; 0x1eb4 <__fp_round+0x18>
    1eb0:	60 ff       	sbrs	r22, 0
    1eb2:	04 c0       	rjmp	.+8      	; 0x1ebc <__fp_round+0x20>
    1eb4:	6f 5f       	subi	r22, 0xFF	; 255
    1eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eba:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebc:	08 95       	ret

00001ebe <__fp_split3>:
    1ebe:	57 fd       	sbrc	r21, 7
    1ec0:	90 58       	subi	r25, 0x80	; 128
    1ec2:	44 0f       	add	r20, r20
    1ec4:	55 1f       	adc	r21, r21
    1ec6:	59 f0       	breq	.+22     	; 0x1ede <__fp_splitA+0x10>
    1ec8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eca:	71 f0       	breq	.+28     	; 0x1ee8 <__fp_splitA+0x1a>
    1ecc:	47 95       	ror	r20

00001ece <__fp_splitA>:
    1ece:	88 0f       	add	r24, r24
    1ed0:	97 fb       	bst	r25, 7
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	61 f0       	breq	.+24     	; 0x1eee <__fp_splitA+0x20>
    1ed6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ed8:	79 f0       	breq	.+30     	; 0x1ef8 <__fp_splitA+0x2a>
    1eda:	87 95       	ror	r24
    1edc:	08 95       	ret
    1ede:	12 16       	cp	r1, r18
    1ee0:	13 06       	cpc	r1, r19
    1ee2:	14 06       	cpc	r1, r20
    1ee4:	55 1f       	adc	r21, r21
    1ee6:	f2 cf       	rjmp	.-28     	; 0x1ecc <__fp_split3+0xe>
    1ee8:	46 95       	lsr	r20
    1eea:	f1 df       	rcall	.-30     	; 0x1ece <__fp_splitA>
    1eec:	08 c0       	rjmp	.+16     	; 0x1efe <__fp_splitA+0x30>
    1eee:	16 16       	cp	r1, r22
    1ef0:	17 06       	cpc	r1, r23
    1ef2:	18 06       	cpc	r1, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	f1 cf       	rjmp	.-30     	; 0x1eda <__fp_splitA+0xc>
    1ef8:	86 95       	lsr	r24
    1efa:	71 05       	cpc	r23, r1
    1efc:	61 05       	cpc	r22, r1
    1efe:	08 94       	sec
    1f00:	08 95       	ret

00001f02 <__fp_zero>:
    1f02:	e8 94       	clt

00001f04 <__fp_szero>:
    1f04:	bb 27       	eor	r27, r27
    1f06:	66 27       	eor	r22, r22
    1f08:	77 27       	eor	r23, r23
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	97 f9       	bld	r25, 7
    1f0e:	08 95       	ret

00001f10 <__gesf2>:
    1f10:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__fp_cmp>
    1f14:	08 f4       	brcc	.+2      	; 0x1f18 <__gesf2+0x8>
    1f16:	8f ef       	ldi	r24, 0xFF	; 255
    1f18:	08 95       	ret

00001f1a <__mulsf3>:
    1f1a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__mulsf3x>
    1f1e:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__fp_round>
    1f22:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__fp_pscA>
    1f26:	38 f0       	brcs	.+14     	; 0x1f36 <__mulsf3+0x1c>
    1f28:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__fp_pscB>
    1f2c:	20 f0       	brcs	.+8      	; 0x1f36 <__mulsf3+0x1c>
    1f2e:	95 23       	and	r25, r21
    1f30:	11 f0       	breq	.+4      	; 0x1f36 <__mulsf3+0x1c>
    1f32:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__fp_inf>
    1f36:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <__fp_nan>
    1f3a:	11 24       	eor	r1, r1
    1f3c:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__fp_szero>

00001f40 <__mulsf3x>:
    1f40:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__fp_split3>
    1f44:	70 f3       	brcs	.-36     	; 0x1f22 <__mulsf3+0x8>

00001f46 <__mulsf3_pse>:
    1f46:	95 9f       	mul	r25, r21
    1f48:	c1 f3       	breq	.-16     	; 0x1f3a <__mulsf3+0x20>
    1f4a:	95 0f       	add	r25, r21
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	55 1f       	adc	r21, r21
    1f50:	62 9f       	mul	r22, r18
    1f52:	f0 01       	movw	r30, r0
    1f54:	72 9f       	mul	r23, r18
    1f56:	bb 27       	eor	r27, r27
    1f58:	f0 0d       	add	r31, r0
    1f5a:	b1 1d       	adc	r27, r1
    1f5c:	63 9f       	mul	r22, r19
    1f5e:	aa 27       	eor	r26, r26
    1f60:	f0 0d       	add	r31, r0
    1f62:	b1 1d       	adc	r27, r1
    1f64:	aa 1f       	adc	r26, r26
    1f66:	64 9f       	mul	r22, r20
    1f68:	66 27       	eor	r22, r22
    1f6a:	b0 0d       	add	r27, r0
    1f6c:	a1 1d       	adc	r26, r1
    1f6e:	66 1f       	adc	r22, r22
    1f70:	82 9f       	mul	r24, r18
    1f72:	22 27       	eor	r18, r18
    1f74:	b0 0d       	add	r27, r0
    1f76:	a1 1d       	adc	r26, r1
    1f78:	62 1f       	adc	r22, r18
    1f7a:	73 9f       	mul	r23, r19
    1f7c:	b0 0d       	add	r27, r0
    1f7e:	a1 1d       	adc	r26, r1
    1f80:	62 1f       	adc	r22, r18
    1f82:	83 9f       	mul	r24, r19
    1f84:	a0 0d       	add	r26, r0
    1f86:	61 1d       	adc	r22, r1
    1f88:	22 1f       	adc	r18, r18
    1f8a:	74 9f       	mul	r23, r20
    1f8c:	33 27       	eor	r19, r19
    1f8e:	a0 0d       	add	r26, r0
    1f90:	61 1d       	adc	r22, r1
    1f92:	23 1f       	adc	r18, r19
    1f94:	84 9f       	mul	r24, r20
    1f96:	60 0d       	add	r22, r0
    1f98:	21 1d       	adc	r18, r1
    1f9a:	82 2f       	mov	r24, r18
    1f9c:	76 2f       	mov	r23, r22
    1f9e:	6a 2f       	mov	r22, r26
    1fa0:	11 24       	eor	r1, r1
    1fa2:	9f 57       	subi	r25, 0x7F	; 127
    1fa4:	50 40       	sbci	r21, 0x00	; 0
    1fa6:	9a f0       	brmi	.+38     	; 0x1fce <__mulsf3_pse+0x88>
    1fa8:	f1 f0       	breq	.+60     	; 0x1fe6 <__mulsf3_pse+0xa0>
    1faa:	88 23       	and	r24, r24
    1fac:	4a f0       	brmi	.+18     	; 0x1fc0 <__mulsf3_pse+0x7a>
    1fae:	ee 0f       	add	r30, r30
    1fb0:	ff 1f       	adc	r31, r31
    1fb2:	bb 1f       	adc	r27, r27
    1fb4:	66 1f       	adc	r22, r22
    1fb6:	77 1f       	adc	r23, r23
    1fb8:	88 1f       	adc	r24, r24
    1fba:	91 50       	subi	r25, 0x01	; 1
    1fbc:	50 40       	sbci	r21, 0x00	; 0
    1fbe:	a9 f7       	brne	.-22     	; 0x1faa <__mulsf3_pse+0x64>
    1fc0:	9e 3f       	cpi	r25, 0xFE	; 254
    1fc2:	51 05       	cpc	r21, r1
    1fc4:	80 f0       	brcs	.+32     	; 0x1fe6 <__mulsf3_pse+0xa0>
    1fc6:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__fp_inf>
    1fca:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__fp_szero>
    1fce:	5f 3f       	cpi	r21, 0xFF	; 255
    1fd0:	e4 f3       	brlt	.-8      	; 0x1fca <__mulsf3_pse+0x84>
    1fd2:	98 3e       	cpi	r25, 0xE8	; 232
    1fd4:	d4 f3       	brlt	.-12     	; 0x1fca <__mulsf3_pse+0x84>
    1fd6:	86 95       	lsr	r24
    1fd8:	77 95       	ror	r23
    1fda:	67 95       	ror	r22
    1fdc:	b7 95       	ror	r27
    1fde:	f7 95       	ror	r31
    1fe0:	e7 95       	ror	r30
    1fe2:	9f 5f       	subi	r25, 0xFF	; 255
    1fe4:	c1 f7       	brne	.-16     	; 0x1fd6 <__mulsf3_pse+0x90>
    1fe6:	fe 2b       	or	r31, r30
    1fe8:	88 0f       	add	r24, r24
    1fea:	91 1d       	adc	r25, r1
    1fec:	96 95       	lsr	r25
    1fee:	87 95       	ror	r24
    1ff0:	97 f9       	bld	r25, 7
    1ff2:	08 95       	ret

00001ff4 <__fp_cmp>:
    1ff4:	99 0f       	add	r25, r25
    1ff6:	00 08       	sbc	r0, r0
    1ff8:	55 0f       	add	r21, r21
    1ffa:	aa 0b       	sbc	r26, r26
    1ffc:	e0 e8       	ldi	r30, 0x80	; 128
    1ffe:	fe ef       	ldi	r31, 0xFE	; 254
    2000:	16 16       	cp	r1, r22
    2002:	17 06       	cpc	r1, r23
    2004:	e8 07       	cpc	r30, r24
    2006:	f9 07       	cpc	r31, r25
    2008:	c0 f0       	brcs	.+48     	; 0x203a <__fp_cmp+0x46>
    200a:	12 16       	cp	r1, r18
    200c:	13 06       	cpc	r1, r19
    200e:	e4 07       	cpc	r30, r20
    2010:	f5 07       	cpc	r31, r21
    2012:	98 f0       	brcs	.+38     	; 0x203a <__fp_cmp+0x46>
    2014:	62 1b       	sub	r22, r18
    2016:	73 0b       	sbc	r23, r19
    2018:	84 0b       	sbc	r24, r20
    201a:	95 0b       	sbc	r25, r21
    201c:	39 f4       	brne	.+14     	; 0x202c <__fp_cmp+0x38>
    201e:	0a 26       	eor	r0, r26
    2020:	61 f0       	breq	.+24     	; 0x203a <__fp_cmp+0x46>
    2022:	23 2b       	or	r18, r19
    2024:	24 2b       	or	r18, r20
    2026:	25 2b       	or	r18, r21
    2028:	21 f4       	brne	.+8      	; 0x2032 <__fp_cmp+0x3e>
    202a:	08 95       	ret
    202c:	0a 26       	eor	r0, r26
    202e:	09 f4       	brne	.+2      	; 0x2032 <__fp_cmp+0x3e>
    2030:	a1 40       	sbci	r26, 0x01	; 1
    2032:	a6 95       	lsr	r26
    2034:	8f ef       	ldi	r24, 0xFF	; 255
    2036:	81 1d       	adc	r24, r1
    2038:	81 1d       	adc	r24, r1
    203a:	08 95       	ret

0000203c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    203c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    203e:	91 8d       	ldd	r25, Z+25	; 0x19
    2040:	22 8d       	ldd	r18, Z+26	; 0x1a
    2042:	89 2f       	mov	r24, r25
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	80 5c       	subi	r24, 0xC0	; 192
    2048:	9f 4f       	sbci	r25, 0xFF	; 255
    204a:	82 1b       	sub	r24, r18
    204c:	91 09       	sbc	r25, r1
}
    204e:	8f 73       	andi	r24, 0x3F	; 63
    2050:	99 27       	eor	r25, r25
    2052:	08 95       	ret

00002054 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2054:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2056:	91 8d       	ldd	r25, Z+25	; 0x19
    2058:	82 8d       	ldd	r24, Z+26	; 0x1a
    205a:	98 17       	cp	r25, r24
    205c:	31 f0       	breq	.+12     	; 0x206a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    205e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2060:	e8 0f       	add	r30, r24
    2062:	f1 1d       	adc	r31, r1
    2064:	85 8d       	ldd	r24, Z+29	; 0x1d
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    206a:	8f ef       	ldi	r24, 0xFF	; 255
    206c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    206e:	08 95       	ret

00002070 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2070:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2072:	91 8d       	ldd	r25, Z+25	; 0x19
    2074:	82 8d       	ldd	r24, Z+26	; 0x1a
    2076:	98 17       	cp	r25, r24
    2078:	61 f0       	breq	.+24     	; 0x2092 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    207a:	82 8d       	ldd	r24, Z+26	; 0x1a
    207c:	df 01       	movw	r26, r30
    207e:	a8 0f       	add	r26, r24
    2080:	b1 1d       	adc	r27, r1
    2082:	5d 96       	adiw	r26, 0x1d	; 29
    2084:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2086:	92 8d       	ldd	r25, Z+26	; 0x1a
    2088:	9f 5f       	subi	r25, 0xFF	; 255
    208a:	9f 73       	andi	r25, 0x3F	; 63
    208c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2092:	8f ef       	ldi	r24, 0xFF	; 255
    2094:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2096:	08 95       	ret

00002098 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    2098:	fc 01       	movw	r30, r24
    209a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    209c:	44 8d       	ldd	r20, Z+28	; 0x1c
    209e:	25 2f       	mov	r18, r21
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	84 2f       	mov	r24, r20
    20a4:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    20a6:	82 1b       	sub	r24, r18
    20a8:	93 0b       	sbc	r25, r19
    20aa:	54 17       	cp	r21, r20
    20ac:	10 f0       	brcs	.+4      	; 0x20b2 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    20ae:	cf 96       	adiw	r24, 0x3f	; 63
    20b0:	08 95       	ret
  return tail - head - 1;
    20b2:	01 97       	sbiw	r24, 0x01	; 1
}
    20b4:	08 95       	ret

000020b6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    20b6:	8a eb       	ldi	r24, 0xBA	; 186
    20b8:	91 e1       	ldi	r25, 0x11	; 17
    20ba:	89 2b       	or	r24, r25
    20bc:	49 f0       	breq	.+18     	; 0x20d0 <_Z14serialEventRunv+0x1a>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	89 2b       	or	r24, r25
    20c4:	29 f0       	breq	.+10     	; 0x20d0 <_Z14serialEventRunv+0x1a>
    20c6:	0e 94 ba 11 	call	0x2374	; 0x2374 <_Z17Serial0_availablev>
    20ca:	81 11       	cpse	r24, r1
    20cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    20d0:	08 95       	ret

000020d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    20d2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    20d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    20d6:	df 01       	movw	r26, r30
    20d8:	a8 0f       	add	r26, r24
    20da:	b1 1d       	adc	r27, r1
    20dc:	a3 5a       	subi	r26, 0xA3	; 163
    20de:	bf 4f       	sbci	r27, 0xFF	; 255
    20e0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    20e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	01 96       	adiw	r24, 0x01	; 1
    20e8:	8f 73       	andi	r24, 0x3F	; 63
    20ea:	99 27       	eor	r25, r25
    20ec:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    20ee:	a6 89       	ldd	r26, Z+22	; 0x16
    20f0:	b7 89       	ldd	r27, Z+23	; 0x17
    20f2:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    20f4:	a0 89       	ldd	r26, Z+16	; 0x10
    20f6:	b1 89       	ldd	r27, Z+17	; 0x11
    20f8:	8c 91       	ld	r24, X
    20fa:	83 70       	andi	r24, 0x03	; 3
    20fc:	80 64       	ori	r24, 0x40	; 64
    20fe:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    2100:	93 8d       	ldd	r25, Z+27	; 0x1b
    2102:	84 8d       	ldd	r24, Z+28	; 0x1c
    2104:	98 13       	cpse	r25, r24
    2106:	06 c0       	rjmp	.+12     	; 0x2114 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2108:	02 88       	ldd	r0, Z+18	; 0x12
    210a:	f3 89       	ldd	r31, Z+19	; 0x13
    210c:	e0 2d       	mov	r30, r0
    210e:	80 81       	ld	r24, Z
    2110:	8f 7d       	andi	r24, 0xDF	; 223
    2112:	80 83       	st	Z, r24
    2114:	08 95       	ret

00002116 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	ec 01       	movw	r28, r24
  _written = true;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2128:	9b 8d       	ldd	r25, Y+27	; 0x1b
    212a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    212c:	98 13       	cpse	r25, r24
    212e:	05 c0       	rjmp	.+10     	; 0x213a <_ZN14HardwareSerial5writeEh+0x24>
    2130:	e8 89       	ldd	r30, Y+16	; 0x10
    2132:	f9 89       	ldd	r31, Y+17	; 0x11
    2134:	80 81       	ld	r24, Z
    2136:	85 fd       	sbrc	r24, 5
    2138:	26 c0       	rjmp	.+76     	; 0x2186 <_ZN14HardwareSerial5writeEh+0x70>
    213a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    213c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    213e:	10 e0       	ldi	r17, 0x00	; 0
    2140:	0f 5f       	subi	r16, 0xFF	; 255
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
    2144:	0f 73       	andi	r16, 0x3F	; 63
    2146:	11 27       	eor	r17, r17
    2148:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    214a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    214c:	e8 12       	cpse	r14, r24
    214e:	0c c0       	rjmp	.+24     	; 0x2168 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	07 fc       	sbrc	r0, 7
    2154:	fa cf       	rjmp	.-12     	; 0x214a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2156:	e8 89       	ldd	r30, Y+16	; 0x10
    2158:	f9 89       	ldd	r31, Y+17	; 0x11
    215a:	80 81       	ld	r24, Z
    215c:	85 ff       	sbrs	r24, 5
    215e:	f5 cf       	rjmp	.-22     	; 0x214a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2160:	ce 01       	movw	r24, r28
    2162:	0e 94 69 10 	call	0x20d2	; 0x20d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2166:	f1 cf       	rjmp	.-30     	; 0x214a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2168:	8b 8d       	ldd	r24, Y+27	; 0x1b
    216a:	fe 01       	movw	r30, r28
    216c:	e8 0f       	add	r30, r24
    216e:	f1 1d       	adc	r31, r1
    2170:	e3 5a       	subi	r30, 0xA3	; 163
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2176:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2178:	f8 94       	cli
    _tx_buffer_head = i;
    217a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    217c:	ea 89       	ldd	r30, Y+18	; 0x12
    217e:	fb 89       	ldd	r31, Y+19	; 0x13
    2180:	80 81       	ld	r24, Z
    2182:	80 62       	ori	r24, 0x20	; 32
    2184:	0a c0       	rjmp	.+20     	; 0x219a <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2186:	9f b7       	in	r25, 0x3f	; 63
    2188:	f8 94       	cli
      *_udr = c;
    218a:	ee 89       	ldd	r30, Y+22	; 0x16
    218c:	ff 89       	ldd	r31, Y+23	; 0x17
    218e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2190:	e8 89       	ldd	r30, Y+16	; 0x10
    2192:	f9 89       	ldd	r31, Y+17	; 0x11
    2194:	80 81       	ld	r24, Z
    2196:	83 70       	andi	r24, 0x03	; 3
    2198:	80 64       	ori	r24, 0x40	; 64
    219a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    219c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	ff 90       	pop	r15
    21ac:	ef 90       	pop	r14
    21ae:	08 95       	ret

000021b0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    21b6:	88 8d       	ldd	r24, Y+24	; 0x18
    21b8:	88 23       	and	r24, r24
    21ba:	c9 f0       	breq	.+50     	; 0x21ee <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    21bc:	ea 89       	ldd	r30, Y+18	; 0x12
    21be:	fb 89       	ldd	r31, Y+19	; 0x13
    21c0:	80 81       	ld	r24, Z
    21c2:	85 fd       	sbrc	r24, 5
    21c4:	05 c0       	rjmp	.+10     	; 0x21d0 <_ZN14HardwareSerial5flushEv+0x20>
    21c6:	a8 89       	ldd	r26, Y+16	; 0x10
    21c8:	b9 89       	ldd	r27, Y+17	; 0x11
    21ca:	8c 91       	ld	r24, X
    21cc:	86 fd       	sbrc	r24, 6
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	07 fc       	sbrc	r0, 7
    21d4:	f5 cf       	rjmp	.-22     	; 0x21c0 <_ZN14HardwareSerial5flushEv+0x10>
    21d6:	80 81       	ld	r24, Z
    21d8:	85 ff       	sbrs	r24, 5
    21da:	f2 cf       	rjmp	.-28     	; 0x21c0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    21dc:	a8 89       	ldd	r26, Y+16	; 0x10
    21de:	b9 89       	ldd	r27, Y+17	; 0x11
    21e0:	8c 91       	ld	r24, X
    21e2:	85 ff       	sbrs	r24, 5
    21e4:	ed cf       	rjmp	.-38     	; 0x21c0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    21e6:	ce 01       	movw	r24, r28
    21e8:	0e 94 69 10 	call	0x20d2	; 0x20d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    21ec:	e7 cf       	rjmp	.-50     	; 0x21bc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	08 95       	ret

000021f4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    21f4:	cf 92       	push	r12
    21f6:	df 92       	push	r13
    21f8:	ef 92       	push	r14
    21fa:	ff 92       	push	r15
    21fc:	1f 93       	push	r17
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	ec 01       	movw	r28, r24
    2204:	6a 01       	movw	r12, r20
    2206:	7b 01       	movw	r14, r22
    2208:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    220a:	e8 89       	ldd	r30, Y+16	; 0x10
    220c:	f9 89       	ldd	r31, Y+17	; 0x11
    220e:	82 e0       	ldi	r24, 0x02	; 2
    2210:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2212:	41 15       	cp	r20, r1
    2214:	51 4e       	sbci	r21, 0xE1	; 225
    2216:	61 05       	cpc	r22, r1
    2218:	71 05       	cpc	r23, r1
    221a:	b1 f0       	breq	.+44     	; 0x2248 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	79 e0       	ldi	r23, 0x09	; 9
    2220:	8d e3       	ldi	r24, 0x3D	; 61
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	a7 01       	movw	r20, r14
    2226:	96 01       	movw	r18, r12
    2228:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <__udivmodsi4>
    222c:	da 01       	movw	r26, r20
    222e:	c9 01       	movw	r24, r18
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	a1 09       	sbc	r26, r1
    2234:	b1 09       	sbc	r27, r1
    2236:	b6 95       	lsr	r27
    2238:	a7 95       	ror	r26
    223a:	97 95       	ror	r25
    223c:	87 95       	ror	r24
    223e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2240:	21 15       	cp	r18, r1
    2242:	80 e1       	ldi	r24, 0x10	; 16
    2244:	38 07       	cpc	r19, r24
    2246:	a8 f0       	brcs	.+42     	; 0x2272 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2248:	e8 89       	ldd	r30, Y+16	; 0x10
    224a:	f9 89       	ldd	r31, Y+17	; 0x11
    224c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    224e:	60 e8       	ldi	r22, 0x80	; 128
    2250:	74 e8       	ldi	r23, 0x84	; 132
    2252:	8e e1       	ldi	r24, 0x1E	; 30
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	a7 01       	movw	r20, r14
    2258:	96 01       	movw	r18, r12
    225a:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <__udivmodsi4>
    225e:	da 01       	movw	r26, r20
    2260:	c9 01       	movw	r24, r18
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	a1 09       	sbc	r26, r1
    2266:	b1 09       	sbc	r27, r1
    2268:	b6 95       	lsr	r27
    226a:	a7 95       	ror	r26
    226c:	97 95       	ror	r25
    226e:	87 95       	ror	r24
    2270:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2272:	ec 85       	ldd	r30, Y+12	; 0x0c
    2274:	fd 85       	ldd	r31, Y+13	; 0x0d
    2276:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2278:	ee 85       	ldd	r30, Y+14	; 0x0e
    227a:	ff 85       	ldd	r31, Y+15	; 0x0f
    227c:	20 83       	st	Z, r18

  _written = false;
    227e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2280:	ec 89       	ldd	r30, Y+20	; 0x14
    2282:	fd 89       	ldd	r31, Y+21	; 0x15
    2284:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2286:	ea 89       	ldd	r30, Y+18	; 0x12
    2288:	fb 89       	ldd	r31, Y+19	; 0x13
    228a:	80 81       	ld	r24, Z
    228c:	80 61       	ori	r24, 0x10	; 16
    228e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2290:	ea 89       	ldd	r30, Y+18	; 0x12
    2292:	fb 89       	ldd	r31, Y+19	; 0x13
    2294:	80 81       	ld	r24, Z
    2296:	88 60       	ori	r24, 0x08	; 8
    2298:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    229a:	ea 89       	ldd	r30, Y+18	; 0x12
    229c:	fb 89       	ldd	r31, Y+19	; 0x13
    229e:	80 81       	ld	r24, Z
    22a0:	80 68       	ori	r24, 0x80	; 128
    22a2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    22a4:	ea 89       	ldd	r30, Y+18	; 0x12
    22a6:	fb 89       	ldd	r31, Y+19	; 0x13
    22a8:	80 81       	ld	r24, Z
    22aa:	8f 7d       	andi	r24, 0xDF	; 223
    22ac:	80 83       	st	Z, r24
}
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	1f 91       	pop	r17
    22b4:	ff 90       	pop	r15
    22b6:	ef 90       	pop	r14
    22b8:	df 90       	pop	r13
    22ba:	cf 90       	pop	r12
    22bc:	08 95       	ret

000022be <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	08 95       	ret

000022c4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    22c4:	1f 92       	push	r1
    22c6:	0f 92       	push	r0
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	0f 92       	push	r0
    22cc:	11 24       	eor	r1, r1
    22ce:	2f 93       	push	r18
    22d0:	8f 93       	push	r24
    22d2:	9f 93       	push	r25
    22d4:	ef 93       	push	r30
    22d6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    22d8:	e0 91 f4 04 	lds	r30, 0x04F4	; 0x8004f4 <Serial+0x10>
    22dc:	f0 91 f5 04 	lds	r31, 0x04F5	; 0x8004f5 <Serial+0x11>
    22e0:	80 81       	ld	r24, Z
    22e2:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <Serial+0x16>
    22e6:	f0 91 fb 04 	lds	r31, 0x04FB	; 0x8004fb <Serial+0x17>
    22ea:	82 fd       	sbrc	r24, 2
    22ec:	12 c0       	rjmp	.+36     	; 0x2312 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    22ee:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    22f0:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <Serial+0x19>
    22f4:	8f 5f       	subi	r24, 0xFF	; 255
    22f6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    22f8:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <Serial+0x1a>
    22fc:	82 17       	cp	r24, r18
    22fe:	51 f0       	breq	.+20     	; 0x2314 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2300:	e0 91 fd 04 	lds	r30, 0x04FD	; 0x8004fd <Serial+0x19>
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	ec 51       	subi	r30, 0x1C	; 28
    2308:	fb 4f       	sbci	r31, 0xFB	; 251
    230a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    230c:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <Serial+0x19>
    2310:	01 c0       	rjmp	.+2      	; 0x2314 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2312:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2314:	ff 91       	pop	r31
    2316:	ef 91       	pop	r30
    2318:	9f 91       	pop	r25
    231a:	8f 91       	pop	r24
    231c:	2f 91       	pop	r18
    231e:	0f 90       	pop	r0
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	0f 90       	pop	r0
    2324:	1f 90       	pop	r1
    2326:	18 95       	reti

00002328 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2328:	1f 92       	push	r1
    232a:	0f 92       	push	r0
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	0f 92       	push	r0
    2330:	11 24       	eor	r1, r1
    2332:	2f 93       	push	r18
    2334:	3f 93       	push	r19
    2336:	4f 93       	push	r20
    2338:	5f 93       	push	r21
    233a:	6f 93       	push	r22
    233c:	7f 93       	push	r23
    233e:	8f 93       	push	r24
    2340:	9f 93       	push	r25
    2342:	af 93       	push	r26
    2344:	bf 93       	push	r27
    2346:	ef 93       	push	r30
    2348:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    234a:	84 ee       	ldi	r24, 0xE4	; 228
    234c:	94 e0       	ldi	r25, 0x04	; 4
    234e:	0e 94 69 10 	call	0x20d2	; 0x20d2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2352:	ff 91       	pop	r31
    2354:	ef 91       	pop	r30
    2356:	bf 91       	pop	r27
    2358:	af 91       	pop	r26
    235a:	9f 91       	pop	r25
    235c:	8f 91       	pop	r24
    235e:	7f 91       	pop	r23
    2360:	6f 91       	pop	r22
    2362:	5f 91       	pop	r21
    2364:	4f 91       	pop	r20
    2366:	3f 91       	pop	r19
    2368:	2f 91       	pop	r18
    236a:	0f 90       	pop	r0
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	0f 90       	pop	r0
    2370:	1f 90       	pop	r1
    2372:	18 95       	reti

00002374 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2374:	84 ee       	ldi	r24, 0xE4	; 228
    2376:	94 e0       	ldi	r25, 0x04	; 4
    2378:	0e 94 1e 10 	call	0x203c	; 0x203c <_ZN14HardwareSerial9availableEv>
    237c:	21 e0       	ldi	r18, 0x01	; 1
    237e:	89 2b       	or	r24, r25
    2380:	09 f4       	brne	.+2      	; 0x2384 <_Z17Serial0_availablev+0x10>
    2382:	20 e0       	ldi	r18, 0x00	; 0
}
    2384:	82 2f       	mov	r24, r18
    2386:	08 95       	ret

00002388 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2388:	e4 ee       	ldi	r30, 0xE4	; 228
    238a:	f4 e0       	ldi	r31, 0x04	; 4
    238c:	13 82       	std	Z+3, r1	; 0x03
    238e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2390:	88 ee       	ldi	r24, 0xE8	; 232
    2392:	93 e0       	ldi	r25, 0x03	; 3
    2394:	a0 e0       	ldi	r26, 0x00	; 0
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	84 83       	std	Z+4, r24	; 0x04
    239a:	95 83       	std	Z+5, r25	; 0x05
    239c:	a6 83       	std	Z+6, r26	; 0x06
    239e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    23a0:	8e e0       	ldi	r24, 0x0E	; 14
    23a2:	91 e0       	ldi	r25, 0x01	; 1
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	80 83       	st	Z, r24
    23a8:	85 ec       	ldi	r24, 0xC5	; 197
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	95 87       	std	Z+13, r25	; 0x0d
    23ae:	84 87       	std	Z+12, r24	; 0x0c
    23b0:	84 ec       	ldi	r24, 0xC4	; 196
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	97 87       	std	Z+15, r25	; 0x0f
    23b6:	86 87       	std	Z+14, r24	; 0x0e
    23b8:	80 ec       	ldi	r24, 0xC0	; 192
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	91 8b       	std	Z+17, r25	; 0x11
    23be:	80 8b       	std	Z+16, r24	; 0x10
    23c0:	81 ec       	ldi	r24, 0xC1	; 193
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	93 8b       	std	Z+19, r25	; 0x13
    23c6:	82 8b       	std	Z+18, r24	; 0x12
    23c8:	82 ec       	ldi	r24, 0xC2	; 194
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	95 8b       	std	Z+21, r25	; 0x15
    23ce:	84 8b       	std	Z+20, r24	; 0x14
    23d0:	86 ec       	ldi	r24, 0xC6	; 198
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	97 8b       	std	Z+23, r25	; 0x17
    23d6:	86 8b       	std	Z+22, r24	; 0x16
    23d8:	11 8e       	std	Z+25, r1	; 0x19
    23da:	12 8e       	std	Z+26, r1	; 0x1a
    23dc:	13 8e       	std	Z+27, r1	; 0x1b
    23de:	14 8e       	std	Z+28, r1	; 0x1c
    23e0:	08 95       	ret

000023e2 <initVariant>:
    23e2:	08 95       	ret

000023e4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    23e4:	0e 94 e6 12 	call	0x25cc	; 0x25cc <init>

	initVariant();
    23e8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    23ec:	0e 94 cd 05 	call	0xb9a	; 0xb9a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    23f0:	cb e5       	ldi	r28, 0x5B	; 91
    23f2:	d0 e1       	ldi	r29, 0x10	; 16
#endif
	
	setup();
    
	for (;;) {
		loop();
    23f4:	0e 94 0b 06 	call	0xc16	; 0xc16 <loop>
		if (serialEventRun) serialEventRun();
    23f8:	20 97       	sbiw	r28, 0x00	; 0
    23fa:	e1 f3       	breq	.-8      	; 0x23f4 <main+0x10>
    23fc:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <_Z14serialEventRunv>
    2400:	f9 cf       	rjmp	.-14     	; 0x23f4 <main+0x10>

00002402 <_Znwj>:
    2402:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <malloc>

00002406 <_ZdaPv>:
void operator delete(void * ptr) {
  free(ptr);
}

void operator delete[](void * ptr) {
  free(ptr);
    2406:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <free>

0000240a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    240a:	cf 92       	push	r12
    240c:	df 92       	push	r13
    240e:	ef 92       	push	r14
    2410:	ff 92       	push	r15
    2412:	0f 93       	push	r16
    2414:	1f 93       	push	r17
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    241a:	6c 01       	movw	r12, r24
    241c:	7a 01       	movw	r14, r20
    241e:	8b 01       	movw	r16, r22
  size_t n = 0;
    2420:	c0 e0       	ldi	r28, 0x00	; 0
    2422:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    2424:	ce 15       	cp	r28, r14
    2426:	df 05       	cpc	r29, r15
    2428:	81 f0       	breq	.+32     	; 0x244a <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
    242a:	d8 01       	movw	r26, r16
    242c:	6d 91       	ld	r22, X+
    242e:	8d 01       	movw	r16, r26
    2430:	d6 01       	movw	r26, r12
    2432:	ed 91       	ld	r30, X+
    2434:	fc 91       	ld	r31, X
    2436:	01 90       	ld	r0, Z+
    2438:	f0 81       	ld	r31, Z
    243a:	e0 2d       	mov	r30, r0
    243c:	c6 01       	movw	r24, r12
    243e:	09 95       	icall
    2440:	89 2b       	or	r24, r25
    2442:	11 f0       	breq	.+4      	; 0x2448 <_ZN5Print5writeEPKhj+0x3e>
    2444:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    2446:	ee cf       	rjmp	.-36     	; 0x2424 <_ZN5Print5writeEPKhj+0x1a>
    2448:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
    244a:	c7 01       	movw	r24, r14
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	1f 91       	pop	r17
    2452:	0f 91       	pop	r16
    2454:	ff 90       	pop	r15
    2456:	ef 90       	pop	r14
    2458:	df 90       	pop	r13
    245a:	cf 90       	pop	r12
    245c:	08 95       	ret

0000245e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    245e:	1f 92       	push	r1
    2460:	0f 92       	push	r0
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	0f 92       	push	r0
    2466:	11 24       	eor	r1, r1
    2468:	2f 93       	push	r18
    246a:	3f 93       	push	r19
    246c:	8f 93       	push	r24
    246e:	9f 93       	push	r25
    2470:	af 93       	push	r26
    2472:	bf 93       	push	r27
    2474:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <timer0_millis>
    2478:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <timer0_millis+0x1>
    247c:	a0 91 84 05 	lds	r26, 0x0584	; 0x800584 <timer0_millis+0x2>
    2480:	b0 91 85 05 	lds	r27, 0x0585	; 0x800585 <timer0_millis+0x3>
    2484:	30 91 81 05 	lds	r19, 0x0581	; 0x800581 <timer0_fract>
    2488:	23 e0       	ldi	r18, 0x03	; 3
    248a:	23 0f       	add	r18, r19
    248c:	2d 37       	cpi	r18, 0x7D	; 125
    248e:	20 f4       	brcc	.+8      	; 0x2498 <__vector_16+0x3a>
    2490:	01 96       	adiw	r24, 0x01	; 1
    2492:	a1 1d       	adc	r26, r1
    2494:	b1 1d       	adc	r27, r1
    2496:	05 c0       	rjmp	.+10     	; 0x24a2 <__vector_16+0x44>
    2498:	26 e8       	ldi	r18, 0x86	; 134
    249a:	23 0f       	add	r18, r19
    249c:	02 96       	adiw	r24, 0x02	; 2
    249e:	a1 1d       	adc	r26, r1
    24a0:	b1 1d       	adc	r27, r1
    24a2:	20 93 81 05 	sts	0x0581, r18	; 0x800581 <timer0_fract>
    24a6:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <timer0_millis>
    24aa:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <timer0_millis+0x1>
    24ae:	a0 93 84 05 	sts	0x0584, r26	; 0x800584 <timer0_millis+0x2>
    24b2:	b0 93 85 05 	sts	0x0585, r27	; 0x800585 <timer0_millis+0x3>
    24b6:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <timer0_overflow_count>
    24ba:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <timer0_overflow_count+0x1>
    24be:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <timer0_overflow_count+0x2>
    24c2:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <timer0_overflow_count+0x3>
    24c6:	01 96       	adiw	r24, 0x01	; 1
    24c8:	a1 1d       	adc	r26, r1
    24ca:	b1 1d       	adc	r27, r1
    24cc:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <timer0_overflow_count>
    24d0:	90 93 87 05 	sts	0x0587, r25	; 0x800587 <timer0_overflow_count+0x1>
    24d4:	a0 93 88 05 	sts	0x0588, r26	; 0x800588 <timer0_overflow_count+0x2>
    24d8:	b0 93 89 05 	sts	0x0589, r27	; 0x800589 <timer0_overflow_count+0x3>
    24dc:	bf 91       	pop	r27
    24de:	af 91       	pop	r26
    24e0:	9f 91       	pop	r25
    24e2:	8f 91       	pop	r24
    24e4:	3f 91       	pop	r19
    24e6:	2f 91       	pop	r18
    24e8:	0f 90       	pop	r0
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	0f 90       	pop	r0
    24ee:	1f 90       	pop	r1
    24f0:	18 95       	reti

000024f2 <millis>:
    24f2:	2f b7       	in	r18, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	60 91 82 05 	lds	r22, 0x0582	; 0x800582 <timer0_millis>
    24fa:	70 91 83 05 	lds	r23, 0x0583	; 0x800583 <timer0_millis+0x1>
    24fe:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <timer0_millis+0x2>
    2502:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <timer0_millis+0x3>
    2506:	2f bf       	out	0x3f, r18	; 63
    2508:	08 95       	ret

0000250a <micros>:
    250a:	3f b7       	in	r19, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <timer0_overflow_count>
    2512:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <timer0_overflow_count+0x1>
    2516:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <timer0_overflow_count+0x2>
    251a:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <timer0_overflow_count+0x3>
    251e:	26 b5       	in	r18, 0x26	; 38
    2520:	a8 9b       	sbis	0x15, 0	; 21
    2522:	05 c0       	rjmp	.+10     	; 0x252e <micros+0x24>
    2524:	2f 3f       	cpi	r18, 0xFF	; 255
    2526:	19 f0       	breq	.+6      	; 0x252e <micros+0x24>
    2528:	01 96       	adiw	r24, 0x01	; 1
    252a:	a1 1d       	adc	r26, r1
    252c:	b1 1d       	adc	r27, r1
    252e:	3f bf       	out	0x3f, r19	; 63
    2530:	ba 2f       	mov	r27, r26
    2532:	a9 2f       	mov	r26, r25
    2534:	98 2f       	mov	r25, r24
    2536:	88 27       	eor	r24, r24
    2538:	82 0f       	add	r24, r18
    253a:	91 1d       	adc	r25, r1
    253c:	a1 1d       	adc	r26, r1
    253e:	b1 1d       	adc	r27, r1
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	42 e0       	ldi	r20, 0x02	; 2
    2546:	66 0f       	add	r22, r22
    2548:	77 1f       	adc	r23, r23
    254a:	88 1f       	adc	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	4a 95       	dec	r20
    2550:	d1 f7       	brne	.-12     	; 0x2546 <micros+0x3c>
    2552:	08 95       	ret

00002554 <delay>:
    2554:	8f 92       	push	r8
    2556:	9f 92       	push	r9
    2558:	af 92       	push	r10
    255a:	bf 92       	push	r11
    255c:	cf 92       	push	r12
    255e:	df 92       	push	r13
    2560:	ef 92       	push	r14
    2562:	ff 92       	push	r15
    2564:	6b 01       	movw	r12, r22
    2566:	7c 01       	movw	r14, r24
    2568:	0e 94 85 12 	call	0x250a	; 0x250a <micros>
    256c:	4b 01       	movw	r8, r22
    256e:	5c 01       	movw	r10, r24
    2570:	c1 14       	cp	r12, r1
    2572:	d1 04       	cpc	r13, r1
    2574:	e1 04       	cpc	r14, r1
    2576:	f1 04       	cpc	r15, r1
    2578:	01 f1       	breq	.+64     	; 0x25ba <delay+0x66>
    257a:	0e 94 22 16 	call	0x2c44	; 0x2c44 <yield>
    257e:	0e 94 85 12 	call	0x250a	; 0x250a <micros>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	88 19       	sub	r24, r8
    2588:	99 09       	sbc	r25, r9
    258a:	aa 09       	sbc	r26, r10
    258c:	bb 09       	sbc	r27, r11
    258e:	88 3e       	cpi	r24, 0xE8	; 232
    2590:	93 40       	sbci	r25, 0x03	; 3
    2592:	a1 05       	cpc	r26, r1
    2594:	b1 05       	cpc	r27, r1
    2596:	60 f3       	brcs	.-40     	; 0x2570 <delay+0x1c>
    2598:	21 e0       	ldi	r18, 0x01	; 1
    259a:	c2 1a       	sub	r12, r18
    259c:	d1 08       	sbc	r13, r1
    259e:	e1 08       	sbc	r14, r1
    25a0:	f1 08       	sbc	r15, r1
    25a2:	88 ee       	ldi	r24, 0xE8	; 232
    25a4:	88 0e       	add	r8, r24
    25a6:	83 e0       	ldi	r24, 0x03	; 3
    25a8:	98 1e       	adc	r9, r24
    25aa:	a1 1c       	adc	r10, r1
    25ac:	b1 1c       	adc	r11, r1
    25ae:	c1 14       	cp	r12, r1
    25b0:	d1 04       	cpc	r13, r1
    25b2:	e1 04       	cpc	r14, r1
    25b4:	f1 04       	cpc	r15, r1
    25b6:	19 f7       	brne	.-58     	; 0x257e <delay+0x2a>
    25b8:	db cf       	rjmp	.-74     	; 0x2570 <delay+0x1c>
    25ba:	ff 90       	pop	r15
    25bc:	ef 90       	pop	r14
    25be:	df 90       	pop	r13
    25c0:	cf 90       	pop	r12
    25c2:	bf 90       	pop	r11
    25c4:	af 90       	pop	r10
    25c6:	9f 90       	pop	r9
    25c8:	8f 90       	pop	r8
    25ca:	08 95       	ret

000025cc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    25cc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    25ce:	84 b5       	in	r24, 0x24	; 36
    25d0:	82 60       	ori	r24, 0x02	; 2
    25d2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    25d4:	84 b5       	in	r24, 0x24	; 36
    25d6:	81 60       	ori	r24, 0x01	; 1
    25d8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    25da:	85 b5       	in	r24, 0x25	; 37
    25dc:	82 60       	ori	r24, 0x02	; 2
    25de:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    25e0:	85 b5       	in	r24, 0x25	; 37
    25e2:	81 60       	ori	r24, 0x01	; 1
    25e4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    25e6:	ee e6       	ldi	r30, 0x6E	; 110
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	81 60       	ori	r24, 0x01	; 1
    25ee:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    25f0:	e1 e8       	ldi	r30, 0x81	; 129
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    25f6:	80 81       	ld	r24, Z
    25f8:	82 60       	ori	r24, 0x02	; 2
    25fa:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    25fc:	80 81       	ld	r24, Z
    25fe:	81 60       	ori	r24, 0x01	; 1
    2600:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2602:	e0 e8       	ldi	r30, 0x80	; 128
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	81 60       	ori	r24, 0x01	; 1
    260a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    260c:	e1 eb       	ldi	r30, 0xB1	; 177
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	84 60       	ori	r24, 0x04	; 4
    2614:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2616:	e0 eb       	ldi	r30, 0xB0	; 176
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	81 60       	ori	r24, 0x01	; 1
    261e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2620:	ea e7       	ldi	r30, 0x7A	; 122
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	84 60       	ori	r24, 0x04	; 4
    2628:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    262a:	80 81       	ld	r24, Z
    262c:	82 60       	ori	r24, 0x02	; 2
    262e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2630:	80 81       	ld	r24, Z
    2632:	81 60       	ori	r24, 0x01	; 1
    2634:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2636:	80 81       	ld	r24, Z
    2638:	80 68       	ori	r24, 0x80	; 128
    263a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    263c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    2640:	08 95       	ret

00002642 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2642:	83 30       	cpi	r24, 0x03	; 3
    2644:	81 f0       	breq	.+32     	; 0x2666 <turnOffPWM+0x24>
    2646:	28 f4       	brcc	.+10     	; 0x2652 <turnOffPWM+0x10>
    2648:	81 30       	cpi	r24, 0x01	; 1
    264a:	99 f0       	breq	.+38     	; 0x2672 <turnOffPWM+0x30>
    264c:	82 30       	cpi	r24, 0x02	; 2
    264e:	a1 f0       	breq	.+40     	; 0x2678 <turnOffPWM+0x36>
    2650:	08 95       	ret
    2652:	87 30       	cpi	r24, 0x07	; 7
    2654:	a9 f0       	breq	.+42     	; 0x2680 <turnOffPWM+0x3e>
    2656:	88 30       	cpi	r24, 0x08	; 8
    2658:	b9 f0       	breq	.+46     	; 0x2688 <turnOffPWM+0x46>
    265a:	84 30       	cpi	r24, 0x04	; 4
    265c:	d1 f4       	brne	.+52     	; 0x2692 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    265e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2662:	8f 7d       	andi	r24, 0xDF	; 223
    2664:	03 c0       	rjmp	.+6      	; 0x266c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2666:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    266a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    266c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2670:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2672:	84 b5       	in	r24, 0x24	; 36
    2674:	8f 77       	andi	r24, 0x7F	; 127
    2676:	02 c0       	rjmp	.+4      	; 0x267c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2678:	84 b5       	in	r24, 0x24	; 36
    267a:	8f 7d       	andi	r24, 0xDF	; 223
    267c:	84 bd       	out	0x24, r24	; 36
    267e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2680:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2684:	8f 77       	andi	r24, 0x7F	; 127
    2686:	03 c0       	rjmp	.+6      	; 0x268e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2688:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    268c:	8f 7d       	andi	r24, 0xDF	; 223
    268e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2692:	08 95       	ret

00002694 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	fc 01       	movw	r30, r24
    269c:	e8 53       	subi	r30, 0x38	; 56
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    26a2:	fc 01       	movw	r30, r24
    26a4:	e4 52       	subi	r30, 0x24	; 36
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    26aa:	88 23       	and	r24, r24
    26ac:	61 f1       	breq	.+88     	; 0x2706 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	fc 01       	movw	r30, r24
    26b6:	ec 5f       	subi	r30, 0xFC	; 252
    26b8:	fe 4f       	sbci	r31, 0xFE	; 254
    26ba:	c5 91       	lpm	r28, Z+
    26bc:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    26be:	fc 01       	movw	r30, r24
    26c0:	e6 50       	subi	r30, 0x06	; 6
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	a5 91       	lpm	r26, Z+
    26c6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    26c8:	61 11       	cpse	r22, r1
    26ca:	09 c0       	rjmp	.+18     	; 0x26de <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    26cc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    26ce:	f8 94       	cli
		*reg &= ~bit;
    26d0:	88 81       	ld	r24, Y
    26d2:	20 95       	com	r18
    26d4:	82 23       	and	r24, r18
    26d6:	88 83       	st	Y, r24
		*out &= ~bit;
    26d8:	ec 91       	ld	r30, X
    26da:	2e 23       	and	r18, r30
    26dc:	0b c0       	rjmp	.+22     	; 0x26f4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    26de:	62 30       	cpi	r22, 0x02	; 2
    26e0:	61 f4       	brne	.+24     	; 0x26fa <pinMode+0x66>
		uint8_t oldSREG = SREG;
    26e2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    26e4:	f8 94       	cli
		*reg &= ~bit;
    26e6:	88 81       	ld	r24, Y
    26e8:	32 2f       	mov	r19, r18
    26ea:	30 95       	com	r19
    26ec:	83 23       	and	r24, r19
    26ee:	88 83       	st	Y, r24
		*out |= bit;
    26f0:	ec 91       	ld	r30, X
    26f2:	2e 2b       	or	r18, r30
    26f4:	2c 93       	st	X, r18
		SREG = oldSREG;
    26f6:	9f bf       	out	0x3f, r25	; 63
    26f8:	06 c0       	rjmp	.+12     	; 0x2706 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    26fa:	8f b7       	in	r24, 0x3f	; 63
                cli();
    26fc:	f8 94       	cli
		*reg |= bit;
    26fe:	e8 81       	ld	r30, Y
    2700:	2e 2b       	or	r18, r30
    2702:	28 83       	st	Y, r18
		SREG = oldSREG;
    2704:	8f bf       	out	0x3f, r24	; 63
	}
}
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	08 95       	ret

0000270c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    270c:	1f 93       	push	r17
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2712:	28 2f       	mov	r18, r24
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	f9 01       	movw	r30, r18
    2718:	ec 54       	subi	r30, 0x4C	; 76
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    271e:	f9 01       	movw	r30, r18
    2720:	e8 53       	subi	r30, 0x38	; 56
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2726:	f9 01       	movw	r30, r18
    2728:	e4 52       	subi	r30, 0x24	; 36
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    272e:	cc 23       	and	r28, r28
    2730:	c1 f0       	breq	.+48     	; 0x2762 <digitalWrite+0x56>
    2732:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2734:	81 11       	cpse	r24, r1
    2736:	0e 94 21 13 	call	0x2642	; 0x2642 <turnOffPWM>

	out = portOutputRegister(port);
    273a:	ec 2f       	mov	r30, r28
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	ee 0f       	add	r30, r30
    2740:	ff 1f       	adc	r31, r31
    2742:	e6 50       	subi	r30, 0x06	; 6
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	a5 91       	lpm	r26, Z+
    2748:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    274a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    274c:	f8 94       	cli

	if (val == LOW) {
    274e:	11 11       	cpse	r17, r1
    2750:	04 c0       	rjmp	.+8      	; 0x275a <digitalWrite+0x4e>
		*out &= ~bit;
    2752:	8c 91       	ld	r24, X
    2754:	d0 95       	com	r29
    2756:	d8 23       	and	r29, r24
    2758:	02 c0       	rjmp	.+4      	; 0x275e <digitalWrite+0x52>
	} else {
		*out |= bit;
    275a:	ec 91       	ld	r30, X
    275c:	de 2b       	or	r29, r30
    275e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2760:	9f bf       	out	0x3f, r25	; 63
}
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	1f 91       	pop	r17
    2768:	08 95       	ret

0000276a <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    276a:	20 91 cc 05 	lds	r18, 0x05CC	; 0x8005cc <_ZN14SoftwareSerial13active_objectE>
    276e:	30 91 cd 05 	lds	r19, 0x05CD	; 0x8005cd <_ZN14SoftwareSerial13active_objectE+0x1>
    2772:	28 17       	cp	r18, r24
    2774:	39 07       	cpc	r19, r25
    2776:	b9 f4       	brne	.+46     	; 0x27a6 <_ZN14SoftwareSerial4readEv+0x3c>
    2778:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <_ZN14SoftwareSerial20_receive_buffer_headE>
    277c:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2780:	98 17       	cp	r25, r24
    2782:	89 f0       	breq	.+34     	; 0x27a6 <_ZN14SoftwareSerial4readEv+0x3c>
    2784:	e0 91 8a 05 	lds	r30, 0x058A	; 0x80058a <_ZN14SoftwareSerial20_receive_buffer_headE>
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	e4 57       	subi	r30, 0x74	; 116
    278c:	fa 4f       	sbci	r31, 0xFA	; 250
    278e:	80 81       	ld	r24, Z
    2790:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <_ZN14SoftwareSerial20_receive_buffer_headE>
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	2f 5f       	subi	r18, 0xFF	; 255
    2798:	3f 4f       	sbci	r19, 0xFF	; 255
    279a:	2f 73       	andi	r18, 0x3F	; 63
    279c:	33 27       	eor	r19, r19
    279e:	20 93 8a 05 	sts	0x058A, r18	; 0x80058a <_ZN14SoftwareSerial20_receive_buffer_headE>
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	08 95       	ret
    27a6:	8f ef       	ldi	r24, 0xFF	; 255
    27a8:	9f ef       	ldi	r25, 0xFF	; 255
    27aa:	08 95       	ret

000027ac <_ZN14SoftwareSerial5writeEh>:
    27ac:	1f 93       	push	r17
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	dc 01       	movw	r26, r24
    27b4:	5c 96       	adiw	r26, 0x1c	; 28
    27b6:	8d 91       	ld	r24, X+
    27b8:	9c 91       	ld	r25, X
    27ba:	5d 97       	sbiw	r26, 0x1d	; 29
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	39 f4       	brne	.+14     	; 0x27ce <_ZN14SoftwareSerial5writeEh+0x22>
    27c0:	21 e0       	ldi	r18, 0x01	; 1
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	13 96       	adiw	r26, 0x03	; 3
    27c6:	3c 93       	st	X, r19
    27c8:	2e 93       	st	-X, r18
    27ca:	12 97       	sbiw	r26, 0x02	; 2
    27cc:	3b c0       	rjmp	.+118    	; 0x2844 <_ZN14SoftwareSerial5writeEh+0x98>
    27ce:	51 96       	adiw	r26, 0x11	; 17
    27d0:	ed 91       	ld	r30, X+
    27d2:	fc 91       	ld	r31, X
    27d4:	52 97       	sbiw	r26, 0x12	; 18
    27d6:	50 96       	adiw	r26, 0x10	; 16
    27d8:	2c 91       	ld	r18, X
    27da:	50 97       	sbiw	r26, 0x10	; 16
    27dc:	32 2f       	mov	r19, r18
    27de:	30 95       	com	r19
    27e0:	1f b7       	in	r17, 0x3f	; 63
    27e2:	5e 96       	adiw	r26, 0x1e	; 30
    27e4:	4c 91       	ld	r20, X
    27e6:	5e 97       	sbiw	r26, 0x1e	; 30
    27e8:	74 2f       	mov	r23, r20
    27ea:	72 70       	andi	r23, 0x02	; 2
    27ec:	41 fd       	sbrc	r20, 1
    27ee:	60 95       	com	r22
    27f0:	f8 94       	cli
    27f2:	40 81       	ld	r20, Z
    27f4:	77 23       	and	r23, r23
    27f6:	11 f0       	breq	.+4      	; 0x27fc <_ZN14SoftwareSerial5writeEh+0x50>
    27f8:	42 2b       	or	r20, r18
    27fa:	01 c0       	rjmp	.+2      	; 0x27fe <_ZN14SoftwareSerial5writeEh+0x52>
    27fc:	43 23       	and	r20, r19
    27fe:	40 83       	st	Z, r20
    2800:	ec 01       	movw	r28, r24
    2802:	21 97       	sbiw	r28, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <_ZN14SoftwareSerial5writeEh+0x56>
    2806:	48 e0       	ldi	r20, 0x08	; 8
    2808:	50 81       	ld	r21, Z
    280a:	60 ff       	sbrs	r22, 0
    280c:	02 c0       	rjmp	.+4      	; 0x2812 <_ZN14SoftwareSerial5writeEh+0x66>
    280e:	52 2b       	or	r21, r18
    2810:	01 c0       	rjmp	.+2      	; 0x2814 <_ZN14SoftwareSerial5writeEh+0x68>
    2812:	53 23       	and	r21, r19
    2814:	50 83       	st	Z, r21
    2816:	ec 01       	movw	r28, r24
    2818:	21 97       	sbiw	r28, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <_ZN14SoftwareSerial5writeEh+0x6c>
    281c:	66 95       	lsr	r22
    281e:	41 50       	subi	r20, 0x01	; 1
    2820:	99 f7       	brne	.-26     	; 0x2808 <_ZN14SoftwareSerial5writeEh+0x5c>
    2822:	80 81       	ld	r24, Z
    2824:	77 23       	and	r23, r23
    2826:	19 f0       	breq	.+6      	; 0x282e <_ZN14SoftwareSerial5writeEh+0x82>
    2828:	83 23       	and	r24, r19
    282a:	80 83       	st	Z, r24
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <_ZN14SoftwareSerial5writeEh+0x86>
    282e:	28 2b       	or	r18, r24
    2830:	20 83       	st	Z, r18
    2832:	1f bf       	out	0x3f, r17	; 63
    2834:	5c 96       	adiw	r26, 0x1c	; 28
    2836:	8d 91       	ld	r24, X+
    2838:	9c 91       	ld	r25, X
    283a:	5d 97       	sbiw	r26, 0x1d	; 29
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <_ZN14SoftwareSerial5writeEh+0x90>
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	df 91       	pop	r29
    2846:	cf 91       	pop	r28
    2848:	1f 91       	pop	r17
    284a:	08 95       	ret

0000284c <_ZN14SoftwareSerial5flushEv>:
    284c:	08 95       	ret

0000284e <_ZN14SoftwareSerial4peekEv>:
    284e:	20 91 cc 05 	lds	r18, 0x05CC	; 0x8005cc <_ZN14SoftwareSerial13active_objectE>
    2852:	30 91 cd 05 	lds	r19, 0x05CD	; 0x8005cd <_ZN14SoftwareSerial13active_objectE+0x1>
    2856:	28 17       	cp	r18, r24
    2858:	39 07       	cpc	r19, r25
    285a:	71 f4       	brne	.+28     	; 0x2878 <_ZN14SoftwareSerial4peekEv+0x2a>
    285c:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <_ZN14SoftwareSerial20_receive_buffer_headE>
    2860:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2864:	98 17       	cp	r25, r24
    2866:	41 f0       	breq	.+16     	; 0x2878 <_ZN14SoftwareSerial4peekEv+0x2a>
    2868:	e0 91 8a 05 	lds	r30, 0x058A	; 0x80058a <_ZN14SoftwareSerial20_receive_buffer_headE>
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	e4 57       	subi	r30, 0x74	; 116
    2870:	fa 4f       	sbci	r31, 0xFA	; 250
    2872:	80 81       	ld	r24, Z
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	08 95       	ret
    2878:	8f ef       	ldi	r24, 0xFF	; 255
    287a:	9f ef       	ldi	r25, 0xFF	; 255
    287c:	08 95       	ret

0000287e <_ZN14SoftwareSerial9availableEv>:
    287e:	20 91 cc 05 	lds	r18, 0x05CC	; 0x8005cc <_ZN14SoftwareSerial13active_objectE>
    2882:	30 91 cd 05 	lds	r19, 0x05CD	; 0x8005cd <_ZN14SoftwareSerial13active_objectE+0x1>
    2886:	28 17       	cp	r18, r24
    2888:	39 07       	cpc	r19, r25
    288a:	71 f4       	brne	.+28     	; 0x28a8 <_ZN14SoftwareSerial9availableEv+0x2a>
    288c:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2890:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <_ZN14SoftwareSerial20_receive_buffer_headE>
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	80 5c       	subi	r24, 0xC0	; 192
    2898:	9f 4f       	sbci	r25, 0xFF	; 255
    289a:	82 1b       	sub	r24, r18
    289c:	91 09       	sbc	r25, r1
    289e:	60 e4       	ldi	r22, 0x40	; 64
    28a0:	70 e0       	ldi	r23, 0x00	; 0
    28a2:	0e 94 23 16 	call	0x2c46	; 0x2c46 <__divmodhi4>
    28a6:	08 95       	ret
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	08 95       	ret

000028ae <_ZN14SoftwareSerial13stopListeningEv>:
    28ae:	e0 91 cc 05 	lds	r30, 0x05CC	; 0x8005cc <_ZN14SoftwareSerial13active_objectE>
    28b2:	f0 91 cd 05 	lds	r31, 0x05CD	; 0x8005cd <_ZN14SoftwareSerial13active_objectE+0x1>
    28b6:	e8 17       	cp	r30, r24
    28b8:	f9 07       	cpc	r31, r25
    28ba:	69 f4       	brne	.+26     	; 0x28d6 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    28bc:	a3 89       	ldd	r26, Z+19	; 0x13
    28be:	b4 89       	ldd	r27, Z+20	; 0x14
    28c0:	9c 91       	ld	r25, X
    28c2:	85 89       	ldd	r24, Z+21	; 0x15
    28c4:	80 95       	com	r24
    28c6:	89 23       	and	r24, r25
    28c8:	8c 93       	st	X, r24
    28ca:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <_ZN14SoftwareSerial13active_objectE+0x1>
    28ce:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <_ZN14SoftwareSerial13active_objectE>
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	08 95       	ret
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	08 95       	ret

000028da <_ZN14SoftwareSerial6listenEv>:
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	ec 01       	movw	r28, r24
    28e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    28e4:	89 2b       	or	r24, r25
    28e6:	f1 f0       	breq	.+60     	; 0x2924 <_ZN14SoftwareSerial6listenEv+0x4a>
    28e8:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <_ZN14SoftwareSerial13active_objectE>
    28ec:	90 91 cd 05 	lds	r25, 0x05CD	; 0x8005cd <_ZN14SoftwareSerial13active_objectE+0x1>
    28f0:	c8 17       	cp	r28, r24
    28f2:	d9 07       	cpc	r29, r25
    28f4:	b9 f0       	breq	.+46     	; 0x2924 <_ZN14SoftwareSerial6listenEv+0x4a>
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	11 f0       	breq	.+4      	; 0x28fe <_ZN14SoftwareSerial6listenEv+0x24>
    28fa:	0e 94 57 14 	call	0x28ae	; 0x28ae <_ZN14SoftwareSerial13stopListeningEv>
    28fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2900:	8e 7f       	andi	r24, 0xFE	; 254
    2902:	8e 8f       	std	Y+30, r24	; 0x1e
    2904:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2908:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <_ZN14SoftwareSerial20_receive_buffer_headE>
    290c:	d0 93 cd 05 	sts	0x05CD, r29	; 0x8005cd <_ZN14SoftwareSerial13active_objectE+0x1>
    2910:	c0 93 cc 05 	sts	0x05CC, r28	; 0x8005cc <_ZN14SoftwareSerial13active_objectE>
    2914:	eb 89       	ldd	r30, Y+19	; 0x13
    2916:	fc 89       	ldd	r31, Y+20	; 0x14
    2918:	90 81       	ld	r25, Z
    291a:	8d 89       	ldd	r24, Y+21	; 0x15
    291c:	89 2b       	or	r24, r25
    291e:	80 83       	st	Z, r24
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	01 c0       	rjmp	.+2      	; 0x2926 <_ZN14SoftwareSerial6listenEv+0x4c>
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	08 95       	ret

0000292c <__vector_3>:
    292c:	1f 92       	push	r1
    292e:	0f 92       	push	r0
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	0f 92       	push	r0
    2934:	11 24       	eor	r1, r1
    2936:	2f 93       	push	r18
    2938:	3f 93       	push	r19
    293a:	4f 93       	push	r20
    293c:	5f 93       	push	r21
    293e:	6f 93       	push	r22
    2940:	7f 93       	push	r23
    2942:	8f 93       	push	r24
    2944:	9f 93       	push	r25
    2946:	af 93       	push	r26
    2948:	bf 93       	push	r27
    294a:	ef 93       	push	r30
    294c:	ff 93       	push	r31
    294e:	e0 91 cc 05 	lds	r30, 0x05CC	; 0x8005cc <_ZN14SoftwareSerial13active_objectE>
    2952:	f0 91 cd 05 	lds	r31, 0x05CD	; 0x8005cd <_ZN14SoftwareSerial13active_objectE+0x1>
    2956:	30 97       	sbiw	r30, 0x00	; 0
    2958:	09 f4       	brne	.+2      	; 0x295c <__vector_3+0x30>
    295a:	51 c0       	rjmp	.+162    	; 0x29fe <__vector_3+0xd2>
    295c:	96 8d       	ldd	r25, Z+30	; 0x1e
    295e:	a6 85       	ldd	r26, Z+14	; 0x0e
    2960:	b7 85       	ldd	r27, Z+15	; 0x0f
    2962:	85 85       	ldd	r24, Z+13	; 0x0d
    2964:	91 ff       	sbrs	r25, 1
    2966:	04 c0       	rjmp	.+8      	; 0x2970 <__vector_3+0x44>
    2968:	9c 91       	ld	r25, X
    296a:	89 23       	and	r24, r25
    296c:	29 f4       	brne	.+10     	; 0x2978 <__vector_3+0x4c>
    296e:	47 c0       	rjmp	.+142    	; 0x29fe <__vector_3+0xd2>
    2970:	9c 91       	ld	r25, X
    2972:	89 23       	and	r24, r25
    2974:	09 f0       	breq	.+2      	; 0x2978 <__vector_3+0x4c>
    2976:	43 c0       	rjmp	.+134    	; 0x29fe <__vector_3+0xd2>
    2978:	a3 89       	ldd	r26, Z+19	; 0x13
    297a:	b4 89       	ldd	r27, Z+20	; 0x14
    297c:	9c 91       	ld	r25, X
    297e:	85 89       	ldd	r24, Z+21	; 0x15
    2980:	80 95       	com	r24
    2982:	89 23       	and	r24, r25
    2984:	8c 93       	st	X, r24
    2986:	86 89       	ldd	r24, Z+22	; 0x16
    2988:	97 89       	ldd	r25, Z+23	; 0x17
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <__vector_3+0x5e>
    298e:	60 8d       	ldd	r22, Z+24	; 0x18
    2990:	71 8d       	ldd	r23, Z+25	; 0x19
    2992:	a6 85       	ldd	r26, Z+14	; 0x0e
    2994:	b7 85       	ldd	r27, Z+15	; 0x0f
    2996:	55 85       	ldd	r21, Z+13	; 0x0d
    2998:	38 e0       	ldi	r19, 0x08	; 8
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	cb 01       	movw	r24, r22
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	f1 f7       	brne	.-4      	; 0x299e <__vector_3+0x72>
    29a2:	82 2f       	mov	r24, r18
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	95 95       	asr	r25
    29a8:	87 95       	ror	r24
    29aa:	28 2f       	mov	r18, r24
    29ac:	4c 91       	ld	r20, X
    29ae:	45 23       	and	r20, r21
    29b0:	09 f0       	breq	.+2      	; 0x29b4 <__vector_3+0x88>
    29b2:	20 68       	ori	r18, 0x80	; 128
    29b4:	31 50       	subi	r19, 0x01	; 1
    29b6:	91 f7       	brne	.-28     	; 0x299c <__vector_3+0x70>
    29b8:	86 8d       	ldd	r24, Z+30	; 0x1e
    29ba:	81 fd       	sbrc	r24, 1
    29bc:	20 95       	com	r18
    29be:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <_ZN14SoftwareSerial20_receive_buffer_tailE>
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	01 96       	adiw	r24, 0x01	; 1
    29c6:	8f 73       	andi	r24, 0x3F	; 63
    29c8:	99 27       	eor	r25, r25
    29ca:	30 91 8a 05 	lds	r19, 0x058A	; 0x80058a <_ZN14SoftwareSerial20_receive_buffer_headE>
    29ce:	38 17       	cp	r19, r24
    29d0:	49 f0       	breq	.+18     	; 0x29e4 <__vector_3+0xb8>
    29d2:	a0 91 8b 05 	lds	r26, 0x058B	; 0x80058b <_ZN14SoftwareSerial20_receive_buffer_tailE>
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	a4 57       	subi	r26, 0x74	; 116
    29da:	ba 4f       	sbci	r27, 0xFA	; 250
    29dc:	2c 93       	st	X, r18
    29de:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <_ZN14SoftwareSerial20_receive_buffer_tailE>
    29e2:	03 c0       	rjmp	.+6      	; 0x29ea <__vector_3+0xbe>
    29e4:	86 8d       	ldd	r24, Z+30	; 0x1e
    29e6:	81 60       	ori	r24, 0x01	; 1
    29e8:	86 8f       	std	Z+30, r24	; 0x1e
    29ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    29ec:	93 8d       	ldd	r25, Z+27	; 0x1b
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <__vector_3+0xc2>
    29f2:	a3 89       	ldd	r26, Z+19	; 0x13
    29f4:	b4 89       	ldd	r27, Z+20	; 0x14
    29f6:	9c 91       	ld	r25, X
    29f8:	85 89       	ldd	r24, Z+21	; 0x15
    29fa:	89 2b       	or	r24, r25
    29fc:	8c 93       	st	X, r24
    29fe:	ff 91       	pop	r31
    2a00:	ef 91       	pop	r30
    2a02:	bf 91       	pop	r27
    2a04:	af 91       	pop	r26
    2a06:	9f 91       	pop	r25
    2a08:	8f 91       	pop	r24
    2a0a:	7f 91       	pop	r23
    2a0c:	6f 91       	pop	r22
    2a0e:	5f 91       	pop	r21
    2a10:	4f 91       	pop	r20
    2a12:	3f 91       	pop	r19
    2a14:	2f 91       	pop	r18
    2a16:	0f 90       	pop	r0
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	0f 90       	pop	r0
    2a1c:	1f 90       	pop	r1
    2a1e:	18 95       	reti

00002a20 <_ZN14SoftwareSerialD1Ev>:
    2a20:	20 e2       	ldi	r18, 0x20	; 32
    2a22:	31 e0       	ldi	r19, 0x01	; 1
    2a24:	fc 01       	movw	r30, r24
    2a26:	31 83       	std	Z+1, r19	; 0x01
    2a28:	20 83       	st	Z, r18
    2a2a:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <_ZN14SoftwareSerial13stopListeningEv>

00002a2e <_ZN14SoftwareSerial5setTXEh>:
    2a2e:	1f 93       	push	r17
    2a30:	cf 93       	push	r28
    2a32:	df 93       	push	r29
    2a34:	ec 01       	movw	r28, r24
    2a36:	16 2f       	mov	r17, r22
    2a38:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2a3a:	66 95       	lsr	r22
    2a3c:	61 70       	andi	r22, 0x01	; 1
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	68 27       	eor	r22, r24
    2a42:	81 2f       	mov	r24, r17
    2a44:	0e 94 86 13 	call	0x270c	; 0x270c <digitalWrite>
    2a48:	61 e0       	ldi	r22, 0x01	; 1
    2a4a:	81 2f       	mov	r24, r17
    2a4c:	0e 94 4a 13 	call	0x2694	; 0x2694 <pinMode>
    2a50:	81 2f       	mov	r24, r17
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	fc 01       	movw	r30, r24
    2a56:	e8 53       	subi	r30, 0x38	; 56
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	e4 91       	lpm	r30, Z
    2a5c:	e8 8b       	std	Y+16, r30	; 0x10
    2a5e:	fc 01       	movw	r30, r24
    2a60:	e4 52       	subi	r30, 0x24	; 36
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	e4 91       	lpm	r30, Z
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	ee 0f       	add	r30, r30
    2a6a:	ff 1f       	adc	r31, r31
    2a6c:	e6 50       	subi	r30, 0x06	; 6
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	85 91       	lpm	r24, Z+
    2a72:	94 91       	lpm	r25, Z
    2a74:	9a 8b       	std	Y+18, r25	; 0x12
    2a76:	89 8b       	std	Y+17, r24	; 0x11
    2a78:	df 91       	pop	r29
    2a7a:	cf 91       	pop	r28
    2a7c:	1f 91       	pop	r17
    2a7e:	08 95       	ret

00002a80 <_ZN14SoftwareSerial5setRXEh>:
    2a80:	1f 93       	push	r17
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	ec 01       	movw	r28, r24
    2a88:	16 2f       	mov	r17, r22
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	81 2f       	mov	r24, r17
    2a8e:	0e 94 4a 13 	call	0x2694	; 0x2694 <pinMode>
    2a92:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a94:	81 fd       	sbrc	r24, 1
    2a96:	04 c0       	rjmp	.+8      	; 0x2aa0 <_ZN14SoftwareSerial5setRXEh+0x20>
    2a98:	61 e0       	ldi	r22, 0x01	; 1
    2a9a:	81 2f       	mov	r24, r17
    2a9c:	0e 94 86 13 	call	0x270c	; 0x270c <digitalWrite>
    2aa0:	1c 87       	std	Y+12, r17	; 0x0c
    2aa2:	81 2f       	mov	r24, r17
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	e8 53       	subi	r30, 0x38	; 56
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	e4 91       	lpm	r30, Z
    2aae:	ed 87       	std	Y+13, r30	; 0x0d
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	e4 52       	subi	r30, 0x24	; 36
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	e4 91       	lpm	r30, Z
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	ee 0f       	add	r30, r30
    2abc:	ff 1f       	adc	r31, r31
    2abe:	e0 51       	subi	r30, 0x10	; 16
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	85 91       	lpm	r24, Z+
    2ac4:	94 91       	lpm	r25, Z
    2ac6:	9f 87       	std	Y+15, r25	; 0x0f
    2ac8:	8e 87       	std	Y+14, r24	; 0x0e
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	08 95       	ret

00002ad2 <_ZN14SoftwareSerialC1Ehhb>:
    2ad2:	1f 93       	push	r17
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	ec 01       	movw	r28, r24
    2ada:	16 2f       	mov	r17, r22
    2adc:	1b 82       	std	Y+3, r1	; 0x03
    2ade:	1a 82       	std	Y+2, r1	; 0x02
    2ae0:	88 ee       	ldi	r24, 0xE8	; 232
    2ae2:	93 e0       	ldi	r25, 0x03	; 3
    2ae4:	a0 e0       	ldi	r26, 0x00	; 0
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	8c 83       	std	Y+4, r24	; 0x04
    2aea:	9d 83       	std	Y+5, r25	; 0x05
    2aec:	ae 83       	std	Y+6, r26	; 0x06
    2aee:	bf 83       	std	Y+7, r27	; 0x07
    2af0:	80 e2       	ldi	r24, 0x20	; 32
    2af2:	91 e0       	ldi	r25, 0x01	; 1
    2af4:	99 83       	std	Y+1, r25	; 0x01
    2af6:	88 83       	st	Y, r24
    2af8:	1f 8a       	std	Y+23, r1	; 0x17
    2afa:	1e 8a       	std	Y+22, r1	; 0x16
    2afc:	19 8e       	std	Y+25, r1	; 0x19
    2afe:	18 8e       	std	Y+24, r1	; 0x18
    2b00:	1b 8e       	std	Y+27, r1	; 0x1b
    2b02:	1a 8e       	std	Y+26, r1	; 0x1a
    2b04:	1d 8e       	std	Y+29, r1	; 0x1d
    2b06:	1c 8e       	std	Y+28, r1	; 0x1c
    2b08:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b0a:	8e 7f       	andi	r24, 0xFE	; 254
    2b0c:	20 fb       	bst	r18, 0
    2b0e:	81 f9       	bld	r24, 1
    2b10:	8e 8f       	std	Y+30, r24	; 0x1e
    2b12:	64 2f       	mov	r22, r20
    2b14:	ce 01       	movw	r24, r28
    2b16:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <_ZN14SoftwareSerial5setTXEh>
    2b1a:	61 2f       	mov	r22, r17
    2b1c:	ce 01       	movw	r24, r28
    2b1e:	df 91       	pop	r29
    2b20:	cf 91       	pop	r28
    2b22:	1f 91       	pop	r17
    2b24:	0c 94 40 15 	jmp	0x2a80	; 0x2a80 <_ZN14SoftwareSerial5setRXEh>

00002b28 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	ec 01       	movw	r28, r24
    2b2e:	9a 01       	movw	r18, r20
    2b30:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2b32:	1b 8e       	std	Y+27, r1	; 0x1b
    2b34:	1a 8e       	std	Y+26, r1	; 0x1a
    2b36:	19 8e       	std	Y+25, r1	; 0x19
    2b38:	18 8e       	std	Y+24, r1	; 0x18
    2b3a:	1f 8a       	std	Y+23, r1	; 0x17
    2b3c:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    2b3e:	60 e0       	ldi	r22, 0x00	; 0
    2b40:	79 e0       	ldi	r23, 0x09	; 9
    2b42:	8d e3       	ldi	r24, 0x3D	; 61
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__divmodsi4>
    2b4a:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2b4c:	24 30       	cpi	r18, 0x04	; 4
    2b4e:	31 05       	cpc	r19, r1
    2b50:	18 f0       	brcs	.+6      	; 0x2b58 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    2b52:	c9 01       	movw	r24, r18
    2b54:	03 97       	sbiw	r24, 0x03	; 3
    2b56:	02 c0       	rjmp	.+4      	; 0x2b5c <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    2b5c:	9d 8f       	std	Y+29, r25	; 0x1d
    2b5e:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR((int8_t)_receivePin)) {
    2b60:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b62:	66 31       	cpi	r22, 0x16	; 22
    2b64:	08 f0       	brcs	.+2      	; 0x2b68 <_ZN14SoftwareSerial5beginEl+0x40>
    2b66:	69 c0       	rjmp	.+210    	; 0x2c3a <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2b68:	c9 01       	movw	r24, r18
    2b6a:	96 95       	lsr	r25
    2b6c:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2b6e:	84 31       	cpi	r24, 0x14	; 20
    2b70:	91 05       	cpc	r25, r1
    2b72:	10 f0       	brcs	.+4      	; 0x2b78 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    2b74:	43 97       	sbiw	r24, 0x13	; 19
    2b76:	02 c0       	rjmp	.+4      	; 0x2b7c <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2b7c:	9f 8b       	std	Y+23, r25	; 0x17
    2b7e:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2b80:	36 97       	sbiw	r30, 0x06	; 6
    2b82:	18 f0       	brcs	.+6      	; 0x2b8a <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    2b84:	c9 01       	movw	r24, r18
    2b86:	05 97       	sbiw	r24, 0x05	; 5
    2b88:	02 c0       	rjmp	.+4      	; 0x2b8e <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    2b8e:	99 8f       	std	Y+25, r25	; 0x19
    2b90:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2b92:	c9 01       	movw	r24, r18
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	28 0f       	add	r18, r24
    2b9a:	39 1f       	adc	r19, r25
    2b9c:	36 95       	lsr	r19
    2b9e:	27 95       	ror	r18
    2ba0:	36 95       	lsr	r19
    2ba2:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2ba4:	2d 30       	cpi	r18, 0x0D	; 13
    2ba6:	31 05       	cpc	r19, r1
    2ba8:	18 f0       	brcs	.+6      	; 0x2bb0 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    2baa:	2c 50       	subi	r18, 0x0C	; 12
    2bac:	31 09       	sbc	r19, r1
    2bae:	02 c0       	rjmp	.+4      	; 0x2bb4 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    2bb0:	21 e0       	ldi	r18, 0x01	; 1
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2bb4:	3b 8f       	std	Y+27, r19	; 0x1b
    2bb6:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR((int8_t)_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2bb8:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    2bbc:	68 30       	cpi	r22, 0x08	; 8
    2bbe:	50 f0       	brcs	.+20     	; 0x2bd4 <_ZN14SoftwareSerial5beginEl+0xac>
    2bc0:	21 e0       	ldi	r18, 0x01	; 1
    2bc2:	6e 30       	cpi	r22, 0x0E	; 14
    2bc4:	08 f4       	brcc	.+2      	; 0x2bc8 <_ZN14SoftwareSerial5beginEl+0xa0>
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	01 c0       	rjmp	.+2      	; 0x2bce <_ZN14SoftwareSerial5beginEl+0xa6>
    2bcc:	88 0f       	add	r24, r24
    2bce:	2a 95       	dec	r18
    2bd0:	ea f7       	brpl	.-6      	; 0x2bcc <_ZN14SoftwareSerial5beginEl+0xa4>
    2bd2:	01 c0       	rjmp	.+2      	; 0x2bd6 <_ZN14SoftwareSerial5beginEl+0xae>
    2bd4:	84 e0       	ldi	r24, 0x04	; 4
    2bd6:	89 2b       	or	r24, r25
    2bd8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2bdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bde:	98 30       	cpi	r25, 0x08	; 8
    2be0:	38 f0       	brcs	.+14     	; 0x2bf0 <_ZN14SoftwareSerial5beginEl+0xc8>
    2be2:	9e 30       	cpi	r25, 0x0E	; 14
    2be4:	40 f0       	brcs	.+16     	; 0x2bf6 <_ZN14SoftwareSerial5beginEl+0xce>
    2be6:	96 31       	cpi	r25, 0x16	; 22
    2be8:	48 f0       	brcs	.+18     	; 0x2bfc <_ZN14SoftwareSerial5beginEl+0xd4>
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	08 c0       	rjmp	.+16     	; 0x2c00 <_ZN14SoftwareSerial5beginEl+0xd8>
    2bf0:	2d e6       	ldi	r18, 0x6D	; 109
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	05 c0       	rjmp	.+10     	; 0x2c00 <_ZN14SoftwareSerial5beginEl+0xd8>
    2bf6:	2b e6       	ldi	r18, 0x6B	; 107
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	02 c0       	rjmp	.+4      	; 0x2c00 <_ZN14SoftwareSerial5beginEl+0xd8>
    2bfc:	2c e6       	ldi	r18, 0x6C	; 108
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	3c 8b       	std	Y+20, r19	; 0x14
    2c02:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2c04:	98 30       	cpi	r25, 0x08	; 8
    2c06:	30 f4       	brcc	.+12     	; 0x2c14 <_ZN14SoftwareSerial5beginEl+0xec>
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <_ZN14SoftwareSerial5beginEl+0xe6>
    2c0c:	88 0f       	add	r24, r24
    2c0e:	9a 95       	dec	r25
    2c10:	ea f7       	brpl	.-6      	; 0x2c0c <_ZN14SoftwareSerial5beginEl+0xe4>
    2c12:	0e c0       	rjmp	.+28     	; 0x2c30 <_ZN14SoftwareSerial5beginEl+0x108>
    2c14:	29 2f       	mov	r18, r25
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	9e 30       	cpi	r25, 0x0E	; 14
    2c1a:	18 f4       	brcc	.+6      	; 0x2c22 <_ZN14SoftwareSerial5beginEl+0xfa>
    2c1c:	28 50       	subi	r18, 0x08	; 8
    2c1e:	31 09       	sbc	r19, r1
    2c20:	02 c0       	rjmp	.+4      	; 0x2c26 <_ZN14SoftwareSerial5beginEl+0xfe>
    2c22:	2e 50       	subi	r18, 0x0E	; 14
    2c24:	31 09       	sbc	r19, r1
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	01 c0       	rjmp	.+2      	; 0x2c2c <_ZN14SoftwareSerial5beginEl+0x104>
    2c2a:	88 0f       	add	r24, r24
    2c2c:	2a 95       	dec	r18
    2c2e:	ea f7       	brpl	.-6      	; 0x2c2a <_ZN14SoftwareSerial5beginEl+0x102>
    2c30:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2c32:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c34:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	f1 f7       	brne	.-4      	; 0x2c36 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    2c3a:	ce 01       	movw	r24, r28
}
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    2c40:	0c 94 6d 14 	jmp	0x28da	; 0x28da <_ZN14SoftwareSerial6listenEv>

00002c44 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2c44:	08 95       	ret

00002c46 <__divmodhi4>:
    2c46:	97 fb       	bst	r25, 7
    2c48:	07 2e       	mov	r0, r23
    2c4a:	16 f4       	brtc	.+4      	; 0x2c50 <__divmodhi4+0xa>
    2c4c:	00 94       	com	r0
    2c4e:	07 d0       	rcall	.+14     	; 0x2c5e <__divmodhi4_neg1>
    2c50:	77 fd       	sbrc	r23, 7
    2c52:	09 d0       	rcall	.+18     	; 0x2c66 <__divmodhi4_neg2>
    2c54:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__udivmodhi4>
    2c58:	07 fc       	sbrc	r0, 7
    2c5a:	05 d0       	rcall	.+10     	; 0x2c66 <__divmodhi4_neg2>
    2c5c:	3e f4       	brtc	.+14     	; 0x2c6c <__divmodhi4_exit>

00002c5e <__divmodhi4_neg1>:
    2c5e:	90 95       	com	r25
    2c60:	81 95       	neg	r24
    2c62:	9f 4f       	sbci	r25, 0xFF	; 255
    2c64:	08 95       	ret

00002c66 <__divmodhi4_neg2>:
    2c66:	70 95       	com	r23
    2c68:	61 95       	neg	r22
    2c6a:	7f 4f       	sbci	r23, 0xFF	; 255

00002c6c <__divmodhi4_exit>:
    2c6c:	08 95       	ret

00002c6e <__udivmodsi4>:
    2c6e:	a1 e2       	ldi	r26, 0x21	; 33
    2c70:	1a 2e       	mov	r1, r26
    2c72:	aa 1b       	sub	r26, r26
    2c74:	bb 1b       	sub	r27, r27
    2c76:	fd 01       	movw	r30, r26
    2c78:	0d c0       	rjmp	.+26     	; 0x2c94 <__udivmodsi4_ep>

00002c7a <__udivmodsi4_loop>:
    2c7a:	aa 1f       	adc	r26, r26
    2c7c:	bb 1f       	adc	r27, r27
    2c7e:	ee 1f       	adc	r30, r30
    2c80:	ff 1f       	adc	r31, r31
    2c82:	a2 17       	cp	r26, r18
    2c84:	b3 07       	cpc	r27, r19
    2c86:	e4 07       	cpc	r30, r20
    2c88:	f5 07       	cpc	r31, r21
    2c8a:	20 f0       	brcs	.+8      	; 0x2c94 <__udivmodsi4_ep>
    2c8c:	a2 1b       	sub	r26, r18
    2c8e:	b3 0b       	sbc	r27, r19
    2c90:	e4 0b       	sbc	r30, r20
    2c92:	f5 0b       	sbc	r31, r21

00002c94 <__udivmodsi4_ep>:
    2c94:	66 1f       	adc	r22, r22
    2c96:	77 1f       	adc	r23, r23
    2c98:	88 1f       	adc	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	1a 94       	dec	r1
    2c9e:	69 f7       	brne	.-38     	; 0x2c7a <__udivmodsi4_loop>
    2ca0:	60 95       	com	r22
    2ca2:	70 95       	com	r23
    2ca4:	80 95       	com	r24
    2ca6:	90 95       	com	r25
    2ca8:	9b 01       	movw	r18, r22
    2caa:	ac 01       	movw	r20, r24
    2cac:	bd 01       	movw	r22, r26
    2cae:	cf 01       	movw	r24, r30
    2cb0:	08 95       	ret

00002cb2 <__divmodsi4>:
    2cb2:	05 2e       	mov	r0, r21
    2cb4:	97 fb       	bst	r25, 7
    2cb6:	1e f4       	brtc	.+6      	; 0x2cbe <__divmodsi4+0xc>
    2cb8:	00 94       	com	r0
    2cba:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__negsi2>
    2cbe:	57 fd       	sbrc	r21, 7
    2cc0:	07 d0       	rcall	.+14     	; 0x2cd0 <__divmodsi4_neg2>
    2cc2:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <__udivmodsi4>
    2cc6:	07 fc       	sbrc	r0, 7
    2cc8:	03 d0       	rcall	.+6      	; 0x2cd0 <__divmodsi4_neg2>
    2cca:	4e f4       	brtc	.+18     	; 0x2cde <__divmodsi4_exit>
    2ccc:	0c 94 70 16 	jmp	0x2ce0	; 0x2ce0 <__negsi2>

00002cd0 <__divmodsi4_neg2>:
    2cd0:	50 95       	com	r21
    2cd2:	40 95       	com	r20
    2cd4:	30 95       	com	r19
    2cd6:	21 95       	neg	r18
    2cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cda:	4f 4f       	sbci	r20, 0xFF	; 255
    2cdc:	5f 4f       	sbci	r21, 0xFF	; 255

00002cde <__divmodsi4_exit>:
    2cde:	08 95       	ret

00002ce0 <__negsi2>:
    2ce0:	90 95       	com	r25
    2ce2:	80 95       	com	r24
    2ce4:	70 95       	com	r23
    2ce6:	61 95       	neg	r22
    2ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cea:	8f 4f       	sbci	r24, 0xFF	; 255
    2cec:	9f 4f       	sbci	r25, 0xFF	; 255
    2cee:	08 95       	ret

00002cf0 <__udivmodhi4>:
    2cf0:	aa 1b       	sub	r26, r26
    2cf2:	bb 1b       	sub	r27, r27
    2cf4:	51 e1       	ldi	r21, 0x11	; 17
    2cf6:	07 c0       	rjmp	.+14     	; 0x2d06 <__udivmodhi4_ep>

00002cf8 <__udivmodhi4_loop>:
    2cf8:	aa 1f       	adc	r26, r26
    2cfa:	bb 1f       	adc	r27, r27
    2cfc:	a6 17       	cp	r26, r22
    2cfe:	b7 07       	cpc	r27, r23
    2d00:	10 f0       	brcs	.+4      	; 0x2d06 <__udivmodhi4_ep>
    2d02:	a6 1b       	sub	r26, r22
    2d04:	b7 0b       	sbc	r27, r23

00002d06 <__udivmodhi4_ep>:
    2d06:	88 1f       	adc	r24, r24
    2d08:	99 1f       	adc	r25, r25
    2d0a:	5a 95       	dec	r21
    2d0c:	a9 f7       	brne	.-22     	; 0x2cf8 <__udivmodhi4_loop>
    2d0e:	80 95       	com	r24
    2d10:	90 95       	com	r25
    2d12:	bc 01       	movw	r22, r24
    2d14:	cd 01       	movw	r24, r26
    2d16:	08 95       	ret

00002d18 <__tablejump2__>:
    2d18:	ee 0f       	add	r30, r30
    2d1a:	ff 1f       	adc	r31, r31
    2d1c:	05 90       	lpm	r0, Z+
    2d1e:	f4 91       	lpm	r31, Z
    2d20:	e0 2d       	mov	r30, r0
    2d22:	09 94       	ijmp

00002d24 <malloc>:
    2d24:	0f 93       	push	r16
    2d26:	1f 93       	push	r17
    2d28:	cf 93       	push	r28
    2d2a:	df 93       	push	r29
    2d2c:	82 30       	cpi	r24, 0x02	; 2
    2d2e:	91 05       	cpc	r25, r1
    2d30:	10 f4       	brcc	.+4      	; 0x2d36 <malloc+0x12>
    2d32:	82 e0       	ldi	r24, 0x02	; 2
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	e0 91 d0 05 	lds	r30, 0x05D0	; 0x8005d0 <__flp>
    2d3a:	f0 91 d1 05 	lds	r31, 0x05D1	; 0x8005d1 <__flp+0x1>
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	a0 e0       	ldi	r26, 0x00	; 0
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	30 97       	sbiw	r30, 0x00	; 0
    2d48:	19 f1       	breq	.+70     	; 0x2d90 <malloc+0x6c>
    2d4a:	40 81       	ld	r20, Z
    2d4c:	51 81       	ldd	r21, Z+1	; 0x01
    2d4e:	02 81       	ldd	r16, Z+2	; 0x02
    2d50:	13 81       	ldd	r17, Z+3	; 0x03
    2d52:	48 17       	cp	r20, r24
    2d54:	59 07       	cpc	r21, r25
    2d56:	c8 f0       	brcs	.+50     	; 0x2d8a <malloc+0x66>
    2d58:	84 17       	cp	r24, r20
    2d5a:	95 07       	cpc	r25, r21
    2d5c:	69 f4       	brne	.+26     	; 0x2d78 <malloc+0x54>
    2d5e:	10 97       	sbiw	r26, 0x00	; 0
    2d60:	31 f0       	breq	.+12     	; 0x2d6e <malloc+0x4a>
    2d62:	12 96       	adiw	r26, 0x02	; 2
    2d64:	0c 93       	st	X, r16
    2d66:	12 97       	sbiw	r26, 0x02	; 2
    2d68:	13 96       	adiw	r26, 0x03	; 3
    2d6a:	1c 93       	st	X, r17
    2d6c:	27 c0       	rjmp	.+78     	; 0x2dbc <malloc+0x98>
    2d6e:	00 93 d0 05 	sts	0x05D0, r16	; 0x8005d0 <__flp>
    2d72:	10 93 d1 05 	sts	0x05D1, r17	; 0x8005d1 <__flp+0x1>
    2d76:	22 c0       	rjmp	.+68     	; 0x2dbc <malloc+0x98>
    2d78:	21 15       	cp	r18, r1
    2d7a:	31 05       	cpc	r19, r1
    2d7c:	19 f0       	breq	.+6      	; 0x2d84 <malloc+0x60>
    2d7e:	42 17       	cp	r20, r18
    2d80:	53 07       	cpc	r21, r19
    2d82:	18 f4       	brcc	.+6      	; 0x2d8a <malloc+0x66>
    2d84:	9a 01       	movw	r18, r20
    2d86:	bd 01       	movw	r22, r26
    2d88:	ef 01       	movw	r28, r30
    2d8a:	df 01       	movw	r26, r30
    2d8c:	f8 01       	movw	r30, r16
    2d8e:	db cf       	rjmp	.-74     	; 0x2d46 <malloc+0x22>
    2d90:	21 15       	cp	r18, r1
    2d92:	31 05       	cpc	r19, r1
    2d94:	f9 f0       	breq	.+62     	; 0x2dd4 <malloc+0xb0>
    2d96:	28 1b       	sub	r18, r24
    2d98:	39 0b       	sbc	r19, r25
    2d9a:	24 30       	cpi	r18, 0x04	; 4
    2d9c:	31 05       	cpc	r19, r1
    2d9e:	80 f4       	brcc	.+32     	; 0x2dc0 <malloc+0x9c>
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	9b 81       	ldd	r25, Y+3	; 0x03
    2da4:	61 15       	cp	r22, r1
    2da6:	71 05       	cpc	r23, r1
    2da8:	21 f0       	breq	.+8      	; 0x2db2 <malloc+0x8e>
    2daa:	fb 01       	movw	r30, r22
    2dac:	93 83       	std	Z+3, r25	; 0x03
    2dae:	82 83       	std	Z+2, r24	; 0x02
    2db0:	04 c0       	rjmp	.+8      	; 0x2dba <malloc+0x96>
    2db2:	90 93 d1 05 	sts	0x05D1, r25	; 0x8005d1 <__flp+0x1>
    2db6:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <__flp>
    2dba:	fe 01       	movw	r30, r28
    2dbc:	32 96       	adiw	r30, 0x02	; 2
    2dbe:	44 c0       	rjmp	.+136    	; 0x2e48 <malloc+0x124>
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	e2 0f       	add	r30, r18
    2dc4:	f3 1f       	adc	r31, r19
    2dc6:	81 93       	st	Z+, r24
    2dc8:	91 93       	st	Z+, r25
    2dca:	22 50       	subi	r18, 0x02	; 2
    2dcc:	31 09       	sbc	r19, r1
    2dce:	39 83       	std	Y+1, r19	; 0x01
    2dd0:	28 83       	st	Y, r18
    2dd2:	3a c0       	rjmp	.+116    	; 0x2e48 <malloc+0x124>
    2dd4:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <__brkval>
    2dd8:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <__brkval+0x1>
    2ddc:	23 2b       	or	r18, r19
    2dde:	41 f4       	brne	.+16     	; 0x2df0 <malloc+0xcc>
    2de0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2de4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2de8:	30 93 cf 05 	sts	0x05CF, r19	; 0x8005cf <__brkval+0x1>
    2dec:	20 93 ce 05 	sts	0x05CE, r18	; 0x8005ce <__brkval>
    2df0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2df4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2df8:	21 15       	cp	r18, r1
    2dfa:	31 05       	cpc	r19, r1
    2dfc:	41 f4       	brne	.+16     	; 0x2e0e <malloc+0xea>
    2dfe:	2d b7       	in	r18, 0x3d	; 61
    2e00:	3e b7       	in	r19, 0x3e	; 62
    2e02:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2e06:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2e0a:	24 1b       	sub	r18, r20
    2e0c:	35 0b       	sbc	r19, r21
    2e0e:	e0 91 ce 05 	lds	r30, 0x05CE	; 0x8005ce <__brkval>
    2e12:	f0 91 cf 05 	lds	r31, 0x05CF	; 0x8005cf <__brkval+0x1>
    2e16:	e2 17       	cp	r30, r18
    2e18:	f3 07       	cpc	r31, r19
    2e1a:	a0 f4       	brcc	.+40     	; 0x2e44 <malloc+0x120>
    2e1c:	2e 1b       	sub	r18, r30
    2e1e:	3f 0b       	sbc	r19, r31
    2e20:	28 17       	cp	r18, r24
    2e22:	39 07       	cpc	r19, r25
    2e24:	78 f0       	brcs	.+30     	; 0x2e44 <malloc+0x120>
    2e26:	ac 01       	movw	r20, r24
    2e28:	4e 5f       	subi	r20, 0xFE	; 254
    2e2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e2c:	24 17       	cp	r18, r20
    2e2e:	35 07       	cpc	r19, r21
    2e30:	48 f0       	brcs	.+18     	; 0x2e44 <malloc+0x120>
    2e32:	4e 0f       	add	r20, r30
    2e34:	5f 1f       	adc	r21, r31
    2e36:	50 93 cf 05 	sts	0x05CF, r21	; 0x8005cf <__brkval+0x1>
    2e3a:	40 93 ce 05 	sts	0x05CE, r20	; 0x8005ce <__brkval>
    2e3e:	81 93       	st	Z+, r24
    2e40:	91 93       	st	Z+, r25
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <malloc+0x124>
    2e44:	e0 e0       	ldi	r30, 0x00	; 0
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	cf 01       	movw	r24, r30
    2e4a:	df 91       	pop	r29
    2e4c:	cf 91       	pop	r28
    2e4e:	1f 91       	pop	r17
    2e50:	0f 91       	pop	r16
    2e52:	08 95       	ret

00002e54 <free>:
    2e54:	cf 93       	push	r28
    2e56:	df 93       	push	r29
    2e58:	00 97       	sbiw	r24, 0x00	; 0
    2e5a:	09 f4       	brne	.+2      	; 0x2e5e <free+0xa>
    2e5c:	81 c0       	rjmp	.+258    	; 0x2f60 <free+0x10c>
    2e5e:	fc 01       	movw	r30, r24
    2e60:	32 97       	sbiw	r30, 0x02	; 2
    2e62:	13 82       	std	Z+3, r1	; 0x03
    2e64:	12 82       	std	Z+2, r1	; 0x02
    2e66:	a0 91 d0 05 	lds	r26, 0x05D0	; 0x8005d0 <__flp>
    2e6a:	b0 91 d1 05 	lds	r27, 0x05D1	; 0x8005d1 <__flp+0x1>
    2e6e:	10 97       	sbiw	r26, 0x00	; 0
    2e70:	81 f4       	brne	.+32     	; 0x2e92 <free+0x3e>
    2e72:	20 81       	ld	r18, Z
    2e74:	31 81       	ldd	r19, Z+1	; 0x01
    2e76:	82 0f       	add	r24, r18
    2e78:	93 1f       	adc	r25, r19
    2e7a:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <__brkval>
    2e7e:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <__brkval+0x1>
    2e82:	28 17       	cp	r18, r24
    2e84:	39 07       	cpc	r19, r25
    2e86:	51 f5       	brne	.+84     	; 0x2edc <free+0x88>
    2e88:	f0 93 cf 05 	sts	0x05CF, r31	; 0x8005cf <__brkval+0x1>
    2e8c:	e0 93 ce 05 	sts	0x05CE, r30	; 0x8005ce <__brkval>
    2e90:	67 c0       	rjmp	.+206    	; 0x2f60 <free+0x10c>
    2e92:	ed 01       	movw	r28, r26
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	ce 17       	cp	r28, r30
    2e9a:	df 07       	cpc	r29, r31
    2e9c:	40 f4       	brcc	.+16     	; 0x2eae <free+0x5a>
    2e9e:	4a 81       	ldd	r20, Y+2	; 0x02
    2ea0:	5b 81       	ldd	r21, Y+3	; 0x03
    2ea2:	9e 01       	movw	r18, r28
    2ea4:	41 15       	cp	r20, r1
    2ea6:	51 05       	cpc	r21, r1
    2ea8:	f1 f0       	breq	.+60     	; 0x2ee6 <free+0x92>
    2eaa:	ea 01       	movw	r28, r20
    2eac:	f5 cf       	rjmp	.-22     	; 0x2e98 <free+0x44>
    2eae:	d3 83       	std	Z+3, r29	; 0x03
    2eb0:	c2 83       	std	Z+2, r28	; 0x02
    2eb2:	40 81       	ld	r20, Z
    2eb4:	51 81       	ldd	r21, Z+1	; 0x01
    2eb6:	84 0f       	add	r24, r20
    2eb8:	95 1f       	adc	r25, r21
    2eba:	c8 17       	cp	r28, r24
    2ebc:	d9 07       	cpc	r29, r25
    2ebe:	59 f4       	brne	.+22     	; 0x2ed6 <free+0x82>
    2ec0:	88 81       	ld	r24, Y
    2ec2:	99 81       	ldd	r25, Y+1	; 0x01
    2ec4:	84 0f       	add	r24, r20
    2ec6:	95 1f       	adc	r25, r21
    2ec8:	02 96       	adiw	r24, 0x02	; 2
    2eca:	91 83       	std	Z+1, r25	; 0x01
    2ecc:	80 83       	st	Z, r24
    2ece:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed2:	93 83       	std	Z+3, r25	; 0x03
    2ed4:	82 83       	std	Z+2, r24	; 0x02
    2ed6:	21 15       	cp	r18, r1
    2ed8:	31 05       	cpc	r19, r1
    2eda:	29 f4       	brne	.+10     	; 0x2ee6 <free+0x92>
    2edc:	f0 93 d1 05 	sts	0x05D1, r31	; 0x8005d1 <__flp+0x1>
    2ee0:	e0 93 d0 05 	sts	0x05D0, r30	; 0x8005d0 <__flp>
    2ee4:	3d c0       	rjmp	.+122    	; 0x2f60 <free+0x10c>
    2ee6:	e9 01       	movw	r28, r18
    2ee8:	fb 83       	std	Y+3, r31	; 0x03
    2eea:	ea 83       	std	Y+2, r30	; 0x02
    2eec:	49 91       	ld	r20, Y+
    2eee:	59 91       	ld	r21, Y+
    2ef0:	c4 0f       	add	r28, r20
    2ef2:	d5 1f       	adc	r29, r21
    2ef4:	ec 17       	cp	r30, r28
    2ef6:	fd 07       	cpc	r31, r29
    2ef8:	61 f4       	brne	.+24     	; 0x2f12 <free+0xbe>
    2efa:	80 81       	ld	r24, Z
    2efc:	91 81       	ldd	r25, Z+1	; 0x01
    2efe:	84 0f       	add	r24, r20
    2f00:	95 1f       	adc	r25, r21
    2f02:	02 96       	adiw	r24, 0x02	; 2
    2f04:	e9 01       	movw	r28, r18
    2f06:	99 83       	std	Y+1, r25	; 0x01
    2f08:	88 83       	st	Y, r24
    2f0a:	82 81       	ldd	r24, Z+2	; 0x02
    2f0c:	93 81       	ldd	r25, Z+3	; 0x03
    2f0e:	9b 83       	std	Y+3, r25	; 0x03
    2f10:	8a 83       	std	Y+2, r24	; 0x02
    2f12:	e0 e0       	ldi	r30, 0x00	; 0
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	12 96       	adiw	r26, 0x02	; 2
    2f18:	8d 91       	ld	r24, X+
    2f1a:	9c 91       	ld	r25, X
    2f1c:	13 97       	sbiw	r26, 0x03	; 3
    2f1e:	00 97       	sbiw	r24, 0x00	; 0
    2f20:	19 f0       	breq	.+6      	; 0x2f28 <free+0xd4>
    2f22:	fd 01       	movw	r30, r26
    2f24:	dc 01       	movw	r26, r24
    2f26:	f7 cf       	rjmp	.-18     	; 0x2f16 <free+0xc2>
    2f28:	8d 91       	ld	r24, X+
    2f2a:	9c 91       	ld	r25, X
    2f2c:	11 97       	sbiw	r26, 0x01	; 1
    2f2e:	9d 01       	movw	r18, r26
    2f30:	2e 5f       	subi	r18, 0xFE	; 254
    2f32:	3f 4f       	sbci	r19, 0xFF	; 255
    2f34:	82 0f       	add	r24, r18
    2f36:	93 1f       	adc	r25, r19
    2f38:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <__brkval>
    2f3c:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <__brkval+0x1>
    2f40:	28 17       	cp	r18, r24
    2f42:	39 07       	cpc	r19, r25
    2f44:	69 f4       	brne	.+26     	; 0x2f60 <free+0x10c>
    2f46:	30 97       	sbiw	r30, 0x00	; 0
    2f48:	29 f4       	brne	.+10     	; 0x2f54 <free+0x100>
    2f4a:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <__flp+0x1>
    2f4e:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <__flp>
    2f52:	02 c0       	rjmp	.+4      	; 0x2f58 <free+0x104>
    2f54:	13 82       	std	Z+3, r1	; 0x03
    2f56:	12 82       	std	Z+2, r1	; 0x02
    2f58:	b0 93 cf 05 	sts	0x05CF, r27	; 0x8005cf <__brkval+0x1>
    2f5c:	a0 93 ce 05 	sts	0x05CE, r26	; 0x8005ce <__brkval>
    2f60:	df 91       	pop	r29
    2f62:	cf 91       	pop	r28
    2f64:	08 95       	ret

00002f66 <memset>:
    2f66:	dc 01       	movw	r26, r24
    2f68:	01 c0       	rjmp	.+2      	; 0x2f6c <memset+0x6>
    2f6a:	6d 93       	st	X+, r22
    2f6c:	41 50       	subi	r20, 0x01	; 1
    2f6e:	50 40       	sbci	r21, 0x00	; 0
    2f70:	e0 f7       	brcc	.-8      	; 0x2f6a <memset+0x4>
    2f72:	08 95       	ret

00002f74 <__do_global_dtors>:
    2f74:	10 e0       	ldi	r17, 0x00	; 0
    2f76:	c9 e8       	ldi	r28, 0x89	; 137
    2f78:	d0 e0       	ldi	r29, 0x00	; 0
    2f7a:	04 c0       	rjmp	.+8      	; 0x2f84 <__do_global_dtors+0x10>
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__tablejump2__>
    2f82:	21 96       	adiw	r28, 0x01	; 1
    2f84:	ca 38       	cpi	r28, 0x8A	; 138
    2f86:	d1 07       	cpc	r29, r17
    2f88:	c9 f7       	brne	.-14     	; 0x2f7c <__do_global_dtors+0x8>
    2f8a:	f8 94       	cli

00002f8c <__stop_program>:
    2f8c:	ff cf       	rjmp	.-2      	; 0x2f8c <__stop_program>
